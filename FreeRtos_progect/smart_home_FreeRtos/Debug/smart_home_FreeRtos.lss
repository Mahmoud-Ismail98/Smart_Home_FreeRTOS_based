
smart_home_FreeRtos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002b5e  00002bf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000069a  008000ee  008000ee  00002c80  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002c80  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002cb0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000790  00000000  00000000  00002cec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006a82  00000000  00000000  0000347c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ab6  00000000  00000000  00009efe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004566  00000000  00000000  0000b9b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001690  00000000  00000000  0000ff1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000022c6  00000000  00000000  000115ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000673d  00000000  00000000  00013872  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008d8  00000000  00000000  00019faf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <__vector_1>
       8:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__vector_2>
       c:	0c 94 bc 11 	jmp	0x2378	; 0x2378 <__vector_3>
      10:	0c 94 06 15 	jmp	0x2a0c	; 0x2a0c <__vector_4>
      14:	0c 94 dd 14 	jmp	0x29ba	; 0x29ba <__vector_5>
      18:	0c 94 b4 14 	jmp	0x2968	; 0x2968 <__vector_6>
      1c:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_7>
      20:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <__vector_8>
      24:	0c 94 62 14 	jmp	0x28c4	; 0x28c4 <__vector_9>
      28:	0c 94 42 14 	jmp	0x2884	; 0x2884 <__vector_10>
      2c:	0c 94 1b 14 	jmp	0x2836	; 0x2836 <__vector_11>
      30:	0c 94 f2 13 	jmp	0x27e4	; 0x27e4 <__vector_12>
      34:	0c 94 2f 15 	jmp	0x2a5e	; 0x2a5e <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 58 15 	jmp	0x2ab0	; 0x2ab0 <__vector_15>
      40:	0c 94 de 0f 	jmp	0x1fbc	; 0x1fbc <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 38       	cpi	r26, 0x88	; 136
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 16 0c 	call	0x182c	; 0x182c <main>
      8a:	0c 94 ad 15 	jmp	0x2b5a	; 0x2b5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
      92:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      94:	03 96       	adiw	r24, 0x03	; 3
      96:	92 83       	std	Z+2, r25	; 0x02
      98:	81 83       	std	Z+1, r24	; 0x01

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
      9a:	2f ef       	ldi	r18, 0xFF	; 255
      9c:	3f ef       	ldi	r19, 0xFF	; 255
      9e:	34 83       	std	Z+4, r19	; 0x04
      a0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a2:	96 83       	std	Z+6, r25	; 0x06
      a4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
      a6:	90 87       	std	Z+8, r25	; 0x08
      a8:	87 83       	std	Z+7, r24	; 0x07
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
      aa:	10 82       	st	Z, r1
      ac:	08 95       	ret

000000ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
      ae:	fc 01       	movw	r30, r24
      b0:	11 86       	std	Z+9, r1	; 0x09
      b2:	10 86       	std	Z+8, r1	; 0x08
      b4:	08 95       	ret

000000b6 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
      b6:	cf 93       	push	r28
      b8:	df 93       	push	r29
      ba:	9c 01       	movw	r18, r24
      bc:	fb 01       	movw	r30, r22
    ListItem_t * const pxIndex = pxList->pxIndex;
      be:	dc 01       	movw	r26, r24
      c0:	11 96       	adiw	r26, 0x01	; 1
      c2:	cd 91       	ld	r28, X+
      c4:	dc 91       	ld	r29, X
      c6:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
      c8:	d3 83       	std	Z+3, r29	; 0x03
      ca:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
      cc:	8c 81       	ldd	r24, Y+4	; 0x04
      ce:	9d 81       	ldd	r25, Y+5	; 0x05
      d0:	95 83       	std	Z+5, r25	; 0x05
      d2:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
      d4:	8c 81       	ldd	r24, Y+4	; 0x04
      d6:	9d 81       	ldd	r25, Y+5	; 0x05
      d8:	dc 01       	movw	r26, r24
      da:	13 96       	adiw	r26, 0x03	; 3
      dc:	7c 93       	st	X, r23
      de:	6e 93       	st	-X, r22
      e0:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
      e2:	7d 83       	std	Y+5, r23	; 0x05
      e4:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
      e6:	31 87       	std	Z+9, r19	; 0x09
      e8:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
      ea:	f9 01       	movw	r30, r18
      ec:	80 81       	ld	r24, Z
      ee:	8f 5f       	subi	r24, 0xFF	; 255
      f0:	80 83       	st	Z, r24
}
      f2:	df 91       	pop	r29
      f4:	cf 91       	pop	r28
      f6:	08 95       	ret

000000f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
      f8:	cf 93       	push	r28
      fa:	df 93       	push	r29
      fc:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
      fe:	48 81       	ld	r20, Y
     100:	59 81       	ldd	r21, Y+1	; 0x01
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     102:	4f 3f       	cpi	r20, 0xFF	; 255
     104:	2f ef       	ldi	r18, 0xFF	; 255
     106:	52 07       	cpc	r21, r18
     108:	21 f4       	brne	.+8      	; 0x112 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     10a:	fc 01       	movw	r30, r24
     10c:	a7 81       	ldd	r26, Z+7	; 0x07
     10e:	b0 85       	ldd	r27, Z+8	; 0x08
     110:	0d c0       	rjmp	.+26     	; 0x12c <vListInsert+0x34>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     112:	dc 01       	movw	r26, r24
     114:	13 96       	adiw	r26, 0x03	; 3
     116:	01 c0       	rjmp	.+2      	; 0x11a <vListInsert+0x22>
     118:	df 01       	movw	r26, r30
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	ed 91       	ld	r30, X+
     11e:	fc 91       	ld	r31, X
     120:	13 97       	sbiw	r26, 0x03	; 3
     122:	20 81       	ld	r18, Z
     124:	31 81       	ldd	r19, Z+1	; 0x01
     126:	42 17       	cp	r20, r18
     128:	53 07       	cpc	r21, r19
     12a:	b0 f7       	brcc	.-20     	; 0x118 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     12c:	12 96       	adiw	r26, 0x02	; 2
     12e:	ed 91       	ld	r30, X+
     130:	fc 91       	ld	r31, X
     132:	13 97       	sbiw	r26, 0x03	; 3
     134:	fb 83       	std	Y+3, r31	; 0x03
     136:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     138:	d5 83       	std	Z+5, r29	; 0x05
     13a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
     13c:	bd 83       	std	Y+5, r27	; 0x05
     13e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
     140:	13 96       	adiw	r26, 0x03	; 3
     142:	dc 93       	st	X, r29
     144:	ce 93       	st	-X, r28
     146:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     148:	99 87       	std	Y+9, r25	; 0x09
     14a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
     14c:	fc 01       	movw	r30, r24
     14e:	20 81       	ld	r18, Z
     150:	2f 5f       	subi	r18, 0xFF	; 255
     152:	20 83       	st	Z, r18
}
     154:	df 91       	pop	r29
     156:	cf 91       	pop	r28
     158:	08 95       	ret

0000015a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     15a:	cf 93       	push	r28
     15c:	df 93       	push	r29
     15e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     160:	a0 85       	ldd	r26, Z+8	; 0x08
     162:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     164:	c2 81       	ldd	r28, Z+2	; 0x02
     166:	d3 81       	ldd	r29, Z+3	; 0x03
     168:	84 81       	ldd	r24, Z+4	; 0x04
     16a:	95 81       	ldd	r25, Z+5	; 0x05
     16c:	9d 83       	std	Y+5, r25	; 0x05
     16e:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     170:	c4 81       	ldd	r28, Z+4	; 0x04
     172:	d5 81       	ldd	r29, Z+5	; 0x05
     174:	82 81       	ldd	r24, Z+2	; 0x02
     176:	93 81       	ldd	r25, Z+3	; 0x03
     178:	9b 83       	std	Y+3, r25	; 0x03
     17a:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     17c:	11 96       	adiw	r26, 0x01	; 1
     17e:	8d 91       	ld	r24, X+
     180:	9c 91       	ld	r25, X
     182:	12 97       	sbiw	r26, 0x02	; 2
     184:	e8 17       	cp	r30, r24
     186:	f9 07       	cpc	r31, r25
     188:	31 f4       	brne	.+12     	; 0x196 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     18a:	84 81       	ldd	r24, Z+4	; 0x04
     18c:	95 81       	ldd	r25, Z+5	; 0x05
     18e:	12 96       	adiw	r26, 0x02	; 2
     190:	9c 93       	st	X, r25
     192:	8e 93       	st	-X, r24
     194:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     196:	11 86       	std	Z+9, r1	; 0x09
     198:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
     19a:	8c 91       	ld	r24, X
     19c:	81 50       	subi	r24, 0x01	; 1
     19e:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     1a0:	8c 91       	ld	r24, X
}
     1a2:	df 91       	pop	r29
     1a4:	cf 91       	pop	r28
     1a6:	08 95       	ret

000001a8 <prvSetupTimerInterrupt>:
	return pdTRUE;
}
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
     1a8:	1b bc       	out	0x2b, r1	; 43
     1aa:	8c e7       	ldi	r24, 0x7C	; 124
     1ac:	8a bd       	out	0x2a, r24	; 42
     1ae:	8b e0       	ldi	r24, 0x0B	; 11
     1b0:	8e bd       	out	0x2e, r24	; 46
     1b2:	89 b7       	in	r24, 0x39	; 57
     1b4:	80 61       	ori	r24, 0x10	; 16
     1b6:	89 bf       	out	0x39, r24	; 57
     1b8:	08 95       	ret

000001ba <pxPortInitialiseStack>:
     1ba:	31 e1       	ldi	r19, 0x11	; 17
     1bc:	fc 01       	movw	r30, r24
     1be:	30 83       	st	Z, r19
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	22 e2       	ldi	r18, 0x22	; 34
     1c4:	20 83       	st	Z, r18
     1c6:	31 97       	sbiw	r30, 0x01	; 1
     1c8:	a3 e3       	ldi	r26, 0x33	; 51
     1ca:	a0 83       	st	Z, r26
     1cc:	31 97       	sbiw	r30, 0x01	; 1
     1ce:	60 83       	st	Z, r22
     1d0:	31 97       	sbiw	r30, 0x01	; 1
     1d2:	70 83       	st	Z, r23
     1d4:	31 97       	sbiw	r30, 0x01	; 1
     1d6:	10 82       	st	Z, r1
     1d8:	31 97       	sbiw	r30, 0x01	; 1
     1da:	60 e8       	ldi	r22, 0x80	; 128
     1dc:	60 83       	st	Z, r22
     1de:	31 97       	sbiw	r30, 0x01	; 1
     1e0:	10 82       	st	Z, r1
     1e2:	31 97       	sbiw	r30, 0x01	; 1
     1e4:	62 e0       	ldi	r22, 0x02	; 2
     1e6:	60 83       	st	Z, r22
     1e8:	31 97       	sbiw	r30, 0x01	; 1
     1ea:	63 e0       	ldi	r22, 0x03	; 3
     1ec:	60 83       	st	Z, r22
     1ee:	31 97       	sbiw	r30, 0x01	; 1
     1f0:	64 e0       	ldi	r22, 0x04	; 4
     1f2:	60 83       	st	Z, r22
     1f4:	31 97       	sbiw	r30, 0x01	; 1
     1f6:	65 e0       	ldi	r22, 0x05	; 5
     1f8:	60 83       	st	Z, r22
     1fa:	31 97       	sbiw	r30, 0x01	; 1
     1fc:	66 e0       	ldi	r22, 0x06	; 6
     1fe:	60 83       	st	Z, r22
     200:	31 97       	sbiw	r30, 0x01	; 1
     202:	67 e0       	ldi	r22, 0x07	; 7
     204:	60 83       	st	Z, r22
     206:	31 97       	sbiw	r30, 0x01	; 1
     208:	68 e0       	ldi	r22, 0x08	; 8
     20a:	60 83       	st	Z, r22
     20c:	31 97       	sbiw	r30, 0x01	; 1
     20e:	69 e0       	ldi	r22, 0x09	; 9
     210:	60 83       	st	Z, r22
     212:	31 97       	sbiw	r30, 0x01	; 1
     214:	60 e1       	ldi	r22, 0x10	; 16
     216:	60 83       	st	Z, r22
     218:	31 97       	sbiw	r30, 0x01	; 1
     21a:	30 83       	st	Z, r19
     21c:	31 97       	sbiw	r30, 0x01	; 1
     21e:	32 e1       	ldi	r19, 0x12	; 18
     220:	30 83       	st	Z, r19
     222:	31 97       	sbiw	r30, 0x01	; 1
     224:	33 e1       	ldi	r19, 0x13	; 19
     226:	30 83       	st	Z, r19
     228:	31 97       	sbiw	r30, 0x01	; 1
     22a:	34 e1       	ldi	r19, 0x14	; 20
     22c:	30 83       	st	Z, r19
     22e:	31 97       	sbiw	r30, 0x01	; 1
     230:	35 e1       	ldi	r19, 0x15	; 21
     232:	30 83       	st	Z, r19
     234:	31 97       	sbiw	r30, 0x01	; 1
     236:	36 e1       	ldi	r19, 0x16	; 22
     238:	30 83       	st	Z, r19
     23a:	31 97       	sbiw	r30, 0x01	; 1
     23c:	37 e1       	ldi	r19, 0x17	; 23
     23e:	30 83       	st	Z, r19
     240:	31 97       	sbiw	r30, 0x01	; 1
     242:	38 e1       	ldi	r19, 0x18	; 24
     244:	30 83       	st	Z, r19
     246:	31 97       	sbiw	r30, 0x01	; 1
     248:	39 e1       	ldi	r19, 0x19	; 25
     24a:	30 83       	st	Z, r19
     24c:	31 97       	sbiw	r30, 0x01	; 1
     24e:	30 e2       	ldi	r19, 0x20	; 32
     250:	30 83       	st	Z, r19
     252:	31 97       	sbiw	r30, 0x01	; 1
     254:	31 e2       	ldi	r19, 0x21	; 33
     256:	30 83       	st	Z, r19
     258:	31 97       	sbiw	r30, 0x01	; 1
     25a:	20 83       	st	Z, r18
     25c:	31 97       	sbiw	r30, 0x01	; 1
     25e:	23 e2       	ldi	r18, 0x23	; 35
     260:	20 83       	st	Z, r18
     262:	31 97       	sbiw	r30, 0x01	; 1
     264:	40 83       	st	Z, r20
     266:	31 97       	sbiw	r30, 0x01	; 1
     268:	50 83       	st	Z, r21
     26a:	31 97       	sbiw	r30, 0x01	; 1
     26c:	26 e2       	ldi	r18, 0x26	; 38
     26e:	20 83       	st	Z, r18
     270:	31 97       	sbiw	r30, 0x01	; 1
     272:	27 e2       	ldi	r18, 0x27	; 39
     274:	20 83       	st	Z, r18
     276:	31 97       	sbiw	r30, 0x01	; 1
     278:	28 e2       	ldi	r18, 0x28	; 40
     27a:	20 83       	st	Z, r18
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	29 e2       	ldi	r18, 0x29	; 41
     280:	20 83       	st	Z, r18
     282:	31 97       	sbiw	r30, 0x01	; 1
     284:	20 e3       	ldi	r18, 0x30	; 48
     286:	20 83       	st	Z, r18
     288:	31 97       	sbiw	r30, 0x01	; 1
     28a:	21 e3       	ldi	r18, 0x31	; 49
     28c:	20 83       	st	Z, r18
     28e:	86 97       	sbiw	r24, 0x26	; 38
     290:	08 95       	ret

00000292 <xPortStartScheduler>:
     292:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <prvSetupTimerInterrupt>
     296:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     29a:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     29e:	cd 91       	ld	r28, X+
     2a0:	cd bf       	out	0x3d, r28	; 61
     2a2:	dd 91       	ld	r29, X+
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	ff 91       	pop	r31
     2a8:	ef 91       	pop	r30
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	bf 91       	pop	r27
     2b0:	af 91       	pop	r26
     2b2:	9f 91       	pop	r25
     2b4:	8f 91       	pop	r24
     2b6:	7f 91       	pop	r23
     2b8:	6f 91       	pop	r22
     2ba:	5f 91       	pop	r21
     2bc:	4f 91       	pop	r20
     2be:	3f 91       	pop	r19
     2c0:	2f 91       	pop	r18
     2c2:	1f 91       	pop	r17
     2c4:	0f 91       	pop	r16
     2c6:	ff 90       	pop	r15
     2c8:	ef 90       	pop	r14
     2ca:	df 90       	pop	r13
     2cc:	cf 90       	pop	r12
     2ce:	bf 90       	pop	r11
     2d0:	af 90       	pop	r10
     2d2:	9f 90       	pop	r9
     2d4:	8f 90       	pop	r8
     2d6:	7f 90       	pop	r7
     2d8:	6f 90       	pop	r6
     2da:	5f 90       	pop	r5
     2dc:	4f 90       	pop	r4
     2de:	3f 90       	pop	r3
     2e0:	2f 90       	pop	r2
     2e2:	1f 90       	pop	r1
     2e4:	0f 90       	pop	r0
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	0f 90       	pop	r0
     2ea:	08 95       	ret
     2ec:	81 e0       	ldi	r24, 0x01	; 1
     2ee:	08 95       	ret

000002f0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     2f0:	0f 92       	push	r0
     2f2:	0f b6       	in	r0, 0x3f	; 63
     2f4:	f8 94       	cli
     2f6:	0f 92       	push	r0
     2f8:	1f 92       	push	r1
     2fa:	11 24       	eor	r1, r1
     2fc:	2f 92       	push	r2
     2fe:	3f 92       	push	r3
     300:	4f 92       	push	r4
     302:	5f 92       	push	r5
     304:	6f 92       	push	r6
     306:	7f 92       	push	r7
     308:	8f 92       	push	r8
     30a:	9f 92       	push	r9
     30c:	af 92       	push	r10
     30e:	bf 92       	push	r11
     310:	cf 92       	push	r12
     312:	df 92       	push	r13
     314:	ef 92       	push	r14
     316:	ff 92       	push	r15
     318:	0f 93       	push	r16
     31a:	1f 93       	push	r17
     31c:	2f 93       	push	r18
     31e:	3f 93       	push	r19
     320:	4f 93       	push	r20
     322:	5f 93       	push	r21
     324:	6f 93       	push	r22
     326:	7f 93       	push	r23
     328:	8f 93       	push	r24
     32a:	9f 93       	push	r25
     32c:	af 93       	push	r26
     32e:	bf 93       	push	r27
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ef 93       	push	r30
     336:	ff 93       	push	r31
     338:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     33c:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     340:	0d b6       	in	r0, 0x3d	; 61
     342:	0d 92       	st	X+, r0
     344:	0e b6       	in	r0, 0x3e	; 62
     346:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     348:	0e 94 aa 09 	call	0x1354	; 0x1354 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     34c:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     350:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     354:	cd 91       	ld	r28, X+
     356:	cd bf       	out	0x3d, r28	; 61
     358:	dd 91       	ld	r29, X+
     35a:	de bf       	out	0x3e, r29	; 62
     35c:	ff 91       	pop	r31
     35e:	ef 91       	pop	r30
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	bf 91       	pop	r27
     366:	af 91       	pop	r26
     368:	9f 91       	pop	r25
     36a:	8f 91       	pop	r24
     36c:	7f 91       	pop	r23
     36e:	6f 91       	pop	r22
     370:	5f 91       	pop	r21
     372:	4f 91       	pop	r20
     374:	3f 91       	pop	r19
     376:	2f 91       	pop	r18
     378:	1f 91       	pop	r17
     37a:	0f 91       	pop	r16
     37c:	ff 90       	pop	r15
     37e:	ef 90       	pop	r14
     380:	df 90       	pop	r13
     382:	cf 90       	pop	r12
     384:	bf 90       	pop	r11
     386:	af 90       	pop	r10
     388:	9f 90       	pop	r9
     38a:	8f 90       	pop	r8
     38c:	7f 90       	pop	r7
     38e:	6f 90       	pop	r6
     390:	5f 90       	pop	r5
     392:	4f 90       	pop	r4
     394:	3f 90       	pop	r3
     396:	2f 90       	pop	r2
     398:	1f 90       	pop	r1
     39a:	0f 90       	pop	r0
     39c:	0f be       	out	0x3f, r0	; 63
     39e:	0f 90       	pop	r0

	asm volatile ( "ret" );
     3a0:	08 95       	ret

000003a2 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     3a2:	0f 92       	push	r0
     3a4:	0f b6       	in	r0, 0x3f	; 63
     3a6:	f8 94       	cli
     3a8:	0f 92       	push	r0
     3aa:	1f 92       	push	r1
     3ac:	11 24       	eor	r1, r1
     3ae:	2f 92       	push	r2
     3b0:	3f 92       	push	r3
     3b2:	4f 92       	push	r4
     3b4:	5f 92       	push	r5
     3b6:	6f 92       	push	r6
     3b8:	7f 92       	push	r7
     3ba:	8f 92       	push	r8
     3bc:	9f 92       	push	r9
     3be:	af 92       	push	r10
     3c0:	bf 92       	push	r11
     3c2:	cf 92       	push	r12
     3c4:	df 92       	push	r13
     3c6:	ef 92       	push	r14
     3c8:	ff 92       	push	r15
     3ca:	0f 93       	push	r16
     3cc:	1f 93       	push	r17
     3ce:	2f 93       	push	r18
     3d0:	3f 93       	push	r19
     3d2:	4f 93       	push	r20
     3d4:	5f 93       	push	r21
     3d6:	6f 93       	push	r22
     3d8:	7f 93       	push	r23
     3da:	8f 93       	push	r24
     3dc:	9f 93       	push	r25
     3de:	af 93       	push	r26
     3e0:	bf 93       	push	r27
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	ef 93       	push	r30
     3e8:	ff 93       	push	r31
     3ea:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     3ee:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     3f2:	0d b6       	in	r0, 0x3d	; 61
     3f4:	0d 92       	st	X+, r0
     3f6:	0e b6       	in	r0, 0x3e	; 62
     3f8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     3fa:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xTaskIncrementTick>
     3fe:	81 11       	cpse	r24, r1
	{
		vTaskSwitchContext();
     400:	0e 94 aa 09 	call	0x1354	; 0x1354 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     404:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     408:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     40c:	cd 91       	ld	r28, X+
     40e:	cd bf       	out	0x3d, r28	; 61
     410:	dd 91       	ld	r29, X+
     412:	de bf       	out	0x3e, r29	; 62
     414:	ff 91       	pop	r31
     416:	ef 91       	pop	r30
     418:	df 91       	pop	r29
     41a:	cf 91       	pop	r28
     41c:	bf 91       	pop	r27
     41e:	af 91       	pop	r26
     420:	9f 91       	pop	r25
     422:	8f 91       	pop	r24
     424:	7f 91       	pop	r23
     426:	6f 91       	pop	r22
     428:	5f 91       	pop	r21
     42a:	4f 91       	pop	r20
     42c:	3f 91       	pop	r19
     42e:	2f 91       	pop	r18
     430:	1f 91       	pop	r17
     432:	0f 91       	pop	r16
     434:	ff 90       	pop	r15
     436:	ef 90       	pop	r14
     438:	df 90       	pop	r13
     43a:	cf 90       	pop	r12
     43c:	bf 90       	pop	r11
     43e:	af 90       	pop	r10
     440:	9f 90       	pop	r9
     442:	8f 90       	pop	r8
     444:	7f 90       	pop	r7
     446:	6f 90       	pop	r6
     448:	5f 90       	pop	r5
     44a:	4f 90       	pop	r4
     44c:	3f 90       	pop	r3
     44e:	2f 90       	pop	r2
     450:	1f 90       	pop	r1
     452:	0f 90       	pop	r0
     454:	0f be       	out	0x3f, r0	; 63
     456:	0f 90       	pop	r0

	asm volatile ( "ret" );
     458:	08 95       	ret

0000045a <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void TIMER1_COMPA_vect( void ) __attribute__ ( ( signal, naked ) );
	void TIMER1_COMPA_vect( void )
	{
		vPortYieldFromTick();
     45a:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <vPortYieldFromTick>
		asm volatile ( "reti" );
     45e:	18 95       	reti

00000460 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	ec 01       	movw	r28, r24
            }
        }
    }
    #endif /* if ( portBYTE_ALIGNMENT != 1 ) */

    vTaskSuspendAll();
     466:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vTaskSuspendAll>
    {
        if( pucAlignedHeap == NULL )
     46a:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__data_end>
     46e:	90 91 ef 00 	lds	r25, 0x00EF	; 0x8000ef <__data_end+0x1>
     472:	89 2b       	or	r24, r25
     474:	31 f4       	brne	.+12     	; 0x482 <pvPortMalloc+0x22>
        {
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
     476:	82 ef       	ldi	r24, 0xF2	; 242
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <__data_end+0x1>
     47e:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__data_end>
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     482:	20 97       	sbiw	r28, 0x00	; 0
     484:	c9 f0       	breq	.+50     	; 0x4b8 <pvPortMalloc+0x58>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     486:	80 91 f0 00 	lds	r24, 0x00F0	; 0x8000f0 <xNextFreeByte>
     48a:	90 91 f1 00 	lds	r25, 0x00F1	; 0x8000f1 <xNextFreeByte+0x1>
     48e:	9e 01       	movw	r18, r28
     490:	28 0f       	add	r18, r24
     492:	39 1f       	adc	r19, r25
            /* Ensure the heap starts on a correctly aligned boundary. */
            pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) & ucHeap[ portBYTE_ALIGNMENT - 1 ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
        }

        /* Check there is enough room left for the allocation and. */
        if( ( xWantedSize > 0 ) &&                                /* valid size */
     494:	2b 3d       	cpi	r18, 0xDB	; 219
     496:	45 e0       	ldi	r20, 0x05	; 5
     498:	34 07       	cpc	r19, r20
     49a:	88 f4       	brcc	.+34     	; 0x4be <pvPortMalloc+0x5e>
            ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
     49c:	82 17       	cp	r24, r18
     49e:	93 07       	cpc	r25, r19
     4a0:	88 f4       	brcc	.+34     	; 0x4c4 <pvPortMalloc+0x64>
            ( ( xNextFreeByte + xWantedSize ) > xNextFreeByte ) ) /* Check for overflow. */
        {
            /* Return the next free byte then increment the index past this
             * block. */
            pvReturn = pucAlignedHeap + xNextFreeByte;
     4a2:	c0 91 ee 00 	lds	r28, 0x00EE	; 0x8000ee <__data_end>
     4a6:	d0 91 ef 00 	lds	r29, 0x00EF	; 0x8000ef <__data_end+0x1>
     4aa:	c8 0f       	add	r28, r24
     4ac:	d9 1f       	adc	r29, r25
            xNextFreeByte += xWantedSize;
     4ae:	30 93 f1 00 	sts	0x00F1, r19	; 0x8000f1 <xNextFreeByte+0x1>
     4b2:	20 93 f0 00 	sts	0x00F0, r18	; 0x8000f0 <xNextFreeByte>
     4b6:	08 c0       	rjmp	.+16     	; 0x4c8 <pvPortMalloc+0x68>

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
    void * pvReturn = NULL;
     4b8:	c0 e0       	ldi	r28, 0x00	; 0
     4ba:	d0 e0       	ldi	r29, 0x00	; 0
     4bc:	05 c0       	rjmp	.+10     	; 0x4c8 <pvPortMalloc+0x68>
     4be:	c0 e0       	ldi	r28, 0x00	; 0
     4c0:	d0 e0       	ldi	r29, 0x00	; 0
     4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <pvPortMalloc+0x68>
     4c4:	c0 e0       	ldi	r28, 0x00	; 0
     4c6:	d0 e0       	ldi	r29, 0x00	; 0
            xNextFreeByte += xWantedSize;
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     4c8:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
        }
    }
    #endif

    return pvReturn;
}
     4cc:	ce 01       	movw	r24, r28
     4ce:	df 91       	pop	r29
     4d0:	cf 91       	pop	r28
     4d2:	08 95       	ret

000004d4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     4d4:	08 95       	ret

000004d6 <prvIsQueueEmpty>:
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     4d6:	0f b6       	in	r0, 0x3f	; 63
     4d8:	f8 94       	cli
     4da:	0f 92       	push	r0
     4dc:	fc 01       	movw	r30, r24
     4de:	82 8d       	ldd	r24, Z+26	; 0x1a
     4e0:	81 11       	cpse	r24, r1
     4e2:	02 c0       	rjmp	.+4      	; 0x4e8 <prvIsQueueEmpty+0x12>
     4e4:	81 e0       	ldi	r24, 0x01	; 1
     4e6:	01 c0       	rjmp	.+2      	; 0x4ea <prvIsQueueEmpty+0x14>
     4e8:	80 e0       	ldi	r24, 0x00	; 0
     4ea:	0f 90       	pop	r0
     4ec:	0f be       	out	0x3f, r0	; 63
     4ee:	08 95       	ret

000004f0 <prvIsQueueFull>:
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	f8 94       	cli
     4f4:	0f 92       	push	r0
     4f6:	fc 01       	movw	r30, r24
     4f8:	22 8d       	ldd	r18, Z+26	; 0x1a
     4fa:	83 8d       	ldd	r24, Z+27	; 0x1b
     4fc:	28 13       	cpse	r18, r24
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <prvIsQueueFull+0x14>
     500:	81 e0       	ldi	r24, 0x01	; 1
     502:	01 c0       	rjmp	.+2      	; 0x506 <prvIsQueueFull+0x16>
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	08 95       	ret

0000050c <prvCopyDataToQueue>:
     50c:	0f 93       	push	r16
     50e:	1f 93       	push	r17
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	ec 01       	movw	r28, r24
     516:	04 2f       	mov	r16, r20
     518:	1a 8d       	ldd	r17, Y+26	; 0x1a
     51a:	4c 8d       	ldd	r20, Y+28	; 0x1c
     51c:	44 23       	and	r20, r20
     51e:	b9 f1       	breq	.+110    	; 0x58e <prvCopyDataToQueue+0x82>
     520:	01 11       	cpse	r16, r1
     522:	16 c0       	rjmp	.+44     	; 0x550 <prvCopyDataToQueue+0x44>
     524:	50 e0       	ldi	r21, 0x00	; 0
     526:	8a 81       	ldd	r24, Y+2	; 0x02
     528:	9b 81       	ldd	r25, Y+3	; 0x03
     52a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <memcpy>
     52e:	2c 8d       	ldd	r18, Y+28	; 0x1c
     530:	8a 81       	ldd	r24, Y+2	; 0x02
     532:	9b 81       	ldd	r25, Y+3	; 0x03
     534:	82 0f       	add	r24, r18
     536:	91 1d       	adc	r25, r1
     538:	9b 83       	std	Y+3, r25	; 0x03
     53a:	8a 83       	std	Y+2, r24	; 0x02
     53c:	2c 81       	ldd	r18, Y+4	; 0x04
     53e:	3d 81       	ldd	r19, Y+5	; 0x05
     540:	82 17       	cp	r24, r18
     542:	93 07       	cpc	r25, r19
     544:	20 f1       	brcs	.+72     	; 0x58e <prvCopyDataToQueue+0x82>
     546:	88 81       	ld	r24, Y
     548:	99 81       	ldd	r25, Y+1	; 0x01
     54a:	9b 83       	std	Y+3, r25	; 0x03
     54c:	8a 83       	std	Y+2, r24	; 0x02
     54e:	1f c0       	rjmp	.+62     	; 0x58e <prvCopyDataToQueue+0x82>
     550:	50 e0       	ldi	r21, 0x00	; 0
     552:	8e 81       	ldd	r24, Y+6	; 0x06
     554:	9f 81       	ldd	r25, Y+7	; 0x07
     556:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <memcpy>
     55a:	8c 8d       	ldd	r24, Y+28	; 0x1c
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	91 95       	neg	r25
     560:	81 95       	neg	r24
     562:	91 09       	sbc	r25, r1
     564:	2e 81       	ldd	r18, Y+6	; 0x06
     566:	3f 81       	ldd	r19, Y+7	; 0x07
     568:	28 0f       	add	r18, r24
     56a:	39 1f       	adc	r19, r25
     56c:	3f 83       	std	Y+7, r19	; 0x07
     56e:	2e 83       	std	Y+6, r18	; 0x06
     570:	48 81       	ld	r20, Y
     572:	59 81       	ldd	r21, Y+1	; 0x01
     574:	24 17       	cp	r18, r20
     576:	35 07       	cpc	r19, r21
     578:	30 f4       	brcc	.+12     	; 0x586 <prvCopyDataToQueue+0x7a>
     57a:	2c 81       	ldd	r18, Y+4	; 0x04
     57c:	3d 81       	ldd	r19, Y+5	; 0x05
     57e:	82 0f       	add	r24, r18
     580:	93 1f       	adc	r25, r19
     582:	9f 83       	std	Y+7, r25	; 0x07
     584:	8e 83       	std	Y+6, r24	; 0x06
     586:	02 30       	cpi	r16, 0x02	; 2
     588:	11 f4       	brne	.+4      	; 0x58e <prvCopyDataToQueue+0x82>
     58a:	11 11       	cpse	r17, r1
     58c:	11 50       	subi	r17, 0x01	; 1
     58e:	1f 5f       	subi	r17, 0xFF	; 255
     590:	1a 8f       	std	Y+26, r17	; 0x1a
     592:	80 e0       	ldi	r24, 0x00	; 0
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	08 95       	ret

0000059e <prvUnlockQueue>:
     59e:	1f 93       	push	r17
     5a0:	cf 93       	push	r28
     5a2:	df 93       	push	r29
     5a4:	ec 01       	movw	r28, r24
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	0f 92       	push	r0
     5ac:	1e 8d       	ldd	r17, Y+30	; 0x1e
     5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <prvUnlockQueue+0x28>
     5b0:	89 89       	ldd	r24, Y+17	; 0x11
     5b2:	88 23       	and	r24, r24
     5b4:	51 f0       	breq	.+20     	; 0x5ca <prvUnlockQueue+0x2c>
     5b6:	ce 01       	movw	r24, r28
     5b8:	41 96       	adiw	r24, 0x11	; 17
     5ba:	0e 94 10 0a 	call	0x1420	; 0x1420 <xTaskRemoveFromEventList>
     5be:	81 11       	cpse	r24, r1
     5c0:	0e 94 17 0b 	call	0x162e	; 0x162e <vTaskMissedYield>
     5c4:	11 50       	subi	r17, 0x01	; 1
     5c6:	11 16       	cp	r1, r17
     5c8:	9c f3       	brlt	.-26     	; 0x5b0 <prvUnlockQueue+0x12>
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	8e 8f       	std	Y+30, r24	; 0x1e
     5ce:	0f 90       	pop	r0
     5d0:	0f be       	out	0x3f, r0	; 63
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	0f 92       	push	r0
     5d8:	1d 8d       	ldd	r17, Y+29	; 0x1d
     5da:	0b c0       	rjmp	.+22     	; 0x5f2 <prvUnlockQueue+0x54>
     5dc:	88 85       	ldd	r24, Y+8	; 0x08
     5de:	88 23       	and	r24, r24
     5e0:	51 f0       	breq	.+20     	; 0x5f6 <prvUnlockQueue+0x58>
     5e2:	ce 01       	movw	r24, r28
     5e4:	08 96       	adiw	r24, 0x08	; 8
     5e6:	0e 94 10 0a 	call	0x1420	; 0x1420 <xTaskRemoveFromEventList>
     5ea:	81 11       	cpse	r24, r1
     5ec:	0e 94 17 0b 	call	0x162e	; 0x162e <vTaskMissedYield>
     5f0:	11 50       	subi	r17, 0x01	; 1
     5f2:	11 16       	cp	r1, r17
     5f4:	9c f3       	brlt	.-26     	; 0x5dc <prvUnlockQueue+0x3e>
     5f6:	8f ef       	ldi	r24, 0xFF	; 255
     5f8:	8d 8f       	std	Y+29, r24	; 0x1d
     5fa:	0f 90       	pop	r0
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	df 91       	pop	r29
     600:	cf 91       	pop	r28
     602:	1f 91       	pop	r17
     604:	08 95       	ret

00000606 <xQueueGenericReset>:
     606:	0f 93       	push	r16
     608:	1f 93       	push	r17
     60a:	cf 93       	push	r28
     60c:	df 93       	push	r29
     60e:	fc 01       	movw	r30, r24
     610:	36 2f       	mov	r19, r22
     612:	89 2b       	or	r24, r25
     614:	09 f4       	brne	.+2      	; 0x618 <xQueueGenericReset+0x12>
     616:	4d c0       	rjmp	.+154    	; 0x6b2 <xQueueGenericReset+0xac>
     618:	23 8d       	ldd	r18, Z+27	; 0x1b
     61a:	22 23       	and	r18, r18
     61c:	09 f4       	brne	.+2      	; 0x620 <xQueueGenericReset+0x1a>
     61e:	4b c0       	rjmp	.+150    	; 0x6b6 <xQueueGenericReset+0xb0>
     620:	02 2f       	mov	r16, r18
     622:	10 e0       	ldi	r17, 0x00	; 0
     624:	8f ef       	ldi	r24, 0xFF	; 255
     626:	9f ef       	ldi	r25, 0xFF	; 255
     628:	b8 01       	movw	r22, r16
     62a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__udivmodhi4>
     62e:	44 8d       	ldd	r20, Z+28	; 0x1c
     630:	84 2f       	mov	r24, r20
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	68 17       	cp	r22, r24
     636:	79 07       	cpc	r23, r25
     638:	08 f4       	brcc	.+2      	; 0x63c <xQueueGenericReset+0x36>
     63a:	3f c0       	rjmp	.+126    	; 0x6ba <xQueueGenericReset+0xb4>
     63c:	ef 01       	movw	r28, r30
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	0f 92       	push	r0
     644:	60 81       	ld	r22, Z
     646:	71 81       	ldd	r23, Z+1	; 0x01
     648:	fb 01       	movw	r30, r22
     64a:	24 9f       	mul	r18, r20
     64c:	e0 0d       	add	r30, r0
     64e:	f1 1d       	adc	r31, r1
     650:	11 24       	eor	r1, r1
     652:	fd 83       	std	Y+5, r31	; 0x05
     654:	ec 83       	std	Y+4, r30	; 0x04
     656:	1a 8e       	std	Y+26, r1	; 0x1a
     658:	7b 83       	std	Y+3, r23	; 0x03
     65a:	6a 83       	std	Y+2, r22	; 0x02
     65c:	01 50       	subi	r16, 0x01	; 1
     65e:	11 09       	sbc	r17, r1
     660:	80 9f       	mul	r24, r16
     662:	a0 01       	movw	r20, r0
     664:	81 9f       	mul	r24, r17
     666:	50 0d       	add	r21, r0
     668:	90 9f       	mul	r25, r16
     66a:	50 0d       	add	r21, r0
     66c:	11 24       	eor	r1, r1
     66e:	cb 01       	movw	r24, r22
     670:	84 0f       	add	r24, r20
     672:	95 1f       	adc	r25, r21
     674:	9f 83       	std	Y+7, r25	; 0x07
     676:	8e 83       	std	Y+6, r24	; 0x06
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	8d 8f       	std	Y+29, r24	; 0x1d
     67c:	8e 8f       	std	Y+30, r24	; 0x1e
     67e:	31 11       	cpse	r19, r1
     680:	0c c0       	rjmp	.+24     	; 0x69a <xQueueGenericReset+0x94>
     682:	88 85       	ldd	r24, Y+8	; 0x08
     684:	88 23       	and	r24, r24
     686:	89 f0       	breq	.+34     	; 0x6aa <xQueueGenericReset+0xa4>
     688:	ce 01       	movw	r24, r28
     68a:	08 96       	adiw	r24, 0x08	; 8
     68c:	0e 94 10 0a 	call	0x1420	; 0x1420 <xTaskRemoveFromEventList>
     690:	88 23       	and	r24, r24
     692:	59 f0       	breq	.+22     	; 0x6aa <xQueueGenericReset+0xa4>
     694:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     698:	08 c0       	rjmp	.+16     	; 0x6aa <xQueueGenericReset+0xa4>
     69a:	ce 01       	movw	r24, r28
     69c:	08 96       	adiw	r24, 0x08	; 8
     69e:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     6a2:	ce 01       	movw	r24, r28
     6a4:	41 96       	adiw	r24, 0x11	; 17
     6a6:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	81 e0       	ldi	r24, 0x01	; 1
     6b0:	05 c0       	rjmp	.+10     	; 0x6bc <xQueueGenericReset+0xb6>
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	03 c0       	rjmp	.+6      	; 0x6bc <xQueueGenericReset+0xb6>
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	01 c0       	rjmp	.+2      	; 0x6bc <xQueueGenericReset+0xb6>
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	df 91       	pop	r29
     6be:	cf 91       	pop	r28
     6c0:	1f 91       	pop	r17
     6c2:	0f 91       	pop	r16
     6c4:	08 95       	ret

000006c6 <prvInitialiseNewQueue>:
     6c6:	0f 93       	push	r16
     6c8:	1f 93       	push	r17
     6ca:	f8 01       	movw	r30, r16
     6cc:	61 11       	cpse	r22, r1
     6ce:	03 c0       	rjmp	.+6      	; 0x6d6 <prvInitialiseNewQueue+0x10>
     6d0:	11 83       	std	Z+1, r17	; 0x01
     6d2:	00 83       	st	Z, r16
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <prvInitialiseNewQueue+0x14>
     6d6:	51 83       	std	Z+1, r21	; 0x01
     6d8:	40 83       	st	Z, r20
     6da:	83 8f       	std	Z+27, r24	; 0x1b
     6dc:	64 8f       	std	Z+28, r22	; 0x1c
     6de:	61 e0       	ldi	r22, 0x01	; 1
     6e0:	cf 01       	movw	r24, r30
     6e2:	0e 94 03 03 	call	0x606	; 0x606 <xQueueGenericReset>
     6e6:	1f 91       	pop	r17
     6e8:	0f 91       	pop	r16
     6ea:	08 95       	ret

000006ec <xQueueGenericCreate>:
     6ec:	df 92       	push	r13
     6ee:	ef 92       	push	r14
     6f0:	ff 92       	push	r15
     6f2:	0f 93       	push	r16
     6f4:	1f 93       	push	r17
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	38 2f       	mov	r19, r24
     6fc:	e6 2f       	mov	r30, r22
     6fe:	88 23       	and	r24, r24
     700:	29 f1       	breq	.+74     	; 0x74c <xQueueGenericCreate+0x60>
     702:	68 2f       	mov	r22, r24
     704:	70 e0       	ldi	r23, 0x00	; 0
     706:	8f ef       	ldi	r24, 0xFF	; 255
     708:	9f ef       	ldi	r25, 0xFF	; 255
     70a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__udivmodhi4>
     70e:	8e 2f       	mov	r24, r30
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	68 17       	cp	r22, r24
     714:	79 07       	cpc	r23, r25
     716:	e8 f0       	brcs	.+58     	; 0x752 <xQueueGenericCreate+0x66>
     718:	3e 9f       	mul	r19, r30
     71a:	c0 01       	movw	r24, r0
     71c:	11 24       	eor	r1, r1
     71e:	81 3e       	cpi	r24, 0xE1	; 225
     720:	2f ef       	ldi	r18, 0xFF	; 255
     722:	92 07       	cpc	r25, r18
     724:	c8 f4       	brcc	.+50     	; 0x758 <xQueueGenericCreate+0x6c>
     726:	d4 2e       	mov	r13, r20
     728:	de 2f       	mov	r29, r30
     72a:	c3 2f       	mov	r28, r19
     72c:	4f 96       	adiw	r24, 0x1f	; 31
     72e:	0e 94 30 02 	call	0x460	; 0x460 <pvPortMalloc>
     732:	7c 01       	movw	r14, r24
     734:	00 97       	sbiw	r24, 0x00	; 0
     736:	91 f0       	breq	.+36     	; 0x75c <xQueueGenericCreate+0x70>
     738:	8c 01       	movw	r16, r24
     73a:	2d 2d       	mov	r18, r13
     73c:	ac 01       	movw	r20, r24
     73e:	41 5e       	subi	r20, 0xE1	; 225
     740:	5f 4f       	sbci	r21, 0xFF	; 255
     742:	6d 2f       	mov	r22, r29
     744:	8c 2f       	mov	r24, r28
     746:	0e 94 63 03 	call	0x6c6	; 0x6c6 <prvInitialiseNewQueue>
     74a:	08 c0       	rjmp	.+16     	; 0x75c <xQueueGenericCreate+0x70>
     74c:	e1 2c       	mov	r14, r1
     74e:	f1 2c       	mov	r15, r1
     750:	05 c0       	rjmp	.+10     	; 0x75c <xQueueGenericCreate+0x70>
     752:	e1 2c       	mov	r14, r1
     754:	f1 2c       	mov	r15, r1
     756:	02 c0       	rjmp	.+4      	; 0x75c <xQueueGenericCreate+0x70>
     758:	e1 2c       	mov	r14, r1
     75a:	f1 2c       	mov	r15, r1
     75c:	c7 01       	movw	r24, r14
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	08 95       	ret

0000076e <xQueueGenericSend>:
     76e:	cf 92       	push	r12
     770:	df 92       	push	r13
     772:	ef 92       	push	r14
     774:	ff 92       	push	r15
     776:	0f 93       	push	r16
     778:	1f 93       	push	r17
     77a:	cf 93       	push	r28
     77c:	df 93       	push	r29
     77e:	00 d0       	rcall	.+0      	; 0x780 <xQueueGenericSend+0x12>
     780:	00 d0       	rcall	.+0      	; 0x782 <xQueueGenericSend+0x14>
     782:	1f 92       	push	r1
     784:	cd b7       	in	r28, 0x3d	; 61
     786:	de b7       	in	r29, 0x3e	; 62
     788:	8c 01       	movw	r16, r24
     78a:	7b 01       	movw	r14, r22
     78c:	5d 83       	std	Y+5, r21	; 0x05
     78e:	4c 83       	std	Y+4, r20	; 0x04
     790:	c2 2e       	mov	r12, r18
     792:	d1 2c       	mov	r13, r1
     794:	0f b6       	in	r0, 0x3f	; 63
     796:	f8 94       	cli
     798:	0f 92       	push	r0
     79a:	f8 01       	movw	r30, r16
     79c:	92 8d       	ldd	r25, Z+26	; 0x1a
     79e:	83 8d       	ldd	r24, Z+27	; 0x1b
     7a0:	98 17       	cp	r25, r24
     7a2:	18 f0       	brcs	.+6      	; 0x7aa <xQueueGenericSend+0x3c>
     7a4:	f2 e0       	ldi	r31, 0x02	; 2
     7a6:	cf 12       	cpse	r12, r31
     7a8:	19 c0       	rjmp	.+50     	; 0x7dc <xQueueGenericSend+0x6e>
     7aa:	4c 2d       	mov	r20, r12
     7ac:	b7 01       	movw	r22, r14
     7ae:	c8 01       	movw	r24, r16
     7b0:	0e 94 86 02 	call	0x50c	; 0x50c <prvCopyDataToQueue>
     7b4:	f8 01       	movw	r30, r16
     7b6:	91 89       	ldd	r25, Z+17	; 0x11
     7b8:	99 23       	and	r25, r25
     7ba:	49 f0       	breq	.+18     	; 0x7ce <xQueueGenericSend+0x60>
     7bc:	c8 01       	movw	r24, r16
     7be:	41 96       	adiw	r24, 0x11	; 17
     7c0:	0e 94 10 0a 	call	0x1420	; 0x1420 <xTaskRemoveFromEventList>
     7c4:	88 23       	and	r24, r24
     7c6:	31 f0       	breq	.+12     	; 0x7d4 <xQueueGenericSend+0x66>
     7c8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     7cc:	03 c0       	rjmp	.+6      	; 0x7d4 <xQueueGenericSend+0x66>
     7ce:	81 11       	cpse	r24, r1
     7d0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     7d4:	0f 90       	pop	r0
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	4d c0       	rjmp	.+154    	; 0x876 <__stack+0x17>
     7dc:	8c 81       	ldd	r24, Y+4	; 0x04
     7de:	9d 81       	ldd	r25, Y+5	; 0x05
     7e0:	89 2b       	or	r24, r25
     7e2:	21 f4       	brne	.+8      	; 0x7ec <xQueueGenericSend+0x7e>
     7e4:	0f 90       	pop	r0
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	45 c0       	rjmp	.+138    	; 0x876 <__stack+0x17>
     7ec:	d1 10       	cpse	r13, r1
     7ee:	06 c0       	rjmp	.+12     	; 0x7fc <xQueueGenericSend+0x8e>
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 cd 0a 	call	0x159a	; 0x159a <vTaskInternalSetTimeOutState>
     7f8:	dd 24       	eor	r13, r13
     7fa:	d3 94       	inc	r13
     7fc:	0f 90       	pop	r0
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vTaskSuspendAll>
     804:	0f b6       	in	r0, 0x3f	; 63
     806:	f8 94       	cli
     808:	0f 92       	push	r0
     80a:	f8 01       	movw	r30, r16
     80c:	85 8d       	ldd	r24, Z+29	; 0x1d
     80e:	8f 3f       	cpi	r24, 0xFF	; 255
     810:	09 f4       	brne	.+2      	; 0x814 <__DATA_REGION_LENGTH__+0x14>
     812:	15 8e       	std	Z+29, r1	; 0x1d
     814:	f8 01       	movw	r30, r16
     816:	86 8d       	ldd	r24, Z+30	; 0x1e
     818:	8f 3f       	cpi	r24, 0xFF	; 255
     81a:	09 f4       	brne	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
     81c:	16 8e       	std	Z+30, r1	; 0x1e
     81e:	0f 90       	pop	r0
     820:	0f be       	out	0x3f, r0	; 63
     822:	be 01       	movw	r22, r28
     824:	6c 5f       	subi	r22, 0xFC	; 252
     826:	7f 4f       	sbci	r23, 0xFF	; 255
     828:	ce 01       	movw	r24, r28
     82a:	01 96       	adiw	r24, 0x01	; 1
     82c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskCheckForTimeOut>
     830:	81 11       	cpse	r24, r1
     832:	1b c0       	rjmp	.+54     	; 0x86a <__stack+0xb>
     834:	c8 01       	movw	r24, r16
     836:	0e 94 78 02 	call	0x4f0	; 0x4f0 <prvIsQueueFull>
     83a:	88 23       	and	r24, r24
     83c:	81 f0       	breq	.+32     	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     83e:	6c 81       	ldd	r22, Y+4	; 0x04
     840:	7d 81       	ldd	r23, Y+5	; 0x05
     842:	c8 01       	movw	r24, r16
     844:	08 96       	adiw	r24, 0x08	; 8
     846:	0e 94 fe 09 	call	0x13fc	; 0x13fc <vTaskPlaceOnEventList>
     84a:	c8 01       	movw	r24, r16
     84c:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>
     850:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
     854:	81 11       	cpse	r24, r1
     856:	9e cf       	rjmp	.-196    	; 0x794 <xQueueGenericSend+0x26>
     858:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     85c:	9b cf       	rjmp	.-202    	; 0x794 <xQueueGenericSend+0x26>
     85e:	c8 01       	movw	r24, r16
     860:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>
     864:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
     868:	95 cf       	rjmp	.-214    	; 0x794 <xQueueGenericSend+0x26>
     86a:	c8 01       	movw	r24, r16
     86c:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>
     870:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0f 90       	pop	r0
     878:	0f 90       	pop	r0
     87a:	0f 90       	pop	r0
     87c:	0f 90       	pop	r0
     87e:	0f 90       	pop	r0
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	df 90       	pop	r13
     88e:	cf 90       	pop	r12
     890:	08 95       	ret

00000892 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	00 d0       	rcall	.+0      	; 0x89e <xQueueSemaphoreTake+0xc>
     89e:	00 d0       	rcall	.+0      	; 0x8a0 <xQueueSemaphoreTake+0xe>
     8a0:	1f 92       	push	r1
     8a2:	cd b7       	in	r28, 0x3d	; 61
     8a4:	de b7       	in	r29, 0x3e	; 62
     8a6:	8c 01       	movw	r16, r24
     8a8:	7d 83       	std	Y+5, r23	; 0x05
     8aa:	6c 83       	std	Y+4, r22	; 0x04
    BaseType_t xEntryTimeSet = pdFALSE;
     8ac:	f1 2c       	mov	r15, r1
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	0f 92       	push	r0
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
     8b4:	f8 01       	movw	r30, r16
     8b6:	82 8d       	ldd	r24, Z+26	; 0x1a

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
     8b8:	88 23       	and	r24, r24
     8ba:	81 f0       	breq	.+32     	; 0x8dc <xQueueSemaphoreTake+0x4a>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
     8bc:	81 50       	subi	r24, 0x01	; 1
     8be:	82 8f       	std	Z+26, r24	; 0x1a
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
     8c0:	80 85       	ldd	r24, Z+8	; 0x08
     8c2:	88 23       	and	r24, r24
     8c4:	39 f0       	breq	.+14     	; 0x8d4 <xQueueSemaphoreTake+0x42>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
     8c6:	c8 01       	movw	r24, r16
     8c8:	08 96       	adiw	r24, 0x08	; 8
     8ca:	0e 94 10 0a 	call	0x1420	; 0x1420 <xTaskRemoveFromEventList>
     8ce:	81 11       	cpse	r24, r1
                    {
                        queueYIELD_IF_USING_PREEMPTION();
     8d0:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
                return pdPASS;
     8d8:	81 e0       	ldi	r24, 0x01	; 1
     8da:	53 c0       	rjmp	.+166    	; 0x982 <xQueueSemaphoreTake+0xf0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
     8dc:	8c 81       	ldd	r24, Y+4	; 0x04
     8de:	9d 81       	ldd	r25, Y+5	; 0x05
     8e0:	89 2b       	or	r24, r25
     8e2:	21 f4       	brne	.+8      	; 0x8ec <xQueueSemaphoreTake+0x5a>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
     8e4:	0f 90       	pop	r0
     8e6:	0f be       	out	0x3f, r0	; 63
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
     8e8:	80 e0       	ldi	r24, 0x00	; 0
     8ea:	4b c0       	rjmp	.+150    	; 0x982 <xQueueSemaphoreTake+0xf0>
                }
                else if( xEntryTimeSet == pdFALSE )
     8ec:	f1 10       	cpse	r15, r1
     8ee:	06 c0       	rjmp	.+12     	; 0x8fc <xQueueSemaphoreTake+0x6a>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
     8f0:	ce 01       	movw	r24, r28
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	0e 94 cd 0a 	call	0x159a	; 0x159a <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
     8f8:	ff 24       	eor	r15, r15
     8fa:	f3 94       	inc	r15
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
     8fc:	0f 90       	pop	r0
     8fe:	0f be       	out	0x3f, r0	; 63

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
     900:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vTaskSuspendAll>
        prvLockQueue( pxQueue );
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	f8 94       	cli
     908:	0f 92       	push	r0
     90a:	f8 01       	movw	r30, r16
     90c:	85 8d       	ldd	r24, Z+29	; 0x1d
     90e:	8f 3f       	cpi	r24, 0xFF	; 255
     910:	09 f4       	brne	.+2      	; 0x914 <xQueueSemaphoreTake+0x82>
     912:	15 8e       	std	Z+29, r1	; 0x1d
     914:	f8 01       	movw	r30, r16
     916:	86 8d       	ldd	r24, Z+30	; 0x1e
     918:	8f 3f       	cpi	r24, 0xFF	; 255
     91a:	09 f4       	brne	.+2      	; 0x91e <xQueueSemaphoreTake+0x8c>
     91c:	16 8e       	std	Z+30, r1	; 0x1e
     91e:	0f 90       	pop	r0
     920:	0f be       	out	0x3f, r0	; 63

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
     922:	be 01       	movw	r22, r28
     924:	6c 5f       	subi	r22, 0xFC	; 252
     926:	7f 4f       	sbci	r23, 0xFF	; 255
     928:	ce 01       	movw	r24, r28
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xTaskCheckForTimeOut>
     930:	81 11       	cpse	r24, r1
     932:	1b c0       	rjmp	.+54     	; 0x96a <xQueueSemaphoreTake+0xd8>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     934:	c8 01       	movw	r24, r16
     936:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <prvIsQueueEmpty>
     93a:	88 23       	and	r24, r24
     93c:	81 f0       	breq	.+32     	; 0x95e <xQueueSemaphoreTake+0xcc>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
     93e:	6c 81       	ldd	r22, Y+4	; 0x04
     940:	7d 81       	ldd	r23, Y+5	; 0x05
     942:	c8 01       	movw	r24, r16
     944:	41 96       	adiw	r24, 0x11	; 17
     946:	0e 94 fe 09 	call	0x13fc	; 0x13fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
     94a:	c8 01       	movw	r24, r16
     94c:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
     950:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
     954:	81 11       	cpse	r24, r1
     956:	ab cf       	rjmp	.-170    	; 0x8ae <xQueueSemaphoreTake+0x1c>
                {
                    portYIELD_WITHIN_API();
     958:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     95c:	a8 cf       	rjmp	.-176    	; 0x8ae <xQueueSemaphoreTake+0x1c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
     95e:	c8 01       	movw	r24, r16
     960:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
     964:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
     968:	a2 cf       	rjmp	.-188    	; 0x8ae <xQueueSemaphoreTake+0x1c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
     96a:	c8 01       	movw	r24, r16
     96c:	0e 94 cf 02 	call	0x59e	; 0x59e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
     970:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
     974:	c8 01       	movw	r24, r16
     976:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <prvIsQueueEmpty>
     97a:	88 23       	and	r24, r24
     97c:	09 f4       	brne	.+2      	; 0x980 <xQueueSemaphoreTake+0xee>
     97e:	97 cf       	rjmp	.-210    	; 0x8ae <xQueueSemaphoreTake+0x1c>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
     980:	80 e0       	ldi	r24, 0x00	; 0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
     982:	0f 90       	pop	r0
     984:	0f 90       	pop	r0
     986:	0f 90       	pop	r0
     988:	0f 90       	pop	r0
     98a:	0f 90       	pop	r0
     98c:	df 91       	pop	r29
     98e:	cf 91       	pop	r28
     990:	1f 91       	pop	r17
     992:	0f 91       	pop	r16
     994:	ff 90       	pop	r15
     996:	08 95       	ret

00000998 <prvResetNextTaskUnblockTime>:
    taskENTER_CRITICAL();
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
        pxTimeOut->xTimeOnEntering = xTickCount;
    }
    taskEXIT_CRITICAL();
     998:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     99c:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     9a0:	80 81       	ld	r24, Z
     9a2:	81 11       	cpse	r24, r1
     9a4:	07 c0       	rjmp	.+14     	; 0x9b4 <prvResetNextTaskUnblockTime+0x1c>
     9a6:	8f ef       	ldi	r24, 0xFF	; 255
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     9ae:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <xNextTaskUnblockTime>
     9b2:	08 95       	ret
     9b4:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     9b8:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     9bc:	05 80       	ldd	r0, Z+5	; 0x05
     9be:	f6 81       	ldd	r31, Z+6	; 0x06
     9c0:	e0 2d       	mov	r30, r0
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     9ca:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <xNextTaskUnblockTime>
     9ce:	08 95       	ret

000009d0 <prvDeleteTCB>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	ec 01       	movw	r28, r24
     9d6:	8f 89       	ldd	r24, Y+23	; 0x17
     9d8:	98 8d       	ldd	r25, Y+24	; 0x18
     9da:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <vPortFree>
     9de:	ce 01       	movw	r24, r28
     9e0:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <vPortFree>
     9e4:	df 91       	pop	r29
     9e6:	cf 91       	pop	r28
     9e8:	08 95       	ret

000009ea <prvInitialiseNewTask>:
     9ea:	6f 92       	push	r6
     9ec:	7f 92       	push	r7
     9ee:	8f 92       	push	r8
     9f0:	9f 92       	push	r9
     9f2:	af 92       	push	r10
     9f4:	bf 92       	push	r11
     9f6:	cf 92       	push	r12
     9f8:	df 92       	push	r13
     9fa:	ef 92       	push	r14
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
     a04:	cd b7       	in	r28, 0x3d	; 61
     a06:	de b7       	in	r29, 0x3e	; 62
     a08:	4c 01       	movw	r8, r24
     a0a:	f5 01       	movw	r30, r10
     a0c:	87 89       	ldd	r24, Z+23	; 0x17
     a0e:	90 8d       	ldd	r25, Z+24	; 0x18
     a10:	21 50       	subi	r18, 0x01	; 1
     a12:	31 09       	sbc	r19, r1
     a14:	3c 01       	movw	r6, r24
     a16:	62 0e       	add	r6, r18
     a18:	73 1e       	adc	r7, r19
     a1a:	61 15       	cp	r22, r1
     a1c:	71 05       	cpc	r23, r1
     a1e:	89 f4       	brne	.+34     	; 0xa42 <prvInitialiseNewTask+0x58>
     a20:	15 c0       	rjmp	.+42     	; 0xa4c <prvInitialiseNewTask+0x62>
     a22:	82 2f       	mov	r24, r18
     a24:	90 e0       	ldi	r25, 0x00	; 0
     a26:	fb 01       	movw	r30, r22
     a28:	e8 0f       	add	r30, r24
     a2a:	f9 1f       	adc	r31, r25
     a2c:	30 81       	ld	r19, Z
     a2e:	d5 01       	movw	r26, r10
     a30:	a8 0f       	add	r26, r24
     a32:	b9 1f       	adc	r27, r25
     a34:	59 96       	adiw	r26, 0x19	; 25
     a36:	3c 93       	st	X, r19
     a38:	80 81       	ld	r24, Z
     a3a:	88 23       	and	r24, r24
     a3c:	29 f0       	breq	.+10     	; 0xa48 <prvInitialiseNewTask+0x5e>
     a3e:	2f 5f       	subi	r18, 0xFF	; 255
     a40:	01 c0       	rjmp	.+2      	; 0xa44 <prvInitialiseNewTask+0x5a>
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	28 30       	cpi	r18, 0x08	; 8
     a46:	68 f3       	brcs	.-38     	; 0xa22 <prvInitialiseNewTask+0x38>
     a48:	f5 01       	movw	r30, r10
     a4a:	10 a2       	std	Z+32, r1	; 0x20
     a4c:	f5 e0       	ldi	r31, 0x05	; 5
     a4e:	fe 15       	cp	r31, r14
     a50:	20 f4       	brcc	.+8      	; 0xa5a <prvInitialiseNewTask+0x70>
     a52:	0f 2e       	mov	r0, r31
     a54:	f5 e0       	ldi	r31, 0x05	; 5
     a56:	ef 2e       	mov	r14, r31
     a58:	f0 2d       	mov	r31, r0
     a5a:	f5 01       	movw	r30, r10
     a5c:	e6 8a       	std	Z+22, r14	; 0x16
     a5e:	c5 01       	movw	r24, r10
     a60:	02 96       	adiw	r24, 0x02	; 2
     a62:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     a66:	c5 01       	movw	r24, r10
     a68:	0c 96       	adiw	r24, 0x0c	; 12
     a6a:	0e 94 57 00 	call	0xae	; 0xae <vListInitialiseItem>
     a6e:	f5 01       	movw	r30, r10
     a70:	b1 86       	std	Z+9, r11	; 0x09
     a72:	a0 86       	std	Z+8, r10	; 0x08
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	8e 19       	sub	r24, r14
     a7a:	91 09       	sbc	r25, r1
     a7c:	95 87       	std	Z+13, r25	; 0x0d
     a7e:	84 87       	std	Z+12, r24	; 0x0c
     a80:	b3 8a       	std	Z+19, r11	; 0x13
     a82:	a2 8a       	std	Z+18, r10	; 0x12
     a84:	a8 01       	movw	r20, r16
     a86:	b4 01       	movw	r22, r8
     a88:	c3 01       	movw	r24, r6
     a8a:	0e 94 dd 00 	call	0x1ba	; 0x1ba <pxPortInitialiseStack>
     a8e:	f5 01       	movw	r30, r10
     a90:	91 83       	std	Z+1, r25	; 0x01
     a92:	80 83       	st	Z, r24
     a94:	c1 14       	cp	r12, r1
     a96:	d1 04       	cpc	r13, r1
     a98:	19 f0       	breq	.+6      	; 0xaa0 <prvInitialiseNewTask+0xb6>
     a9a:	f6 01       	movw	r30, r12
     a9c:	b1 82       	std	Z+1, r11	; 0x01
     a9e:	a0 82       	st	Z, r10
     aa0:	df 91       	pop	r29
     aa2:	cf 91       	pop	r28
     aa4:	1f 91       	pop	r17
     aa6:	0f 91       	pop	r16
     aa8:	ef 90       	pop	r14
     aaa:	df 90       	pop	r13
     aac:	cf 90       	pop	r12
     aae:	bf 90       	pop	r11
     ab0:	af 90       	pop	r10
     ab2:	9f 90       	pop	r9
     ab4:	8f 90       	pop	r8
     ab6:	7f 90       	pop	r7
     ab8:	6f 90       	pop	r6
     aba:	08 95       	ret

00000abc <prvInitialiseTaskLists>:
     abc:	cf 93       	push	r28
     abe:	c0 e0       	ldi	r28, 0x00	; 0
     ac0:	10 c0       	rjmp	.+32     	; 0xae2 <prvInitialiseTaskLists+0x26>
     ac2:	8c 2f       	mov	r24, r28
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	9c 01       	movw	r18, r24
     ac8:	22 0f       	add	r18, r18
     aca:	33 1f       	adc	r19, r19
     acc:	22 0f       	add	r18, r18
     ace:	33 1f       	adc	r19, r19
     ad0:	22 0f       	add	r18, r18
     ad2:	33 1f       	adc	r19, r19
     ad4:	82 0f       	add	r24, r18
     ad6:	93 1f       	adc	r25, r19
     ad8:	81 5f       	subi	r24, 0xF1	; 241
     ada:	98 4f       	sbci	r25, 0xF8	; 248
     adc:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     ae0:	cf 5f       	subi	r28, 0xFF	; 255
     ae2:	c6 30       	cpi	r28, 0x06	; 6
     ae4:	70 f3       	brcs	.-36     	; 0xac2 <prvInitialiseTaskLists+0x6>
     ae6:	86 e0       	ldi	r24, 0x06	; 6
     ae8:	97 e0       	ldi	r25, 0x07	; 7
     aea:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     aee:	8d ef       	ldi	r24, 0xFD	; 253
     af0:	96 e0       	ldi	r25, 0x06	; 6
     af2:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     af6:	80 ef       	ldi	r24, 0xF0	; 240
     af8:	96 e0       	ldi	r25, 0x06	; 6
     afa:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     afe:	87 ee       	ldi	r24, 0xE7	; 231
     b00:	96 e0       	ldi	r25, 0x06	; 6
     b02:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     b06:	8d ed       	ldi	r24, 0xDD	; 221
     b08:	96 e0       	ldi	r25, 0x06	; 6
     b0a:	0e 94 49 00 	call	0x92	; 0x92 <vListInitialise>
     b0e:	86 e0       	ldi	r24, 0x06	; 6
     b10:	97 e0       	ldi	r25, 0x07	; 7
     b12:	90 93 fc 06 	sts	0x06FC, r25	; 0x8006fc <pxDelayedTaskList+0x1>
     b16:	80 93 fb 06 	sts	0x06FB, r24	; 0x8006fb <pxDelayedTaskList>
     b1a:	8d ef       	ldi	r24, 0xFD	; 253
     b1c:	96 e0       	ldi	r25, 0x06	; 6
     b1e:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <pxOverflowDelayedTaskList+0x1>
     b22:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <pxOverflowDelayedTaskList>
     b26:	cf 91       	pop	r28
     b28:	08 95       	ret

00000b2a <prvAddNewTaskToReadyList>:
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
     b2e:	ec 01       	movw	r28, r24
     b30:	0f b6       	in	r0, 0x3f	; 63
     b32:	f8 94       	cli
     b34:	0f 92       	push	r0
     b36:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <uxCurrentNumberOfTasks>
     b3a:	8f 5f       	subi	r24, 0xFF	; 255
     b3c:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <uxCurrentNumberOfTasks>
     b40:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     b44:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     b48:	89 2b       	or	r24, r25
     b4a:	59 f4       	brne	.+22     	; 0xb62 <prvAddNewTaskToReadyList+0x38>
     b4c:	d0 93 46 07 	sts	0x0746, r29	; 0x800746 <pxCurrentTCB+0x1>
     b50:	c0 93 45 07 	sts	0x0745, r28	; 0x800745 <pxCurrentTCB>
     b54:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <uxCurrentNumberOfTasks>
     b58:	81 30       	cpi	r24, 0x01	; 1
     b5a:	99 f4       	brne	.+38     	; 0xb82 <prvAddNewTaskToReadyList+0x58>
     b5c:	0e 94 5e 05 	call	0xabc	; 0xabc <prvInitialiseTaskLists>
     b60:	10 c0       	rjmp	.+32     	; 0xb82 <prvAddNewTaskToReadyList+0x58>
     b62:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <xSchedulerRunning>
     b66:	81 11       	cpse	r24, r1
     b68:	0c c0       	rjmp	.+24     	; 0xb82 <prvAddNewTaskToReadyList+0x58>
     b6a:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
     b6e:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     b72:	96 89       	ldd	r25, Z+22	; 0x16
     b74:	8e 89       	ldd	r24, Y+22	; 0x16
     b76:	89 17       	cp	r24, r25
     b78:	20 f0       	brcs	.+8      	; 0xb82 <prvAddNewTaskToReadyList+0x58>
     b7a:	d0 93 46 07 	sts	0x0746, r29	; 0x800746 <pxCurrentTCB+0x1>
     b7e:	c0 93 45 07 	sts	0x0745, r28	; 0x800745 <pxCurrentTCB>
     b82:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <uxTaskNumber>
     b86:	8f 5f       	subi	r24, 0xFF	; 255
     b88:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <uxTaskNumber>
     b8c:	8e 89       	ldd	r24, Y+22	; 0x16
     b8e:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <uxTopReadyPriority>
     b92:	98 17       	cp	r25, r24
     b94:	10 f4       	brcc	.+4      	; 0xb9a <prvAddNewTaskToReadyList+0x70>
     b96:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <uxTopReadyPriority>
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	fc 01       	movw	r30, r24
     b9e:	ee 0f       	add	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	ee 0f       	add	r30, r30
     ba4:	ff 1f       	adc	r31, r31
     ba6:	ee 0f       	add	r30, r30
     ba8:	ff 1f       	adc	r31, r31
     baa:	8e 0f       	add	r24, r30
     bac:	9f 1f       	adc	r25, r31
     bae:	fc 01       	movw	r30, r24
     bb0:	e1 5f       	subi	r30, 0xF1	; 241
     bb2:	f8 4f       	sbci	r31, 0xF8	; 248
     bb4:	01 80       	ldd	r0, Z+1	; 0x01
     bb6:	f2 81       	ldd	r31, Z+2	; 0x02
     bb8:	e0 2d       	mov	r30, r0
     bba:	fd 83       	std	Y+5, r31	; 0x05
     bbc:	ec 83       	std	Y+4, r30	; 0x04
     bbe:	84 81       	ldd	r24, Z+4	; 0x04
     bc0:	95 81       	ldd	r25, Z+5	; 0x05
     bc2:	9f 83       	std	Y+7, r25	; 0x07
     bc4:	8e 83       	std	Y+6, r24	; 0x06
     bc6:	a4 81       	ldd	r26, Z+4	; 0x04
     bc8:	b5 81       	ldd	r27, Z+5	; 0x05
     bca:	ce 01       	movw	r24, r28
     bcc:	02 96       	adiw	r24, 0x02	; 2
     bce:	13 96       	adiw	r26, 0x03	; 3
     bd0:	9c 93       	st	X, r25
     bd2:	8e 93       	st	-X, r24
     bd4:	12 97       	sbiw	r26, 0x02	; 2
     bd6:	95 83       	std	Z+5, r25	; 0x05
     bd8:	84 83       	std	Z+4, r24	; 0x04
     bda:	ee 89       	ldd	r30, Y+22	; 0x16
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	cf 01       	movw	r24, r30
     be0:	88 0f       	add	r24, r24
     be2:	99 1f       	adc	r25, r25
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	e8 0f       	add	r30, r24
     bee:	f9 1f       	adc	r31, r25
     bf0:	e1 5f       	subi	r30, 0xF1	; 241
     bf2:	f8 4f       	sbci	r31, 0xF8	; 248
     bf4:	fb 87       	std	Y+11, r31	; 0x0b
     bf6:	ea 87       	std	Y+10, r30	; 0x0a
     bf8:	80 81       	ld	r24, Z
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	80 83       	st	Z, r24
     bfe:	0f 90       	pop	r0
     c00:	0f be       	out	0x3f, r0	; 63
     c02:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <xSchedulerRunning>
     c06:	88 23       	and	r24, r24
     c08:	51 f0       	breq	.+20     	; 0xc1e <prvAddNewTaskToReadyList+0xf4>
     c0a:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
     c0e:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     c12:	96 89       	ldd	r25, Z+22	; 0x16
     c14:	8e 89       	ldd	r24, Y+22	; 0x16
     c16:	98 17       	cp	r25, r24
     c18:	10 f4       	brcc	.+4      	; 0xc1e <prvAddNewTaskToReadyList+0xf4>
     c1a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	08 95       	ret

00000c24 <prvCheckTasksWaitingTermination>:
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	1c c0       	rjmp	.+56     	; 0xc62 <prvCheckTasksWaitingTermination+0x3e>
     c2a:	0f b6       	in	r0, 0x3f	; 63
     c2c:	f8 94       	cli
     c2e:	0f 92       	push	r0
     c30:	e0 91 ec 06 	lds	r30, 0x06EC	; 0x8006ec <xTasksWaitingTermination+0x5>
     c34:	f0 91 ed 06 	lds	r31, 0x06ED	; 0x8006ed <xTasksWaitingTermination+0x6>
     c38:	c6 81       	ldd	r28, Z+6	; 0x06
     c3a:	d7 81       	ldd	r29, Z+7	; 0x07
     c3c:	ce 01       	movw	r24, r28
     c3e:	02 96       	adiw	r24, 0x02	; 2
     c40:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     c44:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <uxCurrentNumberOfTasks>
     c48:	81 50       	subi	r24, 0x01	; 1
     c4a:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <uxCurrentNumberOfTasks>
     c4e:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxDeletedTasksWaitingCleanUp>
     c52:	81 50       	subi	r24, 0x01	; 1
     c54:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <uxDeletedTasksWaitingCleanUp>
     c58:	0f 90       	pop	r0
     c5a:	0f be       	out	0x3f, r0	; 63
     c5c:	ce 01       	movw	r24, r28
     c5e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <prvDeleteTCB>
     c62:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxDeletedTasksWaitingCleanUp>
     c66:	81 11       	cpse	r24, r1
     c68:	e0 cf       	rjmp	.-64     	; 0xc2a <prvCheckTasksWaitingTermination+0x6>
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	08 95       	ret

00000c70 <prvIdleTask>:
     c70:	0e 94 12 06 	call	0xc24	; 0xc24 <prvCheckTasksWaitingTermination>
     c74:	80 91 0f 07 	lds	r24, 0x070F	; 0x80070f <pxReadyTasksLists>
     c78:	82 30       	cpi	r24, 0x02	; 2
     c7a:	d0 f3       	brcs	.-12     	; 0xc70 <prvIdleTask>
     c7c:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     c80:	f7 cf       	rjmp	.-18     	; 0xc70 <prvIdleTask>

00000c82 <prvAddCurrentTaskToDelayedList>:
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ec 01       	movw	r28, r24
     c8e:	f6 2e       	mov	r15, r22
     c90:	00 91 da 06 	lds	r16, 0x06DA	; 0x8006da <xTickCount>
     c94:	10 91 db 06 	lds	r17, 0x06DB	; 0x8006db <xTickCount+0x1>
     c98:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     c9c:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     ca0:	02 96       	adiw	r24, 0x02	; 2
     ca2:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     ca6:	cf 3f       	cpi	r28, 0xFF	; 255
     ca8:	8f ef       	ldi	r24, 0xFF	; 255
     caa:	d8 07       	cpc	r29, r24
     cac:	b1 f5       	brne	.+108    	; 0xd1a <prvAddCurrentTaskToDelayedList+0x98>
     cae:	ff 20       	and	r15, r15
     cb0:	a1 f1       	breq	.+104    	; 0xd1a <prvAddCurrentTaskToDelayedList+0x98>
     cb2:	ed ed       	ldi	r30, 0xDD	; 221
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	a1 81       	ldd	r26, Z+1	; 0x01
     cb8:	b2 81       	ldd	r27, Z+2	; 0x02
     cba:	c0 91 45 07 	lds	r28, 0x0745	; 0x800745 <pxCurrentTCB>
     cbe:	d0 91 46 07 	lds	r29, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cc2:	bd 83       	std	Y+5, r27	; 0x05
     cc4:	ac 83       	std	Y+4, r26	; 0x04
     cc6:	c0 91 45 07 	lds	r28, 0x0745	; 0x800745 <pxCurrentTCB>
     cca:	d0 91 46 07 	lds	r29, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cce:	14 96       	adiw	r26, 0x04	; 4
     cd0:	8d 91       	ld	r24, X+
     cd2:	9c 91       	ld	r25, X
     cd4:	15 97       	sbiw	r26, 0x05	; 5
     cd6:	9f 83       	std	Y+7, r25	; 0x07
     cd8:	8e 83       	std	Y+6, r24	; 0x06
     cda:	14 96       	adiw	r26, 0x04	; 4
     cdc:	cd 91       	ld	r28, X+
     cde:	dc 91       	ld	r29, X
     ce0:	15 97       	sbiw	r26, 0x05	; 5
     ce2:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     ce6:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cea:	02 96       	adiw	r24, 0x02	; 2
     cec:	9b 83       	std	Y+3, r25	; 0x03
     cee:	8a 83       	std	Y+2, r24	; 0x02
     cf0:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     cf4:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     cf8:	02 96       	adiw	r24, 0x02	; 2
     cfa:	15 96       	adiw	r26, 0x05	; 5
     cfc:	9c 93       	st	X, r25
     cfe:	8e 93       	st	-X, r24
     d00:	14 97       	sbiw	r26, 0x04	; 4
     d02:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
     d06:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d0a:	1b 96       	adiw	r26, 0x0b	; 11
     d0c:	fc 93       	st	X, r31
     d0e:	ee 93       	st	-X, r30
     d10:	1a 97       	sbiw	r26, 0x0a	; 10
     d12:	80 81       	ld	r24, Z
     d14:	8f 5f       	subi	r24, 0xFF	; 255
     d16:	80 83       	st	Z, r24
     d18:	2f c0       	rjmp	.+94     	; 0xd78 <prvAddCurrentTaskToDelayedList+0xf6>
     d1a:	c0 0f       	add	r28, r16
     d1c:	d1 1f       	adc	r29, r17
     d1e:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
     d22:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d26:	d3 83       	std	Z+3, r29	; 0x03
     d28:	c2 83       	std	Z+2, r28	; 0x02
     d2a:	c0 17       	cp	r28, r16
     d2c:	d1 07       	cpc	r29, r17
     d2e:	68 f4       	brcc	.+26     	; 0xd4a <prvAddCurrentTaskToDelayedList+0xc8>
     d30:	60 91 45 07 	lds	r22, 0x0745	; 0x800745 <pxCurrentTCB>
     d34:	70 91 46 07 	lds	r23, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d38:	80 91 f9 06 	lds	r24, 0x06F9	; 0x8006f9 <pxOverflowDelayedTaskList>
     d3c:	90 91 fa 06 	lds	r25, 0x06FA	; 0x8006fa <pxOverflowDelayedTaskList+0x1>
     d40:	6e 5f       	subi	r22, 0xFE	; 254
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     d48:	17 c0       	rjmp	.+46     	; 0xd78 <prvAddCurrentTaskToDelayedList+0xf6>
     d4a:	60 91 45 07 	lds	r22, 0x0745	; 0x800745 <pxCurrentTCB>
     d4e:	70 91 46 07 	lds	r23, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     d52:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     d56:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     d5a:	6e 5f       	subi	r22, 0xFE	; 254
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
     d62:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <xNextTaskUnblockTime>
     d66:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     d6a:	c8 17       	cp	r28, r24
     d6c:	d9 07       	cpc	r29, r25
     d6e:	20 f4       	brcc	.+8      	; 0xd78 <prvAddCurrentTaskToDelayedList+0xf6>
     d70:	d0 93 d2 06 	sts	0x06D2, r29	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     d74:	c0 93 d1 06 	sts	0x06D1, r28	; 0x8006d1 <xNextTaskUnblockTime>
     d78:	df 91       	pop	r29
     d7a:	cf 91       	pop	r28
     d7c:	1f 91       	pop	r17
     d7e:	0f 91       	pop	r16
     d80:	ff 90       	pop	r15
     d82:	08 95       	ret

00000d84 <xTaskCreate>:
     d84:	2f 92       	push	r2
     d86:	3f 92       	push	r3
     d88:	4f 92       	push	r4
     d8a:	5f 92       	push	r5
     d8c:	6f 92       	push	r6
     d8e:	7f 92       	push	r7
     d90:	8f 92       	push	r8
     d92:	9f 92       	push	r9
     d94:	af 92       	push	r10
     d96:	bf 92       	push	r11
     d98:	cf 92       	push	r12
     d9a:	df 92       	push	r13
     d9c:	ef 92       	push	r14
     d9e:	ff 92       	push	r15
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	3c 01       	movw	r6, r24
     daa:	1b 01       	movw	r2, r22
     dac:	5a 01       	movw	r10, r20
     dae:	29 01       	movw	r4, r18
     db0:	ca 01       	movw	r24, r20
     db2:	0e 94 30 02 	call	0x460	; 0x460 <pvPortMalloc>
     db6:	6c 01       	movw	r12, r24
     db8:	89 2b       	or	r24, r25
     dba:	99 f0       	breq	.+38     	; 0xde2 <xTaskCreate+0x5e>
     dbc:	86 e2       	ldi	r24, 0x26	; 38
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	0e 94 30 02 	call	0x460	; 0x460 <pvPortMalloc>
     dc4:	ec 01       	movw	r28, r24
     dc6:	89 2b       	or	r24, r25
     dc8:	41 f0       	breq	.+16     	; 0xdda <xTaskCreate+0x56>
     dca:	86 e2       	ldi	r24, 0x26	; 38
     dcc:	fe 01       	movw	r30, r28
     dce:	11 92       	st	Z+, r1
     dd0:	8a 95       	dec	r24
     dd2:	e9 f7       	brne	.-6      	; 0xdce <xTaskCreate+0x4a>
     dd4:	d8 8e       	std	Y+24, r13	; 0x18
     dd6:	cf 8a       	std	Y+23, r12	; 0x17
     dd8:	06 c0       	rjmp	.+12     	; 0xde6 <xTaskCreate+0x62>
     dda:	c6 01       	movw	r24, r12
     ddc:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <vPortFree>
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <xTaskCreate+0x62>
     de2:	c0 e0       	ldi	r28, 0x00	; 0
     de4:	d0 e0       	ldi	r29, 0x00	; 0
     de6:	20 97       	sbiw	r28, 0x00	; 0
     de8:	91 f0       	breq	.+36     	; 0xe0e <xTaskCreate+0x8a>
     dea:	95 01       	movw	r18, r10
     dec:	40 e0       	ldi	r20, 0x00	; 0
     dee:	50 e0       	ldi	r21, 0x00	; 0
     df0:	81 2c       	mov	r8, r1
     df2:	91 2c       	mov	r9, r1
     df4:	5e 01       	movw	r10, r28
     df6:	67 01       	movw	r12, r14
     df8:	e0 2e       	mov	r14, r16
     dfa:	82 01       	movw	r16, r4
     dfc:	b1 01       	movw	r22, r2
     dfe:	c3 01       	movw	r24, r6
     e00:	0e 94 f5 04 	call	0x9ea	; 0x9ea <prvInitialiseNewTask>
     e04:	ce 01       	movw	r24, r28
     e06:	0e 94 95 05 	call	0xb2a	; 0xb2a <prvAddNewTaskToReadyList>
     e0a:	81 e0       	ldi	r24, 0x01	; 1
     e0c:	01 c0       	rjmp	.+2      	; 0xe10 <xTaskCreate+0x8c>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	3f 90       	pop	r3
     e32:	2f 90       	pop	r2
     e34:	08 95       	ret

00000e36 <vTaskDelete>:
     e36:	0f 93       	push	r16
     e38:	1f 93       	push	r17
     e3a:	cf 93       	push	r28
     e3c:	df 93       	push	r29
     e3e:	ec 01       	movw	r28, r24
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	0f 92       	push	r0
     e46:	89 2b       	or	r24, r25
     e48:	21 f4       	brne	.+8      	; 0xe52 <vTaskDelete+0x1c>
     e4a:	c0 91 45 07 	lds	r28, 0x0745	; 0x800745 <pxCurrentTCB>
     e4e:	d0 91 46 07 	lds	r29, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e52:	8e 01       	movw	r16, r28
     e54:	0e 5f       	subi	r16, 0xFE	; 254
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	c8 01       	movw	r24, r16
     e5a:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     e5e:	8c 89       	ldd	r24, Y+20	; 0x14
     e60:	9d 89       	ldd	r25, Y+21	; 0x15
     e62:	89 2b       	or	r24, r25
     e64:	21 f0       	breq	.+8      	; 0xe6e <vTaskDelete+0x38>
     e66:	ce 01       	movw	r24, r28
     e68:	0c 96       	adiw	r24, 0x0c	; 12
     e6a:	0e 94 ad 00 	call	0x15a	; 0x15a <uxListRemove>
     e6e:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <uxTaskNumber>
     e72:	8f 5f       	subi	r24, 0xFF	; 255
     e74:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <uxTaskNumber>
     e78:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     e7c:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     e80:	c8 17       	cp	r28, r24
     e82:	d9 07       	cpc	r29, r25
     e84:	59 f4       	brne	.+22     	; 0xe9c <vTaskDelete+0x66>
     e86:	b8 01       	movw	r22, r16
     e88:	87 ee       	ldi	r24, 0xE7	; 231
     e8a:	96 e0       	ldi	r25, 0x06	; 6
     e8c:	0e 94 5b 00 	call	0xb6	; 0xb6 <vListInsertEnd>
     e90:	80 91 e6 06 	lds	r24, 0x06E6	; 0x8006e6 <uxDeletedTasksWaitingCleanUp>
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	80 93 e6 06 	sts	0x06E6, r24	; 0x8006e6 <uxDeletedTasksWaitingCleanUp>
     e9a:	07 c0       	rjmp	.+14     	; 0xeaa <vTaskDelete+0x74>
     e9c:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <uxCurrentNumberOfTasks>
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	80 93 dc 06 	sts	0x06DC, r24	; 0x8006dc <uxCurrentNumberOfTasks>
     ea6:	0e 94 cc 04 	call	0x998	; 0x998 <prvResetNextTaskUnblockTime>
     eaa:	0f 90       	pop	r0
     eac:	0f be       	out	0x3f, r0	; 63
     eae:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     eb2:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     eb6:	c8 17       	cp	r28, r24
     eb8:	d9 07       	cpc	r29, r25
     eba:	19 f0       	breq	.+6      	; 0xec2 <vTaskDelete+0x8c>
     ebc:	ce 01       	movw	r24, r28
     ebe:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <prvDeleteTCB>
     ec2:	80 91 d8 06 	lds	r24, 0x06D8	; 0x8006d8 <xSchedulerRunning>
     ec6:	88 23       	and	r24, r24
     ec8:	49 f0       	breq	.+18     	; 0xedc <vTaskDelete+0xa6>
     eca:	80 91 45 07 	lds	r24, 0x0745	; 0x800745 <pxCurrentTCB>
     ece:	90 91 46 07 	lds	r25, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
     ed2:	c8 17       	cp	r28, r24
     ed4:	d9 07       	cpc	r29, r25
     ed6:	11 f4       	brne	.+4      	; 0xedc <vTaskDelete+0xa6>
     ed8:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <vTaskStartScheduler>:
     ee6:	ef 92       	push	r14
     ee8:	ff 92       	push	r15
     eea:	0f 93       	push	r16
     eec:	0f 2e       	mov	r0, r31
     eee:	ff ec       	ldi	r31, 0xCF	; 207
     ef0:	ef 2e       	mov	r14, r31
     ef2:	f6 e0       	ldi	r31, 0x06	; 6
     ef4:	ff 2e       	mov	r15, r31
     ef6:	f0 2d       	mov	r31, r0
     ef8:	00 e0       	ldi	r16, 0x00	; 0
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	46 e9       	ldi	r20, 0x96	; 150
     f00:	50 e0       	ldi	r21, 0x00	; 0
     f02:	63 e6       	ldi	r22, 0x63	; 99
     f04:	70 e0       	ldi	r23, 0x00	; 0
     f06:	88 e3       	ldi	r24, 0x38	; 56
     f08:	96 e0       	ldi	r25, 0x06	; 6
     f0a:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
     f0e:	81 30       	cpi	r24, 0x01	; 1
     f10:	81 f4       	brne	.+32     	; 0xf32 <vTaskStartScheduler+0x4c>
     f12:	f8 94       	cli
     f14:	8f ef       	ldi	r24, 0xFF	; 255
     f16:	9f ef       	ldi	r25, 0xFF	; 255
     f18:	90 93 d2 06 	sts	0x06D2, r25	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     f1c:	80 93 d1 06 	sts	0x06D1, r24	; 0x8006d1 <xNextTaskUnblockTime>
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	80 93 d8 06 	sts	0x06D8, r24	; 0x8006d8 <xSchedulerRunning>
     f26:	10 92 db 06 	sts	0x06DB, r1	; 0x8006db <xTickCount+0x1>
     f2a:	10 92 da 06 	sts	0x06DA, r1	; 0x8006da <xTickCount>
     f2e:	0e 94 49 01 	call	0x292	; 0x292 <xPortStartScheduler>
     f32:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     f36:	0f 91       	pop	r16
     f38:	ff 90       	pop	r15
     f3a:	ef 90       	pop	r14
     f3c:	08 95       	ret

00000f3e <vTaskSuspendAll>:
     f3e:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
     f42:	8f 5f       	subi	r24, 0xFF	; 255
     f44:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <uxSchedulerSuspended>
     f48:	08 95       	ret

00000f4a <xTaskIncrementTick>:
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
     f56:	81 11       	cpse	r24, r1
     f58:	01 c1       	rjmp	.+514    	; 0x115c <xTaskIncrementTick+0x212>
     f5a:	c0 91 da 06 	lds	r28, 0x06DA	; 0x8006da <xTickCount>
     f5e:	d0 91 db 06 	lds	r29, 0x06DB	; 0x8006db <xTickCount+0x1>
     f62:	8e 01       	movw	r16, r28
     f64:	0f 5f       	subi	r16, 0xFF	; 255
     f66:	1f 4f       	sbci	r17, 0xFF	; 255
     f68:	10 93 db 06 	sts	0x06DB, r17	; 0x8006db <xTickCount+0x1>
     f6c:	00 93 da 06 	sts	0x06DA, r16	; 0x8006da <xTickCount>
     f70:	01 15       	cp	r16, r1
     f72:	11 05       	cpc	r17, r1
     f74:	b9 f4       	brne	.+46     	; 0xfa4 <xTaskIncrementTick+0x5a>
     f76:	80 91 fb 06 	lds	r24, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     f7a:	90 91 fc 06 	lds	r25, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     f7e:	20 91 f9 06 	lds	r18, 0x06F9	; 0x8006f9 <pxOverflowDelayedTaskList>
     f82:	30 91 fa 06 	lds	r19, 0x06FA	; 0x8006fa <pxOverflowDelayedTaskList+0x1>
     f86:	30 93 fc 06 	sts	0x06FC, r19	; 0x8006fc <pxDelayedTaskList+0x1>
     f8a:	20 93 fb 06 	sts	0x06FB, r18	; 0x8006fb <pxDelayedTaskList>
     f8e:	90 93 fa 06 	sts	0x06FA, r25	; 0x8006fa <pxOverflowDelayedTaskList+0x1>
     f92:	80 93 f9 06 	sts	0x06F9, r24	; 0x8006f9 <pxOverflowDelayedTaskList>
     f96:	80 91 d4 06 	lds	r24, 0x06D4	; 0x8006d4 <xNumOfOverflows>
     f9a:	8f 5f       	subi	r24, 0xFF	; 255
     f9c:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <xNumOfOverflows>
     fa0:	0e 94 cc 04 	call	0x998	; 0x998 <prvResetNextTaskUnblockTime>
     fa4:	80 91 d1 06 	lds	r24, 0x06D1	; 0x8006d1 <xNextTaskUnblockTime>
     fa8:	90 91 d2 06 	lds	r25, 0x06D2	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     fac:	08 17       	cp	r16, r24
     fae:	19 07       	cpc	r17, r25
     fb0:	20 f4       	brcc	.+8      	; 0xfba <xTaskIncrementTick+0x70>
     fb2:	80 e0       	ldi	r24, 0x00	; 0
     fb4:	b8 c0       	rjmp	.+368    	; 0x1126 <xTaskIncrementTick+0x1dc>
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	01 c0       	rjmp	.+2      	; 0xfbc <xTaskIncrementTick+0x72>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     fc0:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     fc4:	90 81       	ld	r25, Z
     fc6:	91 11       	cpse	r25, r1
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <xTaskIncrementTick+0x8e>
     fca:	2f ef       	ldi	r18, 0xFF	; 255
     fcc:	3f ef       	ldi	r19, 0xFF	; 255
     fce:	30 93 d2 06 	sts	0x06D2, r19	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     fd2:	20 93 d1 06 	sts	0x06D1, r18	; 0x8006d1 <xNextTaskUnblockTime>
     fd6:	a7 c0       	rjmp	.+334    	; 0x1126 <xTaskIncrementTick+0x1dc>
     fd8:	e0 91 fb 06 	lds	r30, 0x06FB	; 0x8006fb <pxDelayedTaskList>
     fdc:	f0 91 fc 06 	lds	r31, 0x06FC	; 0x8006fc <pxDelayedTaskList+0x1>
     fe0:	05 80       	ldd	r0, Z+5	; 0x05
     fe2:	f6 81       	ldd	r31, Z+6	; 0x06
     fe4:	e0 2d       	mov	r30, r0
     fe6:	06 80       	ldd	r0, Z+6	; 0x06
     fe8:	f7 81       	ldd	r31, Z+7	; 0x07
     fea:	e0 2d       	mov	r30, r0
     fec:	22 81       	ldd	r18, Z+2	; 0x02
     fee:	33 81       	ldd	r19, Z+3	; 0x03
     ff0:	02 17       	cp	r16, r18
     ff2:	13 07       	cpc	r17, r19
     ff4:	28 f4       	brcc	.+10     	; 0x1000 <xTaskIncrementTick+0xb6>
     ff6:	30 93 d2 06 	sts	0x06D2, r19	; 0x8006d2 <xNextTaskUnblockTime+0x1>
     ffa:	20 93 d1 06 	sts	0x06D1, r18	; 0x8006d1 <xNextTaskUnblockTime>
     ffe:	93 c0       	rjmp	.+294    	; 0x1126 <xTaskIncrementTick+0x1dc>
    1000:	a2 85       	ldd	r26, Z+10	; 0x0a
    1002:	b3 85       	ldd	r27, Z+11	; 0x0b
    1004:	24 81       	ldd	r18, Z+4	; 0x04
    1006:	35 81       	ldd	r19, Z+5	; 0x05
    1008:	46 81       	ldd	r20, Z+6	; 0x06
    100a:	57 81       	ldd	r21, Z+7	; 0x07
    100c:	e9 01       	movw	r28, r18
    100e:	5d 83       	std	Y+5, r21	; 0x05
    1010:	4c 83       	std	Y+4, r20	; 0x04
    1012:	26 81       	ldd	r18, Z+6	; 0x06
    1014:	37 81       	ldd	r19, Z+7	; 0x07
    1016:	44 81       	ldd	r20, Z+4	; 0x04
    1018:	55 81       	ldd	r21, Z+5	; 0x05
    101a:	e9 01       	movw	r28, r18
    101c:	5b 83       	std	Y+3, r21	; 0x03
    101e:	4a 83       	std	Y+2, r20	; 0x02
    1020:	11 96       	adiw	r26, 0x01	; 1
    1022:	2d 91       	ld	r18, X+
    1024:	3c 91       	ld	r19, X
    1026:	12 97       	sbiw	r26, 0x02	; 2
    1028:	af 01       	movw	r20, r30
    102a:	4e 5f       	subi	r20, 0xFE	; 254
    102c:	5f 4f       	sbci	r21, 0xFF	; 255
    102e:	24 17       	cp	r18, r20
    1030:	35 07       	cpc	r19, r21
    1032:	31 f4       	brne	.+12     	; 0x1040 <xTaskIncrementTick+0xf6>
    1034:	26 81       	ldd	r18, Z+6	; 0x06
    1036:	37 81       	ldd	r19, Z+7	; 0x07
    1038:	12 96       	adiw	r26, 0x02	; 2
    103a:	3c 93       	st	X, r19
    103c:	2e 93       	st	-X, r18
    103e:	11 97       	sbiw	r26, 0x01	; 1
    1040:	13 86       	std	Z+11, r1	; 0x0b
    1042:	12 86       	std	Z+10, r1	; 0x0a
    1044:	9c 91       	ld	r25, X
    1046:	91 50       	subi	r25, 0x01	; 1
    1048:	9c 93       	st	X, r25
    104a:	a4 89       	ldd	r26, Z+20	; 0x14
    104c:	b5 89       	ldd	r27, Z+21	; 0x15
    104e:	10 97       	sbiw	r26, 0x00	; 0
    1050:	19 f1       	breq	.+70     	; 0x1098 <xTaskIncrementTick+0x14e>
    1052:	26 85       	ldd	r18, Z+14	; 0x0e
    1054:	37 85       	ldd	r19, Z+15	; 0x0f
    1056:	60 89       	ldd	r22, Z+16	; 0x10
    1058:	71 89       	ldd	r23, Z+17	; 0x11
    105a:	e9 01       	movw	r28, r18
    105c:	7d 83       	std	Y+5, r23	; 0x05
    105e:	6c 83       	std	Y+4, r22	; 0x04
    1060:	20 89       	ldd	r18, Z+16	; 0x10
    1062:	31 89       	ldd	r19, Z+17	; 0x11
    1064:	66 85       	ldd	r22, Z+14	; 0x0e
    1066:	77 85       	ldd	r23, Z+15	; 0x0f
    1068:	e9 01       	movw	r28, r18
    106a:	7b 83       	std	Y+3, r23	; 0x03
    106c:	6a 83       	std	Y+2, r22	; 0x02
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	6d 91       	ld	r22, X+
    1072:	7c 91       	ld	r23, X
    1074:	12 97       	sbiw	r26, 0x02	; 2
    1076:	9f 01       	movw	r18, r30
    1078:	24 5f       	subi	r18, 0xF4	; 244
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	62 17       	cp	r22, r18
    107e:	73 07       	cpc	r23, r19
    1080:	31 f4       	brne	.+12     	; 0x108e <xTaskIncrementTick+0x144>
    1082:	20 89       	ldd	r18, Z+16	; 0x10
    1084:	31 89       	ldd	r19, Z+17	; 0x11
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	3c 93       	st	X, r19
    108a:	2e 93       	st	-X, r18
    108c:	11 97       	sbiw	r26, 0x01	; 1
    108e:	15 8a       	std	Z+21, r1	; 0x15
    1090:	14 8a       	std	Z+20, r1	; 0x14
    1092:	9c 91       	ld	r25, X
    1094:	91 50       	subi	r25, 0x01	; 1
    1096:	9c 93       	st	X, r25
    1098:	26 89       	ldd	r18, Z+22	; 0x16
    109a:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <uxTopReadyPriority>
    109e:	92 17       	cp	r25, r18
    10a0:	10 f4       	brcc	.+4      	; 0x10a6 <xTaskIncrementTick+0x15c>
    10a2:	20 93 d9 06 	sts	0x06D9, r18	; 0x8006d9 <uxTopReadyPriority>
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	d9 01       	movw	r26, r18
    10aa:	aa 0f       	add	r26, r26
    10ac:	bb 1f       	adc	r27, r27
    10ae:	aa 0f       	add	r26, r26
    10b0:	bb 1f       	adc	r27, r27
    10b2:	aa 0f       	add	r26, r26
    10b4:	bb 1f       	adc	r27, r27
    10b6:	2a 0f       	add	r18, r26
    10b8:	3b 1f       	adc	r19, r27
    10ba:	d9 01       	movw	r26, r18
    10bc:	a1 5f       	subi	r26, 0xF1	; 241
    10be:	b8 4f       	sbci	r27, 0xF8	; 248
    10c0:	11 96       	adiw	r26, 0x01	; 1
    10c2:	0d 90       	ld	r0, X+
    10c4:	bc 91       	ld	r27, X
    10c6:	a0 2d       	mov	r26, r0
    10c8:	b5 83       	std	Z+5, r27	; 0x05
    10ca:	a4 83       	std	Z+4, r26	; 0x04
    10cc:	14 96       	adiw	r26, 0x04	; 4
    10ce:	2d 91       	ld	r18, X+
    10d0:	3c 91       	ld	r19, X
    10d2:	15 97       	sbiw	r26, 0x05	; 5
    10d4:	37 83       	std	Z+7, r19	; 0x07
    10d6:	26 83       	std	Z+6, r18	; 0x06
    10d8:	14 96       	adiw	r26, 0x04	; 4
    10da:	2d 91       	ld	r18, X+
    10dc:	3c 91       	ld	r19, X
    10de:	15 97       	sbiw	r26, 0x05	; 5
    10e0:	e9 01       	movw	r28, r18
    10e2:	5b 83       	std	Y+3, r21	; 0x03
    10e4:	4a 83       	std	Y+2, r20	; 0x02
    10e6:	15 96       	adiw	r26, 0x05	; 5
    10e8:	5c 93       	st	X, r21
    10ea:	4e 93       	st	-X, r20
    10ec:	14 97       	sbiw	r26, 0x04	; 4
    10ee:	a6 89       	ldd	r26, Z+22	; 0x16
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	9d 01       	movw	r18, r26
    10f4:	22 0f       	add	r18, r18
    10f6:	33 1f       	adc	r19, r19
    10f8:	22 0f       	add	r18, r18
    10fa:	33 1f       	adc	r19, r19
    10fc:	22 0f       	add	r18, r18
    10fe:	33 1f       	adc	r19, r19
    1100:	a2 0f       	add	r26, r18
    1102:	b3 1f       	adc	r27, r19
    1104:	a1 5f       	subi	r26, 0xF1	; 241
    1106:	b8 4f       	sbci	r27, 0xF8	; 248
    1108:	b3 87       	std	Z+11, r27	; 0x0b
    110a:	a2 87       	std	Z+10, r26	; 0x0a
    110c:	9c 91       	ld	r25, X
    110e:	9f 5f       	subi	r25, 0xFF	; 255
    1110:	9c 93       	st	X, r25
    1112:	26 89       	ldd	r18, Z+22	; 0x16
    1114:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
    1118:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    111c:	96 89       	ldd	r25, Z+22	; 0x16
    111e:	92 17       	cp	r25, r18
    1120:	08 f4       	brcc	.+2      	; 0x1124 <xTaskIncrementTick+0x1da>
    1122:	49 cf       	rjmp	.-366    	; 0xfb6 <xTaskIncrementTick+0x6c>
    1124:	4b cf       	rjmp	.-362    	; 0xfbc <xTaskIncrementTick+0x72>
    1126:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
    112a:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    112e:	26 89       	ldd	r18, Z+22	; 0x16
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	f9 01       	movw	r30, r18
    1134:	ee 0f       	add	r30, r30
    1136:	ff 1f       	adc	r31, r31
    1138:	ee 0f       	add	r30, r30
    113a:	ff 1f       	adc	r31, r31
    113c:	ee 0f       	add	r30, r30
    113e:	ff 1f       	adc	r31, r31
    1140:	2e 0f       	add	r18, r30
    1142:	3f 1f       	adc	r19, r31
    1144:	f9 01       	movw	r30, r18
    1146:	e1 5f       	subi	r30, 0xF1	; 241
    1148:	f8 4f       	sbci	r31, 0xF8	; 248
    114a:	90 81       	ld	r25, Z
    114c:	92 30       	cpi	r25, 0x02	; 2
    114e:	08 f0       	brcs	.+2      	; 0x1152 <xTaskIncrementTick+0x208>
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 91 d5 06 	lds	r25, 0x06D5	; 0x8006d5 <xYieldPending>
    1156:	91 11       	cpse	r25, r1
    1158:	0c c0       	rjmp	.+24     	; 0x1172 <xTaskIncrementTick+0x228>
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <xTaskIncrementTick+0x22a>
    115c:	80 91 d6 06 	lds	r24, 0x06D6	; 0x8006d6 <xPendedTicks>
    1160:	90 91 d7 06 	lds	r25, 0x06D7	; 0x8006d7 <xPendedTicks+0x1>
    1164:	01 96       	adiw	r24, 0x01	; 1
    1166:	90 93 d7 06 	sts	0x06D7, r25	; 0x8006d7 <xPendedTicks+0x1>
    116a:	80 93 d6 06 	sts	0x06D6, r24	; 0x8006d6 <xPendedTicks>
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	01 c0       	rjmp	.+2      	; 0x1174 <xTaskIncrementTick+0x22a>
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <xTaskResumeAll>:
    117e:	cf 93       	push	r28
    1180:	df 93       	push	r29
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	0f 92       	push	r0
    1188:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
    118c:	81 50       	subi	r24, 0x01	; 1
    118e:	80 93 ce 06 	sts	0x06CE, r24	; 0x8006ce <uxSchedulerSuspended>
    1192:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
    1196:	81 11       	cpse	r24, r1
    1198:	bf c0       	rjmp	.+382    	; 0x1318 <xTaskResumeAll+0x19a>
    119a:	80 91 dc 06 	lds	r24, 0x06DC	; 0x8006dc <uxCurrentNumberOfTasks>
    119e:	81 11       	cpse	r24, r1
    11a0:	96 c0       	rjmp	.+300    	; 0x12ce <xTaskResumeAll+0x150>
    11a2:	bd c0       	rjmp	.+378    	; 0x131e <xTaskResumeAll+0x1a0>
    11a4:	e0 91 f5 06 	lds	r30, 0x06F5	; 0x8006f5 <xPendingReadyList+0x5>
    11a8:	f0 91 f6 06 	lds	r31, 0x06F6	; 0x8006f6 <xPendingReadyList+0x6>
    11ac:	06 80       	ldd	r0, Z+6	; 0x06
    11ae:	f7 81       	ldd	r31, Z+7	; 0x07
    11b0:	e0 2d       	mov	r30, r0
    11b2:	a4 89       	ldd	r26, Z+20	; 0x14
    11b4:	b5 89       	ldd	r27, Z+21	; 0x15
    11b6:	c6 85       	ldd	r28, Z+14	; 0x0e
    11b8:	d7 85       	ldd	r29, Z+15	; 0x0f
    11ba:	80 89       	ldd	r24, Z+16	; 0x10
    11bc:	91 89       	ldd	r25, Z+17	; 0x11
    11be:	9d 83       	std	Y+5, r25	; 0x05
    11c0:	8c 83       	std	Y+4, r24	; 0x04
    11c2:	c0 89       	ldd	r28, Z+16	; 0x10
    11c4:	d1 89       	ldd	r29, Z+17	; 0x11
    11c6:	86 85       	ldd	r24, Z+14	; 0x0e
    11c8:	97 85       	ldd	r25, Z+15	; 0x0f
    11ca:	9b 83       	std	Y+3, r25	; 0x03
    11cc:	8a 83       	std	Y+2, r24	; 0x02
    11ce:	11 96       	adiw	r26, 0x01	; 1
    11d0:	2d 91       	ld	r18, X+
    11d2:	3c 91       	ld	r19, X
    11d4:	12 97       	sbiw	r26, 0x02	; 2
    11d6:	cf 01       	movw	r24, r30
    11d8:	0c 96       	adiw	r24, 0x0c	; 12
    11da:	28 17       	cp	r18, r24
    11dc:	39 07       	cpc	r19, r25
    11de:	31 f4       	brne	.+12     	; 0x11ec <xTaskResumeAll+0x6e>
    11e0:	80 89       	ldd	r24, Z+16	; 0x10
    11e2:	91 89       	ldd	r25, Z+17	; 0x11
    11e4:	12 96       	adiw	r26, 0x02	; 2
    11e6:	9c 93       	st	X, r25
    11e8:	8e 93       	st	-X, r24
    11ea:	11 97       	sbiw	r26, 0x01	; 1
    11ec:	15 8a       	std	Z+21, r1	; 0x15
    11ee:	14 8a       	std	Z+20, r1	; 0x14
    11f0:	8c 91       	ld	r24, X
    11f2:	81 50       	subi	r24, 0x01	; 1
    11f4:	8c 93       	st	X, r24
    11f6:	a2 85       	ldd	r26, Z+10	; 0x0a
    11f8:	b3 85       	ldd	r27, Z+11	; 0x0b
    11fa:	c4 81       	ldd	r28, Z+4	; 0x04
    11fc:	d5 81       	ldd	r29, Z+5	; 0x05
    11fe:	86 81       	ldd	r24, Z+6	; 0x06
    1200:	97 81       	ldd	r25, Z+7	; 0x07
    1202:	9d 83       	std	Y+5, r25	; 0x05
    1204:	8c 83       	std	Y+4, r24	; 0x04
    1206:	c6 81       	ldd	r28, Z+6	; 0x06
    1208:	d7 81       	ldd	r29, Z+7	; 0x07
    120a:	84 81       	ldd	r24, Z+4	; 0x04
    120c:	95 81       	ldd	r25, Z+5	; 0x05
    120e:	9b 83       	std	Y+3, r25	; 0x03
    1210:	8a 83       	std	Y+2, r24	; 0x02
    1212:	11 96       	adiw	r26, 0x01	; 1
    1214:	8d 91       	ld	r24, X+
    1216:	9c 91       	ld	r25, X
    1218:	12 97       	sbiw	r26, 0x02	; 2
    121a:	9f 01       	movw	r18, r30
    121c:	2e 5f       	subi	r18, 0xFE	; 254
    121e:	3f 4f       	sbci	r19, 0xFF	; 255
    1220:	82 17       	cp	r24, r18
    1222:	93 07       	cpc	r25, r19
    1224:	31 f4       	brne	.+12     	; 0x1232 <xTaskResumeAll+0xb4>
    1226:	86 81       	ldd	r24, Z+6	; 0x06
    1228:	97 81       	ldd	r25, Z+7	; 0x07
    122a:	12 96       	adiw	r26, 0x02	; 2
    122c:	9c 93       	st	X, r25
    122e:	8e 93       	st	-X, r24
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	13 86       	std	Z+11, r1	; 0x0b
    1234:	12 86       	std	Z+10, r1	; 0x0a
    1236:	8c 91       	ld	r24, X
    1238:	81 50       	subi	r24, 0x01	; 1
    123a:	8c 93       	st	X, r24
    123c:	86 89       	ldd	r24, Z+22	; 0x16
    123e:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <uxTopReadyPriority>
    1242:	98 17       	cp	r25, r24
    1244:	10 f4       	brcc	.+4      	; 0x124a <xTaskResumeAll+0xcc>
    1246:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <uxTopReadyPriority>
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	dc 01       	movw	r26, r24
    124e:	aa 0f       	add	r26, r26
    1250:	bb 1f       	adc	r27, r27
    1252:	aa 0f       	add	r26, r26
    1254:	bb 1f       	adc	r27, r27
    1256:	aa 0f       	add	r26, r26
    1258:	bb 1f       	adc	r27, r27
    125a:	8a 0f       	add	r24, r26
    125c:	9b 1f       	adc	r25, r27
    125e:	dc 01       	movw	r26, r24
    1260:	a1 5f       	subi	r26, 0xF1	; 241
    1262:	b8 4f       	sbci	r27, 0xF8	; 248
    1264:	11 96       	adiw	r26, 0x01	; 1
    1266:	0d 90       	ld	r0, X+
    1268:	bc 91       	ld	r27, X
    126a:	a0 2d       	mov	r26, r0
    126c:	b5 83       	std	Z+5, r27	; 0x05
    126e:	a4 83       	std	Z+4, r26	; 0x04
    1270:	14 96       	adiw	r26, 0x04	; 4
    1272:	8d 91       	ld	r24, X+
    1274:	9c 91       	ld	r25, X
    1276:	15 97       	sbiw	r26, 0x05	; 5
    1278:	97 83       	std	Z+7, r25	; 0x07
    127a:	86 83       	std	Z+6, r24	; 0x06
    127c:	14 96       	adiw	r26, 0x04	; 4
    127e:	cd 91       	ld	r28, X+
    1280:	dc 91       	ld	r29, X
    1282:	15 97       	sbiw	r26, 0x05	; 5
    1284:	3b 83       	std	Y+3, r19	; 0x03
    1286:	2a 83       	std	Y+2, r18	; 0x02
    1288:	15 96       	adiw	r26, 0x05	; 5
    128a:	3c 93       	st	X, r19
    128c:	2e 93       	st	-X, r18
    128e:	14 97       	sbiw	r26, 0x04	; 4
    1290:	a6 89       	ldd	r26, Z+22	; 0x16
    1292:	b0 e0       	ldi	r27, 0x00	; 0
    1294:	cd 01       	movw	r24, r26
    1296:	88 0f       	add	r24, r24
    1298:	99 1f       	adc	r25, r25
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	a8 0f       	add	r26, r24
    12a4:	b9 1f       	adc	r27, r25
    12a6:	a1 5f       	subi	r26, 0xF1	; 241
    12a8:	b8 4f       	sbci	r27, 0xF8	; 248
    12aa:	b3 87       	std	Z+11, r27	; 0x0b
    12ac:	a2 87       	std	Z+10, r26	; 0x0a
    12ae:	8c 91       	ld	r24, X
    12b0:	8f 5f       	subi	r24, 0xFF	; 255
    12b2:	8c 93       	st	X, r24
    12b4:	96 89       	ldd	r25, Z+22	; 0x16
    12b6:	a0 91 45 07 	lds	r26, 0x0745	; 0x800745 <pxCurrentTCB>
    12ba:	b0 91 46 07 	lds	r27, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    12be:	56 96       	adiw	r26, 0x16	; 22
    12c0:	8c 91       	ld	r24, X
    12c2:	98 17       	cp	r25, r24
    12c4:	30 f0       	brcs	.+12     	; 0x12d2 <xTaskResumeAll+0x154>
    12c6:	81 e0       	ldi	r24, 0x01	; 1
    12c8:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xYieldPending>
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <xTaskResumeAll+0x154>
    12ce:	e0 e0       	ldi	r30, 0x00	; 0
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 91 f0 06 	lds	r24, 0x06F0	; 0x8006f0 <xPendingReadyList>
    12d6:	81 11       	cpse	r24, r1
    12d8:	65 cf       	rjmp	.-310    	; 0x11a4 <xTaskResumeAll+0x26>
    12da:	ef 2b       	or	r30, r31
    12dc:	11 f0       	breq	.+4      	; 0x12e2 <xTaskResumeAll+0x164>
    12de:	0e 94 cc 04 	call	0x998	; 0x998 <prvResetNextTaskUnblockTime>
    12e2:	c0 91 d6 06 	lds	r28, 0x06D6	; 0x8006d6 <xPendedTicks>
    12e6:	d0 91 d7 06 	lds	r29, 0x06D7	; 0x8006d7 <xPendedTicks+0x1>
    12ea:	20 97       	sbiw	r28, 0x00	; 0
    12ec:	69 f0       	breq	.+26     	; 0x1308 <xTaskResumeAll+0x18a>
    12ee:	0e 94 a5 07 	call	0xf4a	; 0xf4a <xTaskIncrementTick>
    12f2:	88 23       	and	r24, r24
    12f4:	19 f0       	breq	.+6      	; 0x12fc <xTaskResumeAll+0x17e>
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xYieldPending>
    12fc:	21 97       	sbiw	r28, 0x01	; 1
    12fe:	b9 f7       	brne	.-18     	; 0x12ee <xTaskResumeAll+0x170>
    1300:	10 92 d7 06 	sts	0x06D7, r1	; 0x8006d7 <xPendedTicks+0x1>
    1304:	10 92 d6 06 	sts	0x06D6, r1	; 0x8006d6 <xPendedTicks>
    1308:	80 91 d5 06 	lds	r24, 0x06D5	; 0x8006d5 <xYieldPending>
    130c:	88 23       	and	r24, r24
    130e:	31 f0       	breq	.+12     	; 0x131c <xTaskResumeAll+0x19e>
    1310:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	03 c0       	rjmp	.+6      	; 0x131e <xTaskResumeAll+0x1a0>
    1318:	80 e0       	ldi	r24, 0x00	; 0
    131a:	01 c0       	rjmp	.+2      	; 0x131e <xTaskResumeAll+0x1a0>
    131c:	80 e0       	ldi	r24, 0x00	; 0
    131e:	0f 90       	pop	r0
    1320:	0f be       	out	0x3f, r0	; 63
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	08 95       	ret

00001328 <vTaskDelay>:
    1328:	cf 93       	push	r28
    132a:	df 93       	push	r29
    132c:	ec 01       	movw	r28, r24
    132e:	89 2b       	or	r24, r25
    1330:	49 f0       	breq	.+18     	; 0x1344 <vTaskDelay+0x1c>
    1332:	0e 94 9f 07 	call	0xf3e	; 0xf3e <vTaskSuspendAll>
    1336:	60 e0       	ldi	r22, 0x00	; 0
    1338:	ce 01       	movw	r24, r28
    133a:	0e 94 41 06 	call	0xc82	; 0xc82 <prvAddCurrentTaskToDelayedList>
    133e:	0e 94 bf 08 	call	0x117e	; 0x117e <xTaskResumeAll>
    1342:	01 c0       	rjmp	.+2      	; 0x1346 <vTaskDelay+0x1e>
    1344:	80 e0       	ldi	r24, 0x00	; 0
    1346:	81 11       	cpse	r24, r1
    1348:	02 c0       	rjmp	.+4      	; 0x134e <vTaskDelay+0x26>
    134a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <vPortYield>
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	08 95       	ret

00001354 <vTaskSwitchContext>:
    1354:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
    1358:	88 23       	and	r24, r24
    135a:	21 f0       	breq	.+8      	; 0x1364 <vTaskSwitchContext+0x10>
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xYieldPending>
    1362:	08 95       	ret
    1364:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <xYieldPending>
    1368:	20 91 d9 06 	lds	r18, 0x06D9	; 0x8006d9 <uxTopReadyPriority>
    136c:	01 c0       	rjmp	.+2      	; 0x1370 <vTaskSwitchContext+0x1c>
    136e:	21 50       	subi	r18, 0x01	; 1
    1370:	82 2f       	mov	r24, r18
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	ee 0f       	add	r30, r30
    1378:	ff 1f       	adc	r31, r31
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	ee 0f       	add	r30, r30
    1380:	ff 1f       	adc	r31, r31
    1382:	e8 0f       	add	r30, r24
    1384:	f9 1f       	adc	r31, r25
    1386:	e1 5f       	subi	r30, 0xF1	; 241
    1388:	f8 4f       	sbci	r31, 0xF8	; 248
    138a:	30 81       	ld	r19, Z
    138c:	33 23       	and	r19, r19
    138e:	79 f3       	breq	.-34     	; 0x136e <vTaskSwitchContext+0x1a>
    1390:	ac 01       	movw	r20, r24
    1392:	44 0f       	add	r20, r20
    1394:	55 1f       	adc	r21, r21
    1396:	44 0f       	add	r20, r20
    1398:	55 1f       	adc	r21, r21
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	48 0f       	add	r20, r24
    13a0:	59 1f       	adc	r21, r25
    13a2:	df 01       	movw	r26, r30
    13a4:	01 80       	ldd	r0, Z+1	; 0x01
    13a6:	f2 81       	ldd	r31, Z+2	; 0x02
    13a8:	e0 2d       	mov	r30, r0
    13aa:	02 80       	ldd	r0, Z+2	; 0x02
    13ac:	f3 81       	ldd	r31, Z+3	; 0x03
    13ae:	e0 2d       	mov	r30, r0
    13b0:	12 96       	adiw	r26, 0x02	; 2
    13b2:	fc 93       	st	X, r31
    13b4:	ee 93       	st	-X, r30
    13b6:	11 97       	sbiw	r26, 0x01	; 1
    13b8:	4e 5e       	subi	r20, 0xEE	; 238
    13ba:	58 4f       	sbci	r21, 0xF8	; 248
    13bc:	e4 17       	cp	r30, r20
    13be:	f5 07       	cpc	r31, r21
    13c0:	29 f4       	brne	.+10     	; 0x13cc <vTaskSwitchContext+0x78>
    13c2:	42 81       	ldd	r20, Z+2	; 0x02
    13c4:	53 81       	ldd	r21, Z+3	; 0x03
    13c6:	fd 01       	movw	r30, r26
    13c8:	52 83       	std	Z+2, r21	; 0x02
    13ca:	41 83       	std	Z+1, r20	; 0x01
    13cc:	fc 01       	movw	r30, r24
    13ce:	ee 0f       	add	r30, r30
    13d0:	ff 1f       	adc	r31, r31
    13d2:	ee 0f       	add	r30, r30
    13d4:	ff 1f       	adc	r31, r31
    13d6:	ee 0f       	add	r30, r30
    13d8:	ff 1f       	adc	r31, r31
    13da:	8e 0f       	add	r24, r30
    13dc:	9f 1f       	adc	r25, r31
    13de:	fc 01       	movw	r30, r24
    13e0:	e1 5f       	subi	r30, 0xF1	; 241
    13e2:	f8 4f       	sbci	r31, 0xF8	; 248
    13e4:	01 80       	ldd	r0, Z+1	; 0x01
    13e6:	f2 81       	ldd	r31, Z+2	; 0x02
    13e8:	e0 2d       	mov	r30, r0
    13ea:	86 81       	ldd	r24, Z+6	; 0x06
    13ec:	97 81       	ldd	r25, Z+7	; 0x07
    13ee:	90 93 46 07 	sts	0x0746, r25	; 0x800746 <pxCurrentTCB+0x1>
    13f2:	80 93 45 07 	sts	0x0745, r24	; 0x800745 <pxCurrentTCB>
    13f6:	20 93 d9 06 	sts	0x06D9, r18	; 0x8006d9 <uxTopReadyPriority>
    13fa:	08 95       	ret

000013fc <vTaskPlaceOnEventList>:
    13fc:	cf 93       	push	r28
    13fe:	df 93       	push	r29
    1400:	eb 01       	movw	r28, r22
    1402:	60 91 45 07 	lds	r22, 0x0745	; 0x800745 <pxCurrentTCB>
    1406:	70 91 46 07 	lds	r23, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    140a:	64 5f       	subi	r22, 0xF4	; 244
    140c:	7f 4f       	sbci	r23, 0xFF	; 255
    140e:	0e 94 7c 00 	call	0xf8	; 0xf8 <vListInsert>
    1412:	61 e0       	ldi	r22, 0x01	; 1
    1414:	ce 01       	movw	r24, r28
    1416:	0e 94 41 06 	call	0xc82	; 0xc82 <prvAddCurrentTaskToDelayedList>
    141a:	df 91       	pop	r29
    141c:	cf 91       	pop	r28
    141e:	08 95       	ret

00001420 <xTaskRemoveFromEventList>:
    1420:	cf 93       	push	r28
    1422:	df 93       	push	r29
    1424:	dc 01       	movw	r26, r24
    1426:	15 96       	adiw	r26, 0x05	; 5
    1428:	ed 91       	ld	r30, X+
    142a:	fc 91       	ld	r31, X
    142c:	16 97       	sbiw	r26, 0x06	; 6
    142e:	06 80       	ldd	r0, Z+6	; 0x06
    1430:	f7 81       	ldd	r31, Z+7	; 0x07
    1432:	e0 2d       	mov	r30, r0
    1434:	a4 89       	ldd	r26, Z+20	; 0x14
    1436:	b5 89       	ldd	r27, Z+21	; 0x15
    1438:	c6 85       	ldd	r28, Z+14	; 0x0e
    143a:	d7 85       	ldd	r29, Z+15	; 0x0f
    143c:	80 89       	ldd	r24, Z+16	; 0x10
    143e:	91 89       	ldd	r25, Z+17	; 0x11
    1440:	9d 83       	std	Y+5, r25	; 0x05
    1442:	8c 83       	std	Y+4, r24	; 0x04
    1444:	c0 89       	ldd	r28, Z+16	; 0x10
    1446:	d1 89       	ldd	r29, Z+17	; 0x11
    1448:	86 85       	ldd	r24, Z+14	; 0x0e
    144a:	97 85       	ldd	r25, Z+15	; 0x0f
    144c:	9b 83       	std	Y+3, r25	; 0x03
    144e:	8a 83       	std	Y+2, r24	; 0x02
    1450:	11 96       	adiw	r26, 0x01	; 1
    1452:	8d 91       	ld	r24, X+
    1454:	9c 91       	ld	r25, X
    1456:	12 97       	sbiw	r26, 0x02	; 2
    1458:	9f 01       	movw	r18, r30
    145a:	24 5f       	subi	r18, 0xF4	; 244
    145c:	3f 4f       	sbci	r19, 0xFF	; 255
    145e:	82 17       	cp	r24, r18
    1460:	93 07       	cpc	r25, r19
    1462:	31 f4       	brne	.+12     	; 0x1470 <xTaskRemoveFromEventList+0x50>
    1464:	80 89       	ldd	r24, Z+16	; 0x10
    1466:	91 89       	ldd	r25, Z+17	; 0x11
    1468:	12 96       	adiw	r26, 0x02	; 2
    146a:	9c 93       	st	X, r25
    146c:	8e 93       	st	-X, r24
    146e:	11 97       	sbiw	r26, 0x01	; 1
    1470:	15 8a       	std	Z+21, r1	; 0x15
    1472:	14 8a       	std	Z+20, r1	; 0x14
    1474:	8c 91       	ld	r24, X
    1476:	81 50       	subi	r24, 0x01	; 1
    1478:	8c 93       	st	X, r24
    147a:	80 91 ce 06 	lds	r24, 0x06CE	; 0x8006ce <uxSchedulerSuspended>
    147e:	81 11       	cpse	r24, r1
    1480:	60 c0       	rjmp	.+192    	; 0x1542 <xTaskRemoveFromEventList+0x122>
    1482:	a2 85       	ldd	r26, Z+10	; 0x0a
    1484:	b3 85       	ldd	r27, Z+11	; 0x0b
    1486:	c4 81       	ldd	r28, Z+4	; 0x04
    1488:	d5 81       	ldd	r29, Z+5	; 0x05
    148a:	86 81       	ldd	r24, Z+6	; 0x06
    148c:	97 81       	ldd	r25, Z+7	; 0x07
    148e:	9d 83       	std	Y+5, r25	; 0x05
    1490:	8c 83       	std	Y+4, r24	; 0x04
    1492:	c6 81       	ldd	r28, Z+6	; 0x06
    1494:	d7 81       	ldd	r29, Z+7	; 0x07
    1496:	84 81       	ldd	r24, Z+4	; 0x04
    1498:	95 81       	ldd	r25, Z+5	; 0x05
    149a:	9b 83       	std	Y+3, r25	; 0x03
    149c:	8a 83       	std	Y+2, r24	; 0x02
    149e:	11 96       	adiw	r26, 0x01	; 1
    14a0:	8d 91       	ld	r24, X+
    14a2:	9c 91       	ld	r25, X
    14a4:	12 97       	sbiw	r26, 0x02	; 2
    14a6:	9f 01       	movw	r18, r30
    14a8:	2e 5f       	subi	r18, 0xFE	; 254
    14aa:	3f 4f       	sbci	r19, 0xFF	; 255
    14ac:	82 17       	cp	r24, r18
    14ae:	93 07       	cpc	r25, r19
    14b0:	31 f4       	brne	.+12     	; 0x14be <xTaskRemoveFromEventList+0x9e>
    14b2:	86 81       	ldd	r24, Z+6	; 0x06
    14b4:	97 81       	ldd	r25, Z+7	; 0x07
    14b6:	12 96       	adiw	r26, 0x02	; 2
    14b8:	9c 93       	st	X, r25
    14ba:	8e 93       	st	-X, r24
    14bc:	11 97       	sbiw	r26, 0x01	; 1
    14be:	13 86       	std	Z+11, r1	; 0x0b
    14c0:	12 86       	std	Z+10, r1	; 0x0a
    14c2:	8c 91       	ld	r24, X
    14c4:	81 50       	subi	r24, 0x01	; 1
    14c6:	8c 93       	st	X, r24
    14c8:	86 89       	ldd	r24, Z+22	; 0x16
    14ca:	90 91 d9 06 	lds	r25, 0x06D9	; 0x8006d9 <uxTopReadyPriority>
    14ce:	98 17       	cp	r25, r24
    14d0:	10 f4       	brcc	.+4      	; 0x14d6 <xTaskRemoveFromEventList+0xb6>
    14d2:	80 93 d9 06 	sts	0x06D9, r24	; 0x8006d9 <uxTopReadyPriority>
    14d6:	90 e0       	ldi	r25, 0x00	; 0
    14d8:	dc 01       	movw	r26, r24
    14da:	aa 0f       	add	r26, r26
    14dc:	bb 1f       	adc	r27, r27
    14de:	aa 0f       	add	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	aa 0f       	add	r26, r26
    14e4:	bb 1f       	adc	r27, r27
    14e6:	8a 0f       	add	r24, r26
    14e8:	9b 1f       	adc	r25, r27
    14ea:	dc 01       	movw	r26, r24
    14ec:	a1 5f       	subi	r26, 0xF1	; 241
    14ee:	b8 4f       	sbci	r27, 0xF8	; 248
    14f0:	11 96       	adiw	r26, 0x01	; 1
    14f2:	0d 90       	ld	r0, X+
    14f4:	bc 91       	ld	r27, X
    14f6:	a0 2d       	mov	r26, r0
    14f8:	b5 83       	std	Z+5, r27	; 0x05
    14fa:	a4 83       	std	Z+4, r26	; 0x04
    14fc:	14 96       	adiw	r26, 0x04	; 4
    14fe:	8d 91       	ld	r24, X+
    1500:	9c 91       	ld	r25, X
    1502:	15 97       	sbiw	r26, 0x05	; 5
    1504:	97 83       	std	Z+7, r25	; 0x07
    1506:	86 83       	std	Z+6, r24	; 0x06
    1508:	14 96       	adiw	r26, 0x04	; 4
    150a:	cd 91       	ld	r28, X+
    150c:	dc 91       	ld	r29, X
    150e:	15 97       	sbiw	r26, 0x05	; 5
    1510:	3b 83       	std	Y+3, r19	; 0x03
    1512:	2a 83       	std	Y+2, r18	; 0x02
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	3c 93       	st	X, r19
    1518:	2e 93       	st	-X, r18
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	a6 89       	ldd	r26, Z+22	; 0x16
    151e:	b0 e0       	ldi	r27, 0x00	; 0
    1520:	cd 01       	movw	r24, r26
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	88 0f       	add	r24, r24
    1528:	99 1f       	adc	r25, r25
    152a:	88 0f       	add	r24, r24
    152c:	99 1f       	adc	r25, r25
    152e:	a8 0f       	add	r26, r24
    1530:	b9 1f       	adc	r27, r25
    1532:	a1 5f       	subi	r26, 0xF1	; 241
    1534:	b8 4f       	sbci	r27, 0xF8	; 248
    1536:	b3 87       	std	Z+11, r27	; 0x0b
    1538:	a2 87       	std	Z+10, r26	; 0x0a
    153a:	8c 91       	ld	r24, X
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	8c 93       	st	X, r24
    1540:	1c c0       	rjmp	.+56     	; 0x157a <xTaskRemoveFromEventList+0x15a>
    1542:	40 ef       	ldi	r20, 0xF0	; 240
    1544:	56 e0       	ldi	r21, 0x06	; 6
    1546:	da 01       	movw	r26, r20
    1548:	11 96       	adiw	r26, 0x01	; 1
    154a:	cd 91       	ld	r28, X+
    154c:	dc 91       	ld	r29, X
    154e:	12 97       	sbiw	r26, 0x02	; 2
    1550:	d7 87       	std	Z+15, r29	; 0x0f
    1552:	c6 87       	std	Z+14, r28	; 0x0e
    1554:	8c 81       	ldd	r24, Y+4	; 0x04
    1556:	9d 81       	ldd	r25, Y+5	; 0x05
    1558:	91 8b       	std	Z+17, r25	; 0x11
    155a:	80 8b       	std	Z+16, r24	; 0x10
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	9d 81       	ldd	r25, Y+5	; 0x05
    1560:	dc 01       	movw	r26, r24
    1562:	13 96       	adiw	r26, 0x03	; 3
    1564:	3c 93       	st	X, r19
    1566:	2e 93       	st	-X, r18
    1568:	12 97       	sbiw	r26, 0x02	; 2
    156a:	3d 83       	std	Y+5, r19	; 0x05
    156c:	2c 83       	std	Y+4, r18	; 0x04
    156e:	55 8b       	std	Z+21, r21	; 0x15
    1570:	44 8b       	std	Z+20, r20	; 0x14
    1572:	da 01       	movw	r26, r20
    1574:	8c 91       	ld	r24, X
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	8c 93       	st	X, r24
    157a:	96 89       	ldd	r25, Z+22	; 0x16
    157c:	e0 91 45 07 	lds	r30, 0x0745	; 0x800745 <pxCurrentTCB>
    1580:	f0 91 46 07 	lds	r31, 0x0746	; 0x800746 <pxCurrentTCB+0x1>
    1584:	86 89       	ldd	r24, Z+22	; 0x16
    1586:	89 17       	cp	r24, r25
    1588:	20 f4       	brcc	.+8      	; 0x1592 <xTaskRemoveFromEventList+0x172>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xYieldPending>
    1590:	01 c0       	rjmp	.+2      	; 0x1594 <xTaskRemoveFromEventList+0x174>
    1592:	80 e0       	ldi	r24, 0x00	; 0
    1594:	df 91       	pop	r29
    1596:	cf 91       	pop	r28
    1598:	08 95       	ret

0000159a <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
    159a:	20 91 d4 06 	lds	r18, 0x06D4	; 0x8006d4 <xNumOfOverflows>
    159e:	fc 01       	movw	r30, r24
    15a0:	20 83       	st	Z, r18
    pxTimeOut->xTimeOnEntering = xTickCount;
    15a2:	20 91 da 06 	lds	r18, 0x06DA	; 0x8006da <xTickCount>
    15a6:	30 91 db 06 	lds	r19, 0x06DB	; 0x8006db <xTickCount+0x1>
    15aa:	32 83       	std	Z+2, r19	; 0x02
    15ac:	21 83       	std	Z+1, r18	; 0x01
    15ae:	08 95       	ret

000015b0 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
    15b0:	1f 93       	push	r17
    15b2:	cf 93       	push	r28
    15b4:	df 93       	push	r29
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
    configASSERT( pxTicksToWait );

    taskENTER_CRITICAL();
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	0f 92       	push	r0
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
    15bc:	e0 91 da 06 	lds	r30, 0x06DA	; 0x8006da <xTickCount>
    15c0:	f0 91 db 06 	lds	r31, 0x06DB	; 0x8006db <xTickCount+0x1>
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
    15c4:	dc 01       	movw	r26, r24
    15c6:	11 96       	adiw	r26, 0x01	; 1
    15c8:	4d 91       	ld	r20, X+
    15ca:	5c 91       	ld	r21, X
    15cc:	12 97       	sbiw	r26, 0x02	; 2
    15ce:	df 01       	movw	r26, r30
    15d0:	a4 1b       	sub	r26, r20
    15d2:	b5 0b       	sbc	r27, r21
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
    15d4:	eb 01       	movw	r28, r22
    15d6:	28 81       	ld	r18, Y
    15d8:	39 81       	ldd	r19, Y+1	; 0x01
    15da:	2f 3f       	cpi	r18, 0xFF	; 255
    15dc:	df ef       	ldi	r29, 0xFF	; 255
    15de:	3d 07       	cpc	r19, r29
    15e0:	f9 f0       	breq	.+62     	; 0x1620 <xTaskCheckForTimeOut+0x70>
                xReturn = pdFALSE;
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
    15e2:	ec 01       	movw	r28, r24
    15e4:	18 81       	ld	r17, Y
    15e6:	c0 91 d4 06 	lds	r28, 0x06D4	; 0x8006d4 <xNumOfOverflows>
    15ea:	1c 17       	cp	r17, r28
    15ec:	41 f0       	breq	.+16     	; 0x15fe <xTaskCheckForTimeOut+0x4e>
    15ee:	e4 17       	cp	r30, r20
    15f0:	f5 07       	cpc	r31, r21
    15f2:	28 f0       	brcs	.+10     	; 0x15fe <xTaskCheckForTimeOut+0x4e>
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
            *pxTicksToWait = ( TickType_t ) 0;
    15f4:	fb 01       	movw	r30, r22
    15f6:	11 82       	std	Z+1, r1	; 0x01
    15f8:	10 82       	st	Z, r1
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
    15fa:	81 e0       	ldi	r24, 0x01	; 1
            *pxTicksToWait = ( TickType_t ) 0;
    15fc:	12 c0       	rjmp	.+36     	; 0x1622 <xTaskCheckForTimeOut+0x72>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
    15fe:	a2 17       	cp	r26, r18
    1600:	b3 07       	cpc	r27, r19
    1602:	48 f4       	brcc	.+18     	; 0x1616 <xTaskCheckForTimeOut+0x66>
    1604:	fb 01       	movw	r30, r22
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
    1606:	2a 1b       	sub	r18, r26
    1608:	3b 0b       	sbc	r19, r27
    160a:	31 83       	std	Z+1, r19	; 0x01
    160c:	20 83       	st	Z, r18
            vTaskInternalSetTimeOutState( pxTimeOut );
    160e:	0e 94 cd 0a 	call	0x159a	; 0x159a <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	06 c0       	rjmp	.+12     	; 0x1622 <xTaskCheckForTimeOut+0x72>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
    1616:	db 01       	movw	r26, r22
    1618:	1d 92       	st	X+, r1
    161a:	1c 92       	st	X, r1
            xReturn = pdTRUE;
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	01 c0       	rjmp	.+2      	; 0x1622 <xTaskCheckForTimeOut+0x72>
            if( *pxTicksToWait == portMAX_DELAY )
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
    1620:	80 e0       	ldi	r24, 0x00	; 0
        {
            *pxTicksToWait = ( TickType_t ) 0;
            xReturn = pdTRUE;
        }
    }
    taskEXIT_CRITICAL();
    1622:	0f 90       	pop	r0
    1624:	0f be       	out	0x3f, r0	; 63

    return xReturn;
}
    1626:	df 91       	pop	r29
    1628:	cf 91       	pop	r28
    162a:	1f 91       	pop	r17
    162c:	08 95       	ret

0000162e <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    xYieldPending = pdTRUE;
    162e:	81 e0       	ldi	r24, 0x01	; 1
    1630:	80 93 d5 06 	sts	0x06D5, r24	; 0x8006d5 <xYieldPending>
    1634:	08 95       	ret

00001636 <TempNotificatonRead>:

		vTaskDelay(1000);		
	}
}
void TempNotificatonRead(u16 local_tempread)
{
    1636:	cf 93       	push	r28
    1638:	df 93       	push	r29
    163a:	ec 01       	movw	r28, r24
	xSemaphoreGive(TEMPSemaphore);
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	60 e0       	ldi	r22, 0x00	; 0
    1644:	70 e0       	ldi	r23, 0x00	; 0
    1646:	80 91 54 07 	lds	r24, 0x0754	; 0x800754 <TEMPSemaphore>
    164a:	90 91 55 07 	lds	r25, 0x0755	; 0x800755 <TEMPSemaphore+0x1>
    164e:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
	local_tempread=(local_tempread*500)/1023;
    1652:	24 ef       	ldi	r18, 0xF4	; 244
    1654:	31 e0       	ldi	r19, 0x01	; 1
    1656:	c2 9f       	mul	r28, r18
    1658:	c0 01       	movw	r24, r0
    165a:	c3 9f       	mul	r28, r19
    165c:	90 0d       	add	r25, r0
    165e:	d2 9f       	mul	r29, r18
    1660:	90 0d       	add	r25, r0
    1662:	11 24       	eor	r1, r1
    1664:	6f ef       	ldi	r22, 0xFF	; 255
    1666:	73 e0       	ldi	r23, 0x03	; 3
    1668:	0e 94 81 15 	call	0x2b02	; 0x2b02 <__udivmodhi4>
	TEMP_READ=local_tempread;
    166c:	70 93 4a 07 	sts	0x074A, r23	; 0x80074a <TEMP_READ+0x1>
    1670:	60 93 49 07 	sts	0x0749, r22	; 0x800749 <TEMP_READ>
	TempFlag=1;
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	90 93 48 07 	sts	0x0748, r25	; 0x800748 <TempFlag+0x1>
    167c:	80 93 47 07 	sts	0x0747, r24	; 0x800747 <TempFlag>
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <INIT_Task>:
	return 0;
}

void  INIT_Task (void *pv)
{
	if(xSemaphoreTake(LCD_Semaphore,portMAX_DELAY) == pdPASS)
    1686:	6f ef       	ldi	r22, 0xFF	; 255
    1688:	7f ef       	ldi	r23, 0xFF	; 255
    168a:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    168e:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    1692:	0e 94 49 04 	call	0x892	; 0x892 <xQueueSemaphoreTake>
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	71 f4       	brne	.+28     	; 0x16b6 <INIT_Task+0x30>
	{
		LCD_voidInit();
    169a:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <LCD_voidInit>
		LCD_voidSetCursor(4,0);	
    169e:	60 e0       	ldi	r22, 0x00	; 0
    16a0:	84 e0       	ldi	r24, 0x04	; 4
    16a2:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>
		LCD_voidWriteString("WELCOME");	
    16a6:	88 e6       	ldi	r24, 0x68	; 104
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
		vTaskDelay(300);			
    16ae:	8c e2       	ldi	r24, 0x2C	; 44
    16b0:	91 e0       	ldi	r25, 0x01	; 1
    16b2:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
	}
	xSemaphoreGive(LCD_Semaphore);	
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	60 e0       	ldi	r22, 0x00	; 0
    16be:	70 e0       	ldi	r23, 0x00	; 0
    16c0:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    16c4:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    16c8:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
	vTaskDelete(NULL);	
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 1b 07 	call	0xe36	; 0xe36 <vTaskDelete>
    16d4:	08 95       	ret

000016d6 <Lcd_Task>:
{
	u8 lcd_semphore_state=0;
	u8 TEMP_semphore_state=0;	
	while(1)
	{		
		lcd_semphore_state=xSemaphoreTake(LCD_Semaphore,portMAX_DELAY);		
    16d6:	6f ef       	ldi	r22, 0xFF	; 255
    16d8:	7f ef       	ldi	r23, 0xFF	; 255
    16da:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    16de:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    16e2:	0e 94 49 04 	call	0x892	; 0x892 <xQueueSemaphoreTake>
	    if(lcd_semphore_state == pdPASS)
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	31 f4       	brne	.+12     	; 0x16f6 <Lcd_Task+0x20>
	    {			
		 ADC_SetCallBack(TempNotificatonRead);
    16ea:	8b e1       	ldi	r24, 0x1B	; 27
    16ec:	9b e0       	ldi	r25, 0x0B	; 11
    16ee:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <ADC_SetCallBack>
		 ADC_AScyn();
    16f2:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <ADC_AScyn>
		// xSemaphoreGive(LCD_Semaphore);
	    }
		 vTaskDelay(250);
    16f6:	8a ef       	ldi	r24, 0xFA	; 250
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
	}		
    16fe:	eb cf       	rjmp	.-42     	; 0x16d6 <Lcd_Task>

00001700 <Buzzer_Task>:

void  Buzzer_Task (void *pv)
{
	while (1)
	{
		if (Buzzer_Flag==1)
    1700:	80 91 4b 07 	lds	r24, 0x074B	; 0x80074b <Buzzer_Flag>
    1704:	81 30       	cpi	r24, 0x01	; 1
    1706:	b1 f4       	brne	.+44     	; 0x1734 <Buzzer_Task+0x34>
		{
			LCD_voidClear();
    1708:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
			LCD_voidWriteString("WARNING");
    170c:	80 e7       	ldi	r24, 0x70	; 112
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			DIO_WritrPin(BUZZER_PIN,PIN_OUT_HIGH);
    1714:	61 e0       	ldi	r22, 0x01	; 1
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
			vTaskDelay(1000);
    171c:	88 ee       	ldi	r24, 0xE8	; 232
    171e:	93 e0       	ldi	r25, 0x03	; 3
    1720:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
			Buzzer_Flag=0;
    1724:	10 92 4b 07 	sts	0x074B, r1	; 0x80074b <Buzzer_Flag>
			DIO_WritrPin(BUZZER_PIN,PIN_OUT_LOW);
    1728:	60 e0       	ldi	r22, 0x00	; 0
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
			LCD_voidClear();
    1730:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
		}
		vTaskDelay(500);
    1734:	84 ef       	ldi	r24, 0xF4	; 244
    1736:	91 e0       	ldi	r25, 0x01	; 1
    1738:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
	}
    173c:	e1 cf       	rjmp	.-62     	; 0x1700 <Buzzer_Task>

0000173e <Fan_Task>:
}
void  Fan_Task(void *pv)
{
	u16 Last_Temp_Read=0;  /*variable store the current read then compare it with the last new read to save the cpu load in case equal reading */
    173e:	c0 e0       	ldi	r28, 0x00	; 0
    1740:	d0 e0       	ldi	r29, 0x00	; 0
	while (1)
	{
		if ((TempFlag==1 )&&(TEMP_READ!=Last_Temp_Read))
    1742:	80 91 47 07 	lds	r24, 0x0747	; 0x800747 <TempFlag>
    1746:	90 91 48 07 	lds	r25, 0x0748	; 0x800748 <TempFlag+0x1>
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	09 f0       	breq	.+2      	; 0x1750 <Fan_Task+0x12>
    174e:	65 c0       	rjmp	.+202    	; 0x181a <Fan_Task+0xdc>
    1750:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    1754:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    1758:	c8 17       	cp	r28, r24
    175a:	d9 07       	cpc	r29, r25
    175c:	09 f4       	brne	.+2      	; 0x1760 <Fan_Task+0x22>
    175e:	5d c0       	rjmp	.+186    	; 0x181a <Fan_Task+0xdc>
		{
			LCD_voidClear();	
    1760:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
			LCD_voidWriteString("ROOM TEMP ");
    1764:	88 e7       	ldi	r24, 0x78	; 120
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			lcd_voidSendNumber(&TEMP_READ);
    176c:	89 e4       	ldi	r24, 0x49	; 73
    176e:	97 e0       	ldi	r25, 0x07	; 7
    1770:	0e 94 47 0f 	call	0x1e8e	; 0x1e8e <lcd_voidSendNumber>
			LCD_voidSetCursor(1,1);
    1774:	61 e0       	ldi	r22, 0x01	; 1
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>
			LCD_voidWriteString("FAN SPEED ");
    177c:	83 e8       	ldi	r24, 0x83	; 131
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			if (TEMP_READ<=20)
    1784:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    1788:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    178c:	45 97       	sbiw	r24, 0x15	; 21
    178e:	4c f4       	brge	.+18     	; 0x17a2 <Fan_Task+0x64>
			{
				LCD_voidWriteString("OFF");
    1790:	8e e8       	ldi	r24, 0x8E	; 142
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
				TIMER2_voidSetCTC(0);				
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	0e 94 60 14 	call	0x28c0	; 0x28c0 <TIMER2_voidSetCTC>
    17a0:	38 c0       	rjmp	.+112    	; 0x1812 <Fan_Task+0xd4>
			}			
			else if (20<TEMP_READ&&TEMP_READ<=30)
    17a2:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    17a6:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    17aa:	45 97       	sbiw	r24, 0x15	; 21
    17ac:	7c f0       	brlt	.+30     	; 0x17cc <Fan_Task+0x8e>
    17ae:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    17b2:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    17b6:	4f 97       	sbiw	r24, 0x1f	; 31
    17b8:	4c f4       	brge	.+18     	; 0x17cc <Fan_Task+0x8e>
			{
				LCD_voidWriteString("50%");
    17ba:	82 e9       	ldi	r24, 0x92	; 146
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
				TIMER2_voidSetCTC(128);				
    17c2:	80 e8       	ldi	r24, 0x80	; 128
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	0e 94 60 14 	call	0x28c0	; 0x28c0 <TIMER2_voidSetCTC>
			{
				LCD_voidWriteString("OFF");
				TIMER2_voidSetCTC(0);				
			}			
			else if (20<TEMP_READ&&TEMP_READ<=30)
			{
    17ca:	23 c0       	rjmp	.+70     	; 0x1812 <Fan_Task+0xd4>
				LCD_voidWriteString("50%");
				TIMER2_voidSetCTC(128);				
			}
			else if (30<TEMP_READ&&TEMP_READ<=35)
    17cc:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    17d0:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    17d4:	4f 97       	sbiw	r24, 0x1f	; 31
    17d6:	7c f0       	brlt	.+30     	; 0x17f6 <Fan_Task+0xb8>
    17d8:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    17dc:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    17e0:	84 97       	sbiw	r24, 0x24	; 36
    17e2:	4c f4       	brge	.+18     	; 0x17f6 <Fan_Task+0xb8>
			{
				LCD_voidWriteString("75%");
    17e4:	86 e9       	ldi	r24, 0x96	; 150
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
				TIMER2_voidSetCTC(200);					
    17ec:	88 ec       	ldi	r24, 0xC8	; 200
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	0e 94 60 14 	call	0x28c0	; 0x28c0 <TIMER2_voidSetCTC>
			{
				LCD_voidWriteString("50%");
				TIMER2_voidSetCTC(128);				
			}
			else if (30<TEMP_READ&&TEMP_READ<=35)
			{
    17f4:	0e c0       	rjmp	.+28     	; 0x1812 <Fan_Task+0xd4>
				LCD_voidWriteString("75%");
				TIMER2_voidSetCTC(200);					
			}
			else if (TEMP_READ>35)
    17f6:	80 91 49 07 	lds	r24, 0x0749	; 0x800749 <TEMP_READ>
    17fa:	90 91 4a 07 	lds	r25, 0x074A	; 0x80074a <TEMP_READ+0x1>
    17fe:	84 97       	sbiw	r24, 0x24	; 36
    1800:	44 f0       	brlt	.+16     	; 0x1812 <Fan_Task+0xd4>
			{
				LCD_voidWriteString("100%");
    1802:	8a e9       	ldi	r24, 0x9A	; 154
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			    TIMER2_voidSetCTC(255);	
    180a:	8f ef       	ldi	r24, 0xFF	; 255
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	0e 94 60 14 	call	0x28c0	; 0x28c0 <TIMER2_voidSetCTC>
			}
			Last_Temp_Read=TEMP_READ;	
    1812:	c0 91 49 07 	lds	r28, 0x0749	; 0x800749 <TEMP_READ>
    1816:	d0 91 4a 07 	lds	r29, 0x074A	; 0x80074a <TEMP_READ+0x1>
		  }
			TempFlag=0;
    181a:	10 92 48 07 	sts	0x0748, r1	; 0x800748 <TempFlag+0x1>
    181e:	10 92 47 07 	sts	0x0747, r1	; 0x800747 <TempFlag>

		vTaskDelay(1000);		
    1822:	88 ee       	ldi	r24, 0xE8	; 232
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
	}
    182a:	8b cf       	rjmp	.-234    	; 0x1742 <Fan_Task+0x4>

0000182c <main>:

int main(void)
{
	
/*intialization some of resources*/
	Port_setPinDirection(BUZZER_PIN,PIN_OUTPUT);
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	Port_setPinDirection(PORTD_PIN7,PIN_OUTPUT);
    1834:	61 e0       	ldi	r22, 0x01	; 1
    1836:	8f e1       	ldi	r24, 0x1F	; 31
    1838:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	KEYPAD_voidInit();			
    183c:	0e 94 36 0d 	call	0x1a6c	; 0x1a6c <KEYPAD_voidInit>
	ADC_voidInit();				/*ADC for receive read from temp sensor lm35*/
    1840:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <ADC_voidInit>
	TIMER2_voidInit();			/*timer2 resposable out pwm on fan depend on room temp */
    1844:	0e 94 4c 14 	call	0x2898	; 0x2898 <TIMER2_voidInit>
	Global_Interrupt_EnablE();	/*ENABLE global interupt*/
    1848:	0e 94 60 11 	call	0x22c0	; 0x22c0 <Global_Interrupt_EnablE>
	
/* semphore creation and intialization preferely to give semphore after creation */
	LCD_Semaphore=xSemaphoreCreateBinary();
    184c:	43 e0       	ldi	r20, 0x03	; 3
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	0e 94 76 03 	call	0x6ec	; 0x6ec <xQueueGenericCreate>
    1856:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <LCD_Semaphore+0x1>
    185a:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <LCD_Semaphore>
	xSemaphoreGive(LCD_Semaphore);
    185e:	20 e0       	ldi	r18, 0x00	; 0
    1860:	40 e0       	ldi	r20, 0x00	; 0
    1862:	50 e0       	ldi	r21, 0x00	; 0
    1864:	60 e0       	ldi	r22, 0x00	; 0
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
	TEMPSemaphore=xSemaphoreCreateBinary();
    186c:	43 e0       	ldi	r20, 0x03	; 3
    186e:	60 e0       	ldi	r22, 0x00	; 0
    1870:	81 e0       	ldi	r24, 0x01	; 1
    1872:	0e 94 76 03 	call	0x6ec	; 0x6ec <xQueueGenericCreate>
    1876:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <TEMPSemaphore+0x1>
    187a:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <TEMPSemaphore>
	xSemaphoreGive(TEMPSemaphore);
    187e:	20 e0       	ldi	r18, 0x00	; 0
    1880:	40 e0       	ldi	r20, 0x00	; 0
    1882:	50 e0       	ldi	r21, 0x00	; 0
    1884:	60 e0       	ldi	r22, 0x00	; 0
    1886:	70 e0       	ldi	r23, 0x00	; 0
    1888:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
	
/*create tasks*/
	xTaskCreate(INIT_Task,(const signed char *)"Init",150,NULL,5,NULL);
    188c:	e1 2c       	mov	r14, r1
    188e:	f1 2c       	mov	r15, r1
    1890:	05 e0       	ldi	r16, 0x05	; 5
    1892:	20 e0       	ldi	r18, 0x00	; 0
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	46 e9       	ldi	r20, 0x96	; 150
    1898:	50 e0       	ldi	r21, 0x00	; 0
    189a:	6f e9       	ldi	r22, 0x9F	; 159
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	83 e4       	ldi	r24, 0x43	; 67
    18a0:	9b e0       	ldi	r25, 0x0B	; 11
    18a2:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
	xTaskCreate(KeyPad_Task,(const signed char *)"Task1",150,NULL,4,KeyPad_Task_Hadler);
    18a6:	e0 90 52 07 	lds	r14, 0x0752	; 0x800752 <KeyPad_Task_Hadler>
    18aa:	f0 90 53 07 	lds	r15, 0x0753	; 0x800753 <KeyPad_Task_Hadler+0x1>
    18ae:	04 e0       	ldi	r16, 0x04	; 4
    18b0:	20 e0       	ldi	r18, 0x00	; 0
    18b2:	30 e0       	ldi	r19, 0x00	; 0
    18b4:	46 e9       	ldi	r20, 0x96	; 150
    18b6:	50 e0       	ldi	r21, 0x00	; 0
    18b8:	64 ea       	ldi	r22, 0xA4	; 164
    18ba:	70 e0       	ldi	r23, 0x00	; 0
    18bc:	8d ea       	ldi	r24, 0xAD	; 173
    18be:	9c e0       	ldi	r25, 0x0C	; 12
    18c0:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
	xTaskCreate(Lcd_Task,(const signed char *)"Task2",150,NULL,3,Lcd_Task_Hadler);	
    18c4:	e0 90 50 07 	lds	r14, 0x0750	; 0x800750 <Lcd_Task_Hadler>
    18c8:	f0 90 51 07 	lds	r15, 0x0751	; 0x800751 <Lcd_Task_Hadler+0x1>
    18cc:	03 e0       	ldi	r16, 0x03	; 3
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	46 e9       	ldi	r20, 0x96	; 150
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	6a ea       	ldi	r22, 0xAA	; 170
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	8b e6       	ldi	r24, 0x6B	; 107
    18dc:	9b e0       	ldi	r25, 0x0B	; 11
    18de:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
	xTaskCreate(Buzzer_Task,(const signed char *)"Task3",150,NULL,4,Buzzer_Task_Hadler);
    18e2:	e0 90 4e 07 	lds	r14, 0x074E	; 0x80074e <Buzzer_Task_Hadler>
    18e6:	f0 90 4f 07 	lds	r15, 0x074F	; 0x80074f <Buzzer_Task_Hadler+0x1>
    18ea:	04 e0       	ldi	r16, 0x04	; 4
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	46 e9       	ldi	r20, 0x96	; 150
    18f2:	50 e0       	ldi	r21, 0x00	; 0
    18f4:	60 eb       	ldi	r22, 0xB0	; 176
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	80 e8       	ldi	r24, 0x80	; 128
    18fa:	9b e0       	ldi	r25, 0x0B	; 11
    18fc:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
	xTaskCreate(Fan_Task,(const signed char *)"Task4",150,NULL,2,Fan_Task_Hadler);
    1900:	e0 90 4c 07 	lds	r14, 0x074C	; 0x80074c <Fan_Task_Hadler>
    1904:	f0 90 4d 07 	lds	r15, 0x074D	; 0x80074d <Fan_Task_Hadler+0x1>
    1908:	02 e0       	ldi	r16, 0x02	; 2
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	46 e9       	ldi	r20, 0x96	; 150
    1910:	50 e0       	ldi	r21, 0x00	; 0
    1912:	66 eb       	ldi	r22, 0xB6	; 182
    1914:	70 e0       	ldi	r23, 0x00	; 0
    1916:	8f e9       	ldi	r24, 0x9F	; 159
    1918:	9b e0       	ldi	r25, 0x0B	; 11
    191a:	0e 94 c2 06 	call	0xd84	; 0xd84 <xTaskCreate>
	vTaskStartScheduler(); 
    191e:	0e 94 73 07 	call	0xee6	; 0xee6 <vTaskStartScheduler>
    1922:	ff cf       	rjmp	.-2      	; 0x1922 <main+0xf6>

00001924 <compar_pass>:
	  }	
	}
}

u16 compar_pass(u8 arr[],u8 pass_size)
{	
    1924:	dc 01       	movw	r26, r24
	u16 check_password=0;
	for (u8 i=0;i<pass_size;i++)
    1926:	90 e0       	ldi	r25, 0x00	; 0
	}
}

u16 compar_pass(u8 arr[],u8 pass_size)
{	
	u16 check_password=0;
    1928:	20 e0       	ldi	r18, 0x00	; 0
    192a:	30 e0       	ldi	r19, 0x00	; 0
	for (u8 i=0;i<pass_size;i++)
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <compar_pass+0x2e>
	{
		check_password=check_password*10+arr[i];	
    192e:	a9 01       	movw	r20, r18
    1930:	44 0f       	add	r20, r20
    1932:	55 1f       	adc	r21, r21
    1934:	22 0f       	add	r18, r18
    1936:	33 1f       	adc	r19, r19
    1938:	22 0f       	add	r18, r18
    193a:	33 1f       	adc	r19, r19
    193c:	22 0f       	add	r18, r18
    193e:	33 1f       	adc	r19, r19
    1940:	24 0f       	add	r18, r20
    1942:	35 1f       	adc	r19, r21
    1944:	fd 01       	movw	r30, r26
    1946:	e9 0f       	add	r30, r25
    1948:	f1 1d       	adc	r31, r1
    194a:	40 81       	ld	r20, Z
    194c:	24 0f       	add	r18, r20
    194e:	31 1d       	adc	r19, r1
}

u16 compar_pass(u8 arr[],u8 pass_size)
{	
	u16 check_password=0;
	for (u8 i=0;i<pass_size;i++)
    1950:	9f 5f       	subi	r25, 0xFF	; 255
    1952:	96 17       	cp	r25, r22
    1954:	60 f3       	brcs	.-40     	; 0x192e <compar_pass+0xa>
	{
		check_password=check_password*10+arr[i];	
	}
	return check_password;

}
    1956:	c9 01       	movw	r24, r18
    1958:	08 95       	ret

0000195a <KeyPad_Task>:
	}
	xSemaphoreGive(LCD_Semaphore);	
	vTaskDelete(NULL);	
}
void  KeyPad_Task (void *pv)
{
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	00 d0       	rcall	.+0      	; 0x1960 <KeyPad_Task+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <KeyPad_Task+0x8>
    1962:	1f 92       	push	r1
    1964:	cd b7       	in	r28, 0x3d	; 61
    1966:	de b7       	in	r29, 0x3e	; 62
	u32 Entered_Pass=0;     /*var that take the return password for compare password fun */
	u8 key_pressed[4]={0};	/*array that store the entered password from the user*/	
    1968:	19 82       	std	Y+1, r1	; 0x01
    196a:	1a 82       	std	Y+2, r1	; 0x02
    196c:	1b 82       	std	Y+3, r1	; 0x03
    196e:	1c 82       	std	Y+4, r1	; 0x04
	u8 trial_enterPass=0;   /*variable that count the number of wrong password */
	u8 size_arr=0;          /*variable to caculate the size of entered password*/
	u8 Max_num_wrongPass=3; /*var that store the max number of wrong password attempt*/
	u8 entered_key=0xFF;    /*var carry that return the keypressed value*/
    1970:	8f ef       	ldi	r24, 0xFF	; 255
    1972:	8d 83       	std	Y+5, r24	; 0x05
}
void  KeyPad_Task (void *pv)
{
	u32 Entered_Pass=0;     /*var that take the return password for compare password fun */
	u8 key_pressed[4]={0};	/*array that store the entered password from the user*/	
	u8 trial_enterPass=0;   /*variable that count the number of wrong password */
    1974:	00 e0       	ldi	r16, 0x00	; 0
	u8 entered_key=0xFF;    /*var carry that return the keypressed value*/

	while(1)
	{

		if(xSemaphoreTake(LCD_Semaphore,portMAX_DELAY) == pdPASS)
    1976:	6f ef       	ldi	r22, 0xFF	; 255
    1978:	7f ef       	ldi	r23, 0xFF	; 255
    197a:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    197e:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    1982:	0e 94 49 04 	call	0x892	; 0x892 <xQueueSemaphoreTake>
    1986:	81 30       	cpi	r24, 0x01	; 1
    1988:	b1 f7       	brne	.-20     	; 0x1976 <KeyPad_Task+0x1c>
		{
		LCD_voidClear();
    198a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
		LCD_voidWriteString("Enter password ");					
    198e:	8c eb       	ldi	r24, 0xBC	; 188
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
		for (u8 i=0;i<4;i++)
    1996:	10 e0       	ldi	r17, 0x00	; 0
    1998:	14 c0       	rjmp	.+40     	; 0x19c2 <KeyPad_Task+0x68>
		{
			while (entered_key==0xFF)
			{
		    	KEYPAD_FindKey(&entered_key);				
    199a:	ce 01       	movw	r24, r28
    199c:	05 96       	adiw	r24, 0x05	; 5
    199e:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <KEYPAD_FindKey>
		{
		LCD_voidClear();
		LCD_voidWriteString("Enter password ");					
		for (u8 i=0;i<4;i++)
		{
			while (entered_key==0xFF)
    19a2:	8d 81       	ldd	r24, Y+5	; 0x05
    19a4:	8f 3f       	cpi	r24, 0xFF	; 255
    19a6:	c9 f3       	breq	.-14     	; 0x199a <KeyPad_Task+0x40>
			{
		    	KEYPAD_FindKey(&entered_key);				
			}
			key_pressed[i]=entered_key;			
    19a8:	e1 e0       	ldi	r30, 0x01	; 1
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	ec 0f       	add	r30, r28
    19ae:	fd 1f       	adc	r31, r29
    19b0:	e1 0f       	add	r30, r17
    19b2:	f1 1d       	adc	r31, r1
    19b4:	80 83       	st	Z, r24
			entered_key=0xFF;
    19b6:	9f ef       	ldi	r25, 0xFF	; 255
    19b8:	9d 83       	std	Y+5, r25	; 0x05
			LCD_voidWriteCharacter(key_pressed[i]+'0');		
    19ba:	80 5d       	subi	r24, 0xD0	; 208
    19bc:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_voidWriteCharacter>

		if(xSemaphoreTake(LCD_Semaphore,portMAX_DELAY) == pdPASS)
		{
		LCD_voidClear();
		LCD_voidWriteString("Enter password ");					
		for (u8 i=0;i<4;i++)
    19c0:	1f 5f       	subi	r17, 0xFF	; 255
    19c2:	14 30       	cpi	r17, 0x04	; 4
    19c4:	70 f3       	brcs	.-36     	; 0x19a2 <KeyPad_Task+0x48>
			key_pressed[i]=entered_key;			
			entered_key=0xFF;
			LCD_voidWriteCharacter(key_pressed[i]+'0');		
		}
		size_arr= (sizeof(key_pressed)/sizeof(key_pressed[0]));
		Entered_Pass=compar_pass(key_pressed,size_arr );
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	ce 01       	movw	r24, r28
    19ca:	01 96       	adiw	r24, 0x01	; 1
    19cc:	0e 94 92 0c 	call	0x1924	; 0x1924 <compar_pass>
		if (Entered_Pass==CorrectPass)
    19d0:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <CorrectPass>
    19d4:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <CorrectPass+0x1>
    19d8:	82 17       	cp	r24, r18
    19da:	93 07       	cpc	r25, r19
    19dc:	f1 f4       	brne	.+60     	; 0x1a1a <KeyPad_Task+0xc0>
		{
			vTaskDelay(100);
    19de:	84 e6       	ldi	r24, 0x64	; 100
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
			LCD_voidClear();
    19e6:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
			LCD_voidSetCursor(4,0);				
    19ea:	60 e0       	ldi	r22, 0x00	; 0
    19ec:	84 e0       	ldi	r24, 0x04	; 4
    19ee:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <LCD_voidSetCursor>
			LCD_voidWriteString("done ");	
    19f2:	8c ec       	ldi	r24, 0xCC	; 204
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			xSemaphoreGive(LCD_Semaphore);
    19fa:	20 e0       	ldi	r18, 0x00	; 0
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	60 e0       	ldi	r22, 0x00	; 0
    1a02:	70 e0       	ldi	r23, 0x00	; 0
    1a04:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    1a08:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    1a0c:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
			vTaskDelete(NULL);		
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	0e 94 1b 07 	call	0xe36	; 0xe36 <vTaskDelete>
    1a18:	16 c0       	rjmp	.+44     	; 0x1a46 <KeyPad_Task+0xec>
		} 
		else
		{
			LCD_voidClear();
    1a1a:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_voidClear>
			LCD_voidWriteString("wrong_pass");	
    1a1e:	82 ed       	ldi	r24, 0xD2	; 210
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <LCD_voidWriteString>
			vTaskDelay(250);			
    1a26:	8a ef       	ldi	r24, 0xFA	; 250
    1a28:	90 e0       	ldi	r25, 0x00	; 0
    1a2a:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
			xSemaphoreGive(LCD_Semaphore);	/*give the semaphore to enter the loop again*/	
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	40 e0       	ldi	r20, 0x00	; 0
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	60 e0       	ldi	r22, 0x00	; 0
    1a36:	70 e0       	ldi	r23, 0x00	; 0
    1a38:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    1a3c:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    1a40:	0e 94 b7 03 	call	0x76e	; 0x76e <xQueueGenericSend>
			trial_enterPass++;
    1a44:	0f 5f       	subi	r16, 0xFF	; 255
	
		}
		if (trial_enterPass==Max_num_wrongPass)
    1a46:	03 30       	cpi	r16, 0x03	; 3
    1a48:	09 f0       	breq	.+2      	; 0x1a4c <KeyPad_Task+0xf2>
    1a4a:	95 cf       	rjmp	.-214    	; 0x1976 <KeyPad_Task+0x1c>
		{
				Buzzer_Flag=1;
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	80 93 4b 07 	sts	0x074B, r24	; 0x80074b <Buzzer_Flag>
				xSemaphoreTake(LCD_Semaphore,portMAX_DELAY); //take the semphore to insure not entering in lcd task			
    1a52:	6f ef       	ldi	r22, 0xFF	; 255
    1a54:	7f ef       	ldi	r23, 0xFF	; 255
    1a56:	80 91 56 07 	lds	r24, 0x0756	; 0x800756 <LCD_Semaphore>
    1a5a:	90 91 57 07 	lds	r25, 0x0757	; 0x800757 <LCD_Semaphore+0x1>
    1a5e:	0e 94 49 04 	call	0x892	; 0x892 <xQueueSemaphoreTake>
			    vTaskDelete(NULL);					
    1a62:	80 e0       	ldi	r24, 0x00	; 0
    1a64:	90 e0       	ldi	r25, 0x00	; 0
    1a66:	0e 94 1b 07 	call	0xe36	; 0xe36 <vTaskDelete>
    1a6a:	85 cf       	rjmp	.-246    	; 0x1976 <KeyPad_Task+0x1c>

00001a6c <KEYPAD_voidInit>:



void KEYPAD_voidInit(void)
{
	Port_setPinDirection(KEY_RAW0,PIN_OUTPUT);
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	88 e0       	ldi	r24, 0x08	; 8
    1a70:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	Port_setPinDirection(KEY_RAW1,PIN_OUTPUT);
    1a74:	61 e0       	ldi	r22, 0x01	; 1
    1a76:	89 e0       	ldi	r24, 0x09	; 9
    1a78:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	Port_setPinDirection(KEY_RAW2,PIN_OUTPUT);
    1a7c:	61 e0       	ldi	r22, 0x01	; 1
    1a7e:	8a e0       	ldi	r24, 0x0A	; 10
    1a80:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	Port_setPinDirection(KEY_RAW3,PIN_OUTPUT);
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	8b e0       	ldi	r24, 0x0B	; 11
    1a88:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
	Port_SetPinMode(KEY_COL0,PIN_IN_PULLUP);
    1a8c:	63 e0       	ldi	r22, 0x03	; 3
    1a8e:	8c e0       	ldi	r24, 0x0C	; 12
    1a90:	0e 94 87 12 	call	0x250e	; 0x250e <Port_SetPinMode>
	Port_SetPinMode(KEY_COL1,PIN_IN_PULLUP);
    1a94:	63 e0       	ldi	r22, 0x03	; 3
    1a96:	8d e0       	ldi	r24, 0x0D	; 13
    1a98:	0e 94 87 12 	call	0x250e	; 0x250e <Port_SetPinMode>
	Port_SetPinMode(KEY_COL2,PIN_IN_PULLUP);
    1a9c:	63 e0       	ldi	r22, 0x03	; 3
    1a9e:	8e e0       	ldi	r24, 0x0E	; 14
    1aa0:	0e 94 87 12 	call	0x250e	; 0x250e <Port_SetPinMode>
	Port_SetPinMode(KEY_COL3,PIN_IN_PULLUP);
    1aa4:	63 e0       	ldi	r22, 0x03	; 3
    1aa6:	8f e0       	ldi	r24, 0x0F	; 15
    1aa8:	0e 94 87 12 	call	0x250e	; 0x250e <Port_SetPinMode>
    1aac:	08 95       	ret

00001aae <KEYPAD_WritrPins>:

}
void KEYPAD_WritrPins(u8 value)
{
    1aae:	cf 93       	push	r28
    1ab0:	c8 2f       	mov	r28, r24
	DIO_WritrPin(KEY_RAW0,GET_BIT(value,0));
    1ab2:	68 2f       	mov	r22, r24
    1ab4:	61 70       	andi	r22, 0x01	; 1
    1ab6:	88 e0       	ldi	r24, 0x08	; 8
    1ab8:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW1,GET_BIT(value,1));
    1abc:	c1 fb       	bst	r28, 1
    1abe:	66 27       	eor	r22, r22
    1ac0:	60 f9       	bld	r22, 0
    1ac2:	89 e0       	ldi	r24, 0x09	; 9
    1ac4:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW2,GET_BIT(value,2));
    1ac8:	c2 fb       	bst	r28, 2
    1aca:	66 27       	eor	r22, r22
    1acc:	60 f9       	bld	r22, 0
    1ace:	8a e0       	ldi	r24, 0x0A	; 10
    1ad0:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
	DIO_WritrPin(KEY_RAW3,GET_BIT(value,3));
    1ad4:	c3 fb       	bst	r28, 3
    1ad6:	66 27       	eor	r22, r22
    1ad8:	60 f9       	bld	r22, 0
    1ada:	8b e0       	ldi	r24, 0x0B	; 11
    1adc:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
}
    1ae0:	cf 91       	pop	r28
    1ae2:	08 95       	ret

00001ae4 <KEYPAD_ReadPins>:

void KEYPAD_ReadPins(u8 *value)
{
    1ae4:	0f 93       	push	r16
    1ae6:	1f 93       	push	r17
    1ae8:	cf 93       	push	r28
    1aea:	df 93       	push	r29
    1aec:	1f 92       	push	r1
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	8c 01       	movw	r16, r24
	u8 loc_read=0;
    1af4:	19 82       	std	Y+1, r1	; 0x01
	DIO_READ_PIN(KEY_COL0,&loc_read);
    1af6:	be 01       	movw	r22, r28
    1af8:	6f 5f       	subi	r22, 0xFF	; 255
    1afa:	7f 4f       	sbci	r23, 0xFF	; 255
    1afc:	8c e0       	ldi	r24, 0x0C	; 12
    1afe:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DIO_READ_PIN>
	*value=loc_read;
    1b02:	89 81       	ldd	r24, Y+1	; 0x01
    1b04:	f8 01       	movw	r30, r16
    1b06:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL1,&loc_read);
    1b08:	be 01       	movw	r22, r28
    1b0a:	6f 5f       	subi	r22, 0xFF	; 255
    1b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b0e:	8d e0       	ldi	r24, 0x0D	; 13
    1b10:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DIO_READ_PIN>
	*value|=(loc_read<<1);
    1b14:	89 81       	ldd	r24, Y+1	; 0x01
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	90 81       	ld	r25, Z
    1b20:	89 2b       	or	r24, r25
    1b22:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL2,&loc_read);
    1b24:	be 01       	movw	r22, r28
    1b26:	6f 5f       	subi	r22, 0xFF	; 255
    1b28:	7f 4f       	sbci	r23, 0xFF	; 255
    1b2a:	8e e0       	ldi	r24, 0x0E	; 14
    1b2c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DIO_READ_PIN>
	*value|=(loc_read<<2);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	88 0f       	add	r24, r24
    1b36:	99 1f       	adc	r25, r25
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	90 81       	ld	r25, Z
    1b40:	89 2b       	or	r24, r25
    1b42:	80 83       	st	Z, r24
	DIO_READ_PIN(KEY_COL3,&loc_read);
    1b44:	be 01       	movw	r22, r28
    1b46:	6f 5f       	subi	r22, 0xFF	; 255
    1b48:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4a:	8f e0       	ldi	r24, 0x0F	; 15
    1b4c:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <DIO_READ_PIN>
	*value|=(loc_read<<3);
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	88 0f       	add	r24, r24
    1b56:	99 1f       	adc	r25, r25
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	88 0f       	add	r24, r24
    1b5e:	99 1f       	adc	r25, r25
    1b60:	f8 01       	movw	r30, r16
    1b62:	90 81       	ld	r25, Z
    1b64:	89 2b       	or	r24, r25
    1b66:	80 83       	st	Z, r24
}	
    1b68:	0f 90       	pop	r0
    1b6a:	df 91       	pop	r29
    1b6c:	cf 91       	pop	r28
    1b6e:	1f 91       	pop	r17
    1b70:	0f 91       	pop	r16
    1b72:	08 95       	ret

00001b74 <KEYPAD_FindKey>:
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
    1b74:	cf 92       	push	r12
    1b76:	df 92       	push	r13
    1b78:	ef 92       	push	r14
    1b7a:	ff 92       	push	r15
    1b7c:	0f 93       	push	r16
    1b7e:	1f 93       	push	r17
    1b80:	cf 93       	push	r28
    1b82:	df 93       	push	r29
    1b84:	1f 92       	push	r1
    1b86:	cd b7       	in	r28, 0x3d	; 61
    1b88:	de b7       	in	r29, 0x3e	; 62
    1b8a:	6c 01       	movw	r12, r24
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
	    u8 temp=0b00;
    1b8c:	19 82       	std	Y+1, r1	; 0x01
	    u8 reg;
	    for(u8 i=0;i<RAW_NUM;i++)
    1b8e:	10 e0       	ldi	r17, 0x00	; 0
	DIO_READ_PIN(KEY_COL3,&loc_read);
	*value|=(loc_read<<3);
}	
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
    1b90:	00 e0       	ldi	r16, 0x00	; 0
	    u8 temp=0b00;
	    u8 reg;
	    for(u8 i=0;i<RAW_NUM;i++)
    1b92:	6d c0       	rjmp	.+218    	; 0x1c6e <KEYPAD_FindKey+0xfa>
	    {
		    reg=0x0F;
		    KEYPAD_WritrPins(TGLWITHOUTASSIGN_BIT(reg,i));
    1b94:	e1 2e       	mov	r14, r17
    1b96:	f1 2c       	mov	r15, r1
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	01 2e       	mov	r0, r17
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <KEYPAD_FindKey+0x30>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <KEYPAD_FindKey+0x2c>
    1ba8:	9f e0       	ldi	r25, 0x0F	; 15
    1baa:	89 27       	eor	r24, r25
    1bac:	0e 94 57 0d 	call	0x1aae	; 0x1aae <KEYPAD_WritrPins>
		    KEYPAD_ReadPins(&temp);
    1bb0:	ce 01       	movw	r24, r28
    1bb2:	01 96       	adiw	r24, 0x01	; 1
    1bb4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_ReadPins>
		    switch(temp)
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	8b 30       	cpi	r24, 0x0B	; 11
    1bbc:	81 f1       	breq	.+96     	; 0x1c1e <KEYPAD_FindKey+0xaa>
    1bbe:	20 f4       	brcc	.+8      	; 0x1bc8 <KEYPAD_FindKey+0x54>
    1bc0:	87 30       	cpi	r24, 0x07	; 7
    1bc2:	09 f4       	brne	.+2      	; 0x1bc6 <KEYPAD_FindKey+0x52>
    1bc4:	3f c0       	rjmp	.+126    	; 0x1c44 <KEYPAD_FindKey+0xd0>
    1bc6:	51 c0       	rjmp	.+162    	; 0x1c6a <KEYPAD_FindKey+0xf6>
    1bc8:	8d 30       	cpi	r24, 0x0D	; 13
    1bca:	b1 f0       	breq	.+44     	; 0x1bf8 <KEYPAD_FindKey+0x84>
    1bcc:	8e 30       	cpi	r24, 0x0E	; 14
    1bce:	09 f0       	breq	.+2      	; 0x1bd2 <KEYPAD_FindKey+0x5e>
    1bd0:	4c c0       	rjmp	.+152    	; 0x1c6a <KEYPAD_FindKey+0xf6>
		    {
			    case 0b1110:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+0];
    1bd2:	f7 01       	movw	r30, r14
    1bd4:	ee 0f       	add	r30, r30
    1bd6:	ff 1f       	adc	r31, r31
    1bd8:	ee 0f       	add	r30, r30
    1bda:	ff 1f       	adc	r31, r31
    1bdc:	e3 52       	subi	r30, 0x23	; 35
    1bde:	ff 4f       	sbci	r31, 0xFF	; 255
    1be0:	80 81       	ld	r24, Z
    1be2:	f6 01       	movw	r30, r12
    1be4:	80 83       	st	Z, r24
				while(temp == 0b1110)
    1be6:	04 c0       	rjmp	.+8      	; 0x1bf0 <KEYPAD_FindKey+0x7c>
				{
				KEYPAD_ReadPins(&temp);
    1be8:	ce 01       	movw	r24, r28
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_ReadPins>
		    KEYPAD_ReadPins(&temp);
		    switch(temp)
		    {
			    case 0b1110:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+0];
				while(temp == 0b1110)
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	8e 30       	cpi	r24, 0x0E	; 14
    1bf4:	c9 f3       	breq	.-14     	; 0x1be8 <KEYPAD_FindKey+0x74>
    1bf6:	3a c0       	rjmp	.+116    	; 0x1c6c <KEYPAD_FindKey+0xf8>
				{
				KEYPAD_ReadPins(&temp);
				}
			    break;
			    case 0b1101:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	ee 0f       	add	r30, r30
    1bfc:	ff 1f       	adc	r31, r31
    1bfe:	ee 0f       	add	r30, r30
    1c00:	ff 1f       	adc	r31, r31
    1c02:	e2 52       	subi	r30, 0x22	; 34
    1c04:	ff 4f       	sbci	r31, 0xFF	; 255
    1c06:	80 81       	ld	r24, Z
    1c08:	f6 01       	movw	r30, r12
    1c0a:	80 83       	st	Z, r24
				while(temp == 0b1101)				
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <KEYPAD_FindKey+0xa2>
				{
					KEYPAD_ReadPins(&temp);
    1c0e:	ce 01       	movw	r24, r28
    1c10:	01 96       	adiw	r24, 0x01	; 1
    1c12:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_ReadPins>
				KEYPAD_ReadPins(&temp);
				}
			    break;
			    case 0b1101:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+1];
				while(temp == 0b1101)				
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	8d 30       	cpi	r24, 0x0D	; 13
    1c1a:	c9 f3       	breq	.-14     	; 0x1c0e <KEYPAD_FindKey+0x9a>
    1c1c:	27 c0       	rjmp	.+78     	; 0x1c6c <KEYPAD_FindKey+0xf8>
				{
					KEYPAD_ReadPins(&temp);
				}				
			    break;
			    case 0b1011:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
    1c1e:	f7 01       	movw	r30, r14
    1c20:	ee 0f       	add	r30, r30
    1c22:	ff 1f       	adc	r31, r31
    1c24:	ee 0f       	add	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	e1 52       	subi	r30, 0x21	; 33
    1c2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c2c:	80 81       	ld	r24, Z
    1c2e:	f6 01       	movw	r30, r12
    1c30:	80 83       	st	Z, r24
				while(temp == 0b1011 )
    1c32:	04 c0       	rjmp	.+8      	; 0x1c3c <KEYPAD_FindKey+0xc8>
				{
					KEYPAD_ReadPins(&temp);
    1c34:	ce 01       	movw	r24, r28
    1c36:	01 96       	adiw	r24, 0x01	; 1
    1c38:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_ReadPins>
					KEYPAD_ReadPins(&temp);
				}				
			    break;
			    case 0b1011:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+2];
				while(temp == 0b1011 )
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	8b 30       	cpi	r24, 0x0B	; 11
    1c40:	c9 f3       	breq	.-14     	; 0x1c34 <KEYPAD_FindKey+0xc0>
    1c42:	14 c0       	rjmp	.+40     	; 0x1c6c <KEYPAD_FindKey+0xf8>
				{
					KEYPAD_ReadPins(&temp);
				}				
			    break;
			    case 0b0111:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
    1c44:	f7 01       	movw	r30, r14
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	ee 0f       	add	r30, r30
    1c4c:	ff 1f       	adc	r31, r31
    1c4e:	e0 52       	subi	r30, 0x20	; 32
    1c50:	ff 4f       	sbci	r31, 0xFF	; 255
    1c52:	80 81       	ld	r24, Z
    1c54:	f6 01       	movw	r30, r12
    1c56:	80 83       	st	Z, r24
				while(temp == 0b0111)
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <KEYPAD_FindKey+0xee>
				{
					KEYPAD_ReadPins(&temp);
    1c5a:	ce 01       	movw	r24, r28
    1c5c:	01 96       	adiw	r24, 0x01	; 1
    1c5e:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <KEYPAD_ReadPins>
					KEYPAD_ReadPins(&temp);
				}				
			    break;
			    case 0b0111:
			    *Loc_keyPress=KEYPAD_SYMBOL[(4*i)+3];
				while(temp == 0b0111)
    1c62:	89 81       	ldd	r24, Y+1	; 0x01
    1c64:	87 30       	cpi	r24, 0x07	; 7
    1c66:	c9 f3       	breq	.-14     	; 0x1c5a <KEYPAD_FindKey+0xe6>
    1c68:	01 c0       	rjmp	.+2      	; 0x1c6c <KEYPAD_FindKey+0xf8>
				{
					KEYPAD_ReadPins(&temp);
				}				
			    break;
			    default:
			    ERROR_KEYPAD_RET=NO_KEY_PRESSED;
    1c6a:	01 e0       	ldi	r16, 0x01	; 1
ERROR_KEYPAD_STATUS KEYPAD_FindKey(u8 *Loc_keyPress)
{
  ERROR_KEYPAD_STATUS ERROR_KEYPAD_RET=ERROR_FREE;
	    u8 temp=0b00;
	    u8 reg;
	    for(u8 i=0;i<RAW_NUM;i++)
    1c6c:	1f 5f       	subi	r17, 0xFF	; 255
    1c6e:	14 30       	cpi	r17, 0x04	; 4
    1c70:	08 f4       	brcc	.+2      	; 0x1c74 <KEYPAD_FindKey+0x100>
    1c72:	90 cf       	rjmp	.-224    	; 0x1b94 <KEYPAD_FindKey+0x20>
			    ERROR_KEYPAD_RET=NO_KEY_PRESSED;
		    }
	    }
	return ERROR_KEYPAD_RET;

}
    1c74:	80 2f       	mov	r24, r16
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	1f 91       	pop	r17
    1c7e:	0f 91       	pop	r16
    1c80:	ff 90       	pop	r15
    1c82:	ef 90       	pop	r14
    1c84:	df 90       	pop	r13
    1c86:	cf 90       	pop	r12
    1c88:	08 95       	ret

00001c8a <LCD_voidWriteCharacter>:
	//LCD_voidSendCommand(0x14);   //INCREAMENT CURSOR TO RIGHT
}

void Lcd_voidShiftLeft(void)
{
	LCD_voidSendCommand(0x18);
    1c8a:	cf 93       	push	r28
    1c8c:	c8 2f       	mov	r28, r24
    1c8e:	60 e0       	ldi	r22, 0x00	; 0
    1c90:	89 e1       	ldi	r24, 0x19	; 25
    1c92:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1c96:	61 e0       	ldi	r22, 0x01	; 1
    1c98:	8a e1       	ldi	r24, 0x1A	; 26
    1c9a:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1c9e:	6c 2f       	mov	r22, r28
    1ca0:	61 70       	andi	r22, 0x01	; 1
    1ca2:	80 e1       	ldi	r24, 0x10	; 16
    1ca4:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1ca8:	c1 fb       	bst	r28, 1
    1caa:	66 27       	eor	r22, r22
    1cac:	60 f9       	bld	r22, 0
    1cae:	81 e1       	ldi	r24, 0x11	; 17
    1cb0:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1cb4:	c2 fb       	bst	r28, 2
    1cb6:	66 27       	eor	r22, r22
    1cb8:	60 f9       	bld	r22, 0
    1cba:	82 e1       	ldi	r24, 0x12	; 18
    1cbc:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1cc0:	c3 fb       	bst	r28, 3
    1cc2:	66 27       	eor	r22, r22
    1cc4:	60 f9       	bld	r22, 0
    1cc6:	83 e1       	ldi	r24, 0x13	; 19
    1cc8:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1ccc:	c4 fb       	bst	r28, 4
    1cce:	66 27       	eor	r22, r22
    1cd0:	60 f9       	bld	r22, 0
    1cd2:	84 e1       	ldi	r24, 0x14	; 20
    1cd4:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1cd8:	c5 fb       	bst	r28, 5
    1cda:	66 27       	eor	r22, r22
    1cdc:	60 f9       	bld	r22, 0
    1cde:	85 e1       	ldi	r24, 0x15	; 21
    1ce0:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1ce4:	c6 fb       	bst	r28, 6
    1ce6:	66 27       	eor	r22, r22
    1ce8:	60 f9       	bld	r22, 0
    1cea:	86 e1       	ldi	r24, 0x16	; 22
    1cec:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1cf0:	6c 2f       	mov	r22, r28
    1cf2:	66 1f       	adc	r22, r22
    1cf4:	66 27       	eor	r22, r22
    1cf6:	66 1f       	adc	r22, r22
    1cf8:	87 e1       	ldi	r24, 0x17	; 23
    1cfa:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	88 e1       	ldi	r24, 0x18	; 24
    1d02:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d06:	82 e0       	ldi	r24, 0x02	; 2
    1d08:	90 e0       	ldi	r25, 0x00	; 0
    1d0a:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    1d0e:	60 e0       	ldi	r22, 0x00	; 0
    1d10:	88 e1       	ldi	r24, 0x18	; 24
    1d12:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d16:	cf 91       	pop	r28
    1d18:	08 95       	ret

00001d1a <LCD_voidSendCommand>:
    1d1a:	cf 93       	push	r28
    1d1c:	c8 2f       	mov	r28, r24
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	8a e1       	ldi	r24, 0x1A	; 26
    1d22:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d26:	60 e0       	ldi	r22, 0x00	; 0
    1d28:	89 e1       	ldi	r24, 0x19	; 25
    1d2a:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d2e:	6c 2f       	mov	r22, r28
    1d30:	61 70       	andi	r22, 0x01	; 1
    1d32:	80 e1       	ldi	r24, 0x10	; 16
    1d34:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d38:	c1 fb       	bst	r28, 1
    1d3a:	66 27       	eor	r22, r22
    1d3c:	60 f9       	bld	r22, 0
    1d3e:	81 e1       	ldi	r24, 0x11	; 17
    1d40:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d44:	c2 fb       	bst	r28, 2
    1d46:	66 27       	eor	r22, r22
    1d48:	60 f9       	bld	r22, 0
    1d4a:	82 e1       	ldi	r24, 0x12	; 18
    1d4c:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d50:	c3 fb       	bst	r28, 3
    1d52:	66 27       	eor	r22, r22
    1d54:	60 f9       	bld	r22, 0
    1d56:	83 e1       	ldi	r24, 0x13	; 19
    1d58:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d5c:	c4 fb       	bst	r28, 4
    1d5e:	66 27       	eor	r22, r22
    1d60:	60 f9       	bld	r22, 0
    1d62:	84 e1       	ldi	r24, 0x14	; 20
    1d64:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d68:	c5 fb       	bst	r28, 5
    1d6a:	66 27       	eor	r22, r22
    1d6c:	60 f9       	bld	r22, 0
    1d6e:	85 e1       	ldi	r24, 0x15	; 21
    1d70:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d74:	c6 fb       	bst	r28, 6
    1d76:	66 27       	eor	r22, r22
    1d78:	60 f9       	bld	r22, 0
    1d7a:	86 e1       	ldi	r24, 0x16	; 22
    1d7c:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d80:	6c 2f       	mov	r22, r28
    1d82:	66 1f       	adc	r22, r22
    1d84:	66 27       	eor	r22, r22
    1d86:	66 1f       	adc	r22, r22
    1d88:	87 e1       	ldi	r24, 0x17	; 23
    1d8a:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d8e:	61 e0       	ldi	r22, 0x01	; 1
    1d90:	88 e1       	ldi	r24, 0x18	; 24
    1d92:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1d96:	8f e9       	ldi	r24, 0x9F	; 159
    1d98:	9f e0       	ldi	r25, 0x0F	; 15
    1d9a:	01 97       	sbiw	r24, 0x01	; 1
    1d9c:	f1 f7       	brne	.-4      	; 0x1d9a <LCD_voidSendCommand+0x80>
    1d9e:	00 c0       	rjmp	.+0      	; 0x1da0 <LCD_voidSendCommand+0x86>
    1da0:	00 00       	nop
    1da2:	60 e0       	ldi	r22, 0x00	; 0
    1da4:	88 e1       	ldi	r24, 0x18	; 24
    1da6:	0e 94 0f 10 	call	0x201e	; 0x201e <DIO_WritrPin>
    1daa:	8f e1       	ldi	r24, 0x1F	; 31
    1dac:	9e e4       	ldi	r25, 0x4E	; 78
    1dae:	01 97       	sbiw	r24, 0x01	; 1
    1db0:	f1 f7       	brne	.-4      	; 0x1dae <LCD_voidSendCommand+0x94>
    1db2:	00 c0       	rjmp	.+0      	; 0x1db4 <LCD_voidSendCommand+0x9a>
    1db4:	00 00       	nop
    1db6:	cf 91       	pop	r28
    1db8:	08 95       	ret

00001dba <LCD_voidInit>:
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	80 e1       	ldi	r24, 0x10	; 16
    1dbe:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	81 e1       	ldi	r24, 0x11	; 17
    1dc6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dca:	61 e0       	ldi	r22, 0x01	; 1
    1dcc:	82 e1       	ldi	r24, 0x12	; 18
    1dce:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dd2:	61 e0       	ldi	r22, 0x01	; 1
    1dd4:	83 e1       	ldi	r24, 0x13	; 19
    1dd6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dda:	61 e0       	ldi	r22, 0x01	; 1
    1ddc:	84 e1       	ldi	r24, 0x14	; 20
    1dde:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	85 e1       	ldi	r24, 0x15	; 21
    1de6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dea:	61 e0       	ldi	r22, 0x01	; 1
    1dec:	86 e1       	ldi	r24, 0x16	; 22
    1dee:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1df2:	61 e0       	ldi	r22, 0x01	; 1
    1df4:	87 e1       	ldi	r24, 0x17	; 23
    1df6:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1dfa:	61 e0       	ldi	r22, 0x01	; 1
    1dfc:	8a e1       	ldi	r24, 0x1A	; 26
    1dfe:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1e02:	61 e0       	ldi	r22, 0x01	; 1
    1e04:	89 e1       	ldi	r24, 0x19	; 25
    1e06:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1e0a:	61 e0       	ldi	r22, 0x01	; 1
    1e0c:	88 e1       	ldi	r24, 0x18	; 24
    1e0e:	0e 94 e5 11 	call	0x23ca	; 0x23ca <Port_setPinDirection>
    1e12:	88 e2       	ldi	r24, 0x28	; 40
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    1e1a:	88 e3       	ldi	r24, 0x38	; 56
    1e1c:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e20:	8e e0       	ldi	r24, 0x0E	; 14
    1e22:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 94 09 	call	0x1328	; 0x1328 <vTaskDelay>
    1e34:	8c e0       	ldi	r24, 0x0C	; 12
    1e36:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e3a:	08 95       	ret

00001e3c <LCD_voidWriteString>:
    1e3c:	cf 93       	push	r28
    1e3e:	df 93       	push	r29
    1e40:	ec 01       	movw	r28, r24
    1e42:	03 c0       	rjmp	.+6      	; 0x1e4a <LCD_voidWriteString+0xe>
    1e44:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_voidWriteCharacter>
    1e48:	21 96       	adiw	r28, 0x01	; 1
    1e4a:	88 81       	ld	r24, Y
    1e4c:	81 11       	cpse	r24, r1
    1e4e:	fa cf       	rjmp	.-12     	; 0x1e44 <LCD_voidWriteString+0x8>
    1e50:	df 91       	pop	r29
    1e52:	cf 91       	pop	r28
    1e54:	08 95       	ret

00001e56 <LCD_voidSetCursor>:
    1e56:	84 31       	cpi	r24, 0x14	; 20
    1e58:	a8 f4       	brcc	.+42     	; 0x1e84 <LCD_voidSetCursor+0x2e>
    1e5a:	64 30       	cpi	r22, 0x04	; 4
    1e5c:	98 f4       	brcc	.+38     	; 0x1e84 <LCD_voidSetCursor+0x2e>
    1e5e:	61 30       	cpi	r22, 0x01	; 1
    1e60:	39 f0       	breq	.+14     	; 0x1e70 <LCD_voidSetCursor+0x1a>
    1e62:	60 f0       	brcs	.+24     	; 0x1e7c <LCD_voidSetCursor+0x26>
    1e64:	62 30       	cpi	r22, 0x02	; 2
    1e66:	31 f0       	breq	.+12     	; 0x1e74 <LCD_voidSetCursor+0x1e>
    1e68:	63 30       	cpi	r22, 0x03	; 3
    1e6a:	31 f0       	breq	.+12     	; 0x1e78 <LCD_voidSetCursor+0x22>
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	07 c0       	rjmp	.+14     	; 0x1e7e <LCD_voidSetCursor+0x28>
    1e70:	90 ec       	ldi	r25, 0xC0	; 192
    1e72:	05 c0       	rjmp	.+10     	; 0x1e7e <LCD_voidSetCursor+0x28>
    1e74:	94 e9       	ldi	r25, 0x94	; 148
    1e76:	03 c0       	rjmp	.+6      	; 0x1e7e <LCD_voidSetCursor+0x28>
    1e78:	94 ed       	ldi	r25, 0xD4	; 212
    1e7a:	01 c0       	rjmp	.+2      	; 0x1e7e <LCD_voidSetCursor+0x28>
    1e7c:	90 e8       	ldi	r25, 0x80	; 128
    1e7e:	89 0f       	add	r24, r25
    1e80:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e84:	08 95       	ret

00001e86 <LCD_voidClear>:
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 8d 0e 	call	0x1d1a	; 0x1d1a <LCD_voidSendCommand>
    1e8c:	08 95       	ret

00001e8e <lcd_voidSendNumber>:
}
void lcd_voidSendNumber   ( u16 *Copynum2)
{
    1e8e:	cf 93       	push	r28
    1e90:	df 93       	push	r29
u16	Copynum=*Copynum2;
    1e92:	fc 01       	movw	r30, r24
    1e94:	40 81       	ld	r20, Z
    1e96:	51 81       	ldd	r21, Z+1	; 0x01
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
    1e98:	41 15       	cp	r20, r1
    1e9a:	51 05       	cpc	r21, r1
    1e9c:	a9 f5       	brne	.+106    	; 0x1f08 <lcd_voidSendNumber+0x7a>
    1e9e:	80 e3       	ldi	r24, 0x30	; 48
    1ea0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_voidWriteCharacter>
    1ea4:	63 c0       	rjmp	.+198    	; 0x1f6c <lcd_voidSendNumber+0xde>
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	88 0f       	add	r24, r24
    1eaa:	99 1f       	adc	r25, r25
    1eac:	cc 0f       	add	r28, r28
    1eae:	dd 1f       	adc	r29, r29
    1eb0:	cc 0f       	add	r28, r28
    1eb2:	dd 1f       	adc	r29, r29
    1eb4:	cc 0f       	add	r28, r28
    1eb6:	dd 1f       	adc	r29, r29
    1eb8:	c8 0f       	add	r28, r24
    1eba:	d9 1f       	adc	r29, r25
    1ebc:	9a 01       	movw	r18, r20
    1ebe:	ad ec       	ldi	r26, 0xCD	; 205
    1ec0:	bc ec       	ldi	r27, 0xCC	; 204
    1ec2:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__umulhisi3>
    1ec6:	96 95       	lsr	r25
    1ec8:	87 95       	ror	r24
    1eca:	96 95       	lsr	r25
    1ecc:	87 95       	ror	r24
    1ece:	96 95       	lsr	r25
    1ed0:	87 95       	ror	r24
    1ed2:	9c 01       	movw	r18, r24
    1ed4:	22 0f       	add	r18, r18
    1ed6:	33 1f       	adc	r19, r19
    1ed8:	88 0f       	add	r24, r24
    1eda:	99 1f       	adc	r25, r25
    1edc:	88 0f       	add	r24, r24
    1ede:	99 1f       	adc	r25, r25
    1ee0:	88 0f       	add	r24, r24
    1ee2:	99 1f       	adc	r25, r25
    1ee4:	82 0f       	add	r24, r18
    1ee6:	93 1f       	adc	r25, r19
    1ee8:	9a 01       	movw	r18, r20
    1eea:	28 1b       	sub	r18, r24
    1eec:	39 0b       	sbc	r19, r25
    1eee:	c2 0f       	add	r28, r18
    1ef0:	d3 1f       	adc	r29, r19
		Copynum /= 10 ;
    1ef2:	9a 01       	movw	r18, r20
    1ef4:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__umulhisi3>
    1ef8:	ac 01       	movw	r20, r24
    1efa:	56 95       	lsr	r21
    1efc:	47 95       	ror	r20
    1efe:	56 95       	lsr	r21
    1f00:	47 95       	ror	r20
    1f02:	56 95       	lsr	r21
    1f04:	47 95       	ror	r20
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <lcd_voidSendNumber+0x7e>
    1f08:	c1 e0       	ldi	r28, 0x01	; 1
    1f0a:	d0 e0       	ldi	r29, 0x00	; 0
{
u16	Copynum=*Copynum2;
u16 LOC_u64Reversed = 1 ;
if( Copynum == 0 ){ LCD_voidWriteCharacter('0'); }
else{
	while( Copynum != 0 ){
    1f0c:	41 15       	cp	r20, r1
    1f0e:	51 05       	cpc	r21, r1
    1f10:	51 f6       	brne	.-108    	; 0x1ea6 <lcd_voidSendNumber+0x18>
    1f12:	29 c0       	rjmp	.+82     	; 0x1f66 <lcd_voidSendNumber+0xd8>
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
    1f14:	9e 01       	movw	r18, r28
    1f16:	ad ec       	ldi	r26, 0xCD	; 205
    1f18:	bc ec       	ldi	r27, 0xCC	; 204
    1f1a:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__umulhisi3>
    1f1e:	96 95       	lsr	r25
    1f20:	87 95       	ror	r24
    1f22:	96 95       	lsr	r25
    1f24:	87 95       	ror	r24
    1f26:	96 95       	lsr	r25
    1f28:	87 95       	ror	r24
    1f2a:	9c 01       	movw	r18, r24
    1f2c:	22 0f       	add	r18, r18
    1f2e:	33 1f       	adc	r19, r19
    1f30:	88 0f       	add	r24, r24
    1f32:	99 1f       	adc	r25, r25
    1f34:	88 0f       	add	r24, r24
    1f36:	99 1f       	adc	r25, r25
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	82 0f       	add	r24, r18
    1f3e:	93 1f       	adc	r25, r19
    1f40:	fe 01       	movw	r30, r28
    1f42:	e8 1b       	sub	r30, r24
    1f44:	f9 0b       	sbc	r31, r25
    1f46:	cf 01       	movw	r24, r30
    1f48:	80 5d       	subi	r24, 0xD0	; 208
    1f4a:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <LCD_voidWriteCharacter>
		LOC_u64Reversed /= 10 ;
    1f4e:	9e 01       	movw	r18, r28
    1f50:	ad ec       	ldi	r26, 0xCD	; 205
    1f52:	bc ec       	ldi	r27, 0xCC	; 204
    1f54:	0e 94 95 15 	call	0x2b2a	; 0x2b2a <__umulhisi3>
    1f58:	ec 01       	movw	r28, r24
    1f5a:	d6 95       	lsr	r29
    1f5c:	c7 95       	ror	r28
    1f5e:	d6 95       	lsr	r29
    1f60:	c7 95       	ror	r28
    1f62:	d6 95       	lsr	r29
    1f64:	c7 95       	ror	r28
else{
	while( Copynum != 0 ){
		LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copynum % 10 );
		Copynum /= 10 ;
	}
	while( LOC_u64Reversed != 1 ){
    1f66:	c1 30       	cpi	r28, 0x01	; 1
    1f68:	d1 05       	cpc	r29, r1
    1f6a:	a1 f6       	brne	.-88     	; 0x1f14 <lcd_voidSendNumber+0x86>
		LCD_voidWriteCharacter( ( LOC_u64Reversed % 10 ) + 48 );
		LOC_u64Reversed /= 10 ;
	}
}

}
    1f6c:	df 91       	pop	r29
    1f6e:	cf 91       	pop	r28
    1f70:	08 95       	ret

00001f72 <ADC_voidInit>:
{
	ADC_PTRTOFUN=copy_ptrfun;	
}
void ADC_InteruptDisable(void)
{
	CLR_BIT(ADCSRA ,3);  //Bit 3 – ADIE: ADC Interrupt Enable 
    1f72:	86 b1       	in	r24, 0x06	; 6
    1f74:	80 68       	ori	r24, 0x80	; 128
    1f76:	86 b9       	out	0x06, r24	; 6
    1f78:	86 b1       	in	r24, 0x06	; 6
    1f7a:	87 60       	ori	r24, 0x07	; 7
    1f7c:	86 b9       	out	0x06, r24	; 6
    1f7e:	87 b1       	in	r24, 0x07	; 7
    1f80:	80 64       	ori	r24, 0x40	; 64
    1f82:	87 b9       	out	0x07, r24	; 7
    1f84:	87 b1       	in	r24, 0x07	; 7
    1f86:	87 b9       	out	0x07, r24	; 7
    1f88:	86 b1       	in	r24, 0x06	; 6
    1f8a:	80 62       	ori	r24, 0x20	; 32
    1f8c:	86 b9       	out	0x06, r24	; 6
    1f8e:	80 b7       	in	r24, 0x30	; 48
    1f90:	80 bf       	out	0x30, r24	; 48
    1f92:	86 b1       	in	r24, 0x06	; 6
    1f94:	88 60       	ori	r24, 0x08	; 8
    1f96:	86 b9       	out	0x06, r24	; 6
    1f98:	08 95       	ret

00001f9a <ADC_SetCallBack>:
    1f9a:	90 93 59 07 	sts	0x0759, r25	; 0x800759 <ADC_PTRTOFUN+0x1>
    1f9e:	80 93 58 07 	sts	0x0758, r24	; 0x800758 <ADC_PTRTOFUN>
    1fa2:	08 95       	ret

00001fa4 <ADC_AScyn>:
}
void ADC_AScyn(void)
{
	SET_BIT(ADCSRA ,3);  //Bit 3 – ADIE: ADC Interrupt Enable 	
    1fa4:	86 b1       	in	r24, 0x06	; 6
    1fa6:	88 60       	ori	r24, 0x08	; 8
    1fa8:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,5);	//ADATE: ADC Auto Trigger Enable pin
    1faa:	86 b1       	in	r24, 0x06	; 6
    1fac:	80 62       	ori	r24, 0x20	; 32
    1fae:	86 b9       	out	0x06, r24	; 6
	SFIOR|=(Free_Running_mode<<5);
    1fb0:	80 b7       	in	r24, 0x30	; 48
    1fb2:	80 bf       	out	0x30, r24	; 48
	ADCSRA |= (1<<ADC_START_CONVERSATIONPin);		/*6 IS  Start_conversion_pin  */	
    1fb4:	86 b1       	in	r24, 0x06	; 6
    1fb6:	80 64       	ori	r24, 0x40	; 64
    1fb8:	86 b9       	out	0x06, r24	; 6
    1fba:	08 95       	ret

00001fbc <__vector_16>:
}

void __vector_16 (void)	__attribute__((signal)) ;
void __vector_16 (void)
{
    1fbc:	1f 92       	push	r1
    1fbe:	0f 92       	push	r0
    1fc0:	0f b6       	in	r0, 0x3f	; 63
    1fc2:	0f 92       	push	r0
    1fc4:	11 24       	eor	r1, r1
    1fc6:	2f 93       	push	r18
    1fc8:	3f 93       	push	r19
    1fca:	4f 93       	push	r20
    1fcc:	5f 93       	push	r21
    1fce:	6f 93       	push	r22
    1fd0:	7f 93       	push	r23
    1fd2:	8f 93       	push	r24
    1fd4:	9f 93       	push	r25
    1fd6:	af 93       	push	r26
    1fd8:	bf 93       	push	r27
    1fda:	ef 93       	push	r30
    1fdc:	ff 93       	push	r31
		u16 loc_AdcVal = (u16)ADCL ;
    1fde:	24 b1       	in	r18, 0x04	; 4
		loc_AdcVal = loc_AdcVal+(u16)ADCH*256 ;
    1fe0:	85 b1       	in	r24, 0x05	; 5
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	98 2f       	mov	r25, r24
    1fe6:	88 27       	eor	r24, r24
    	ADC_PTRTOFUN(loc_AdcVal);
    1fe8:	e0 91 58 07 	lds	r30, 0x0758	; 0x800758 <ADC_PTRTOFUN>
    1fec:	f0 91 59 07 	lds	r31, 0x0759	; 0x800759 <ADC_PTRTOFUN+0x1>
    1ff0:	82 0f       	add	r24, r18
    1ff2:	91 1d       	adc	r25, r1
    1ff4:	09 95       	icall
		SET_BIT(ADCSRA,ADC_START_CONVERSATIONPin);
    1ff6:	86 b1       	in	r24, 0x06	; 6
    1ff8:	80 64       	ori	r24, 0x40	; 64
    1ffa:	86 b9       	out	0x06, r24	; 6
}
    1ffc:	ff 91       	pop	r31
    1ffe:	ef 91       	pop	r30
    2000:	bf 91       	pop	r27
    2002:	af 91       	pop	r26
    2004:	9f 91       	pop	r25
    2006:	8f 91       	pop	r24
    2008:	7f 91       	pop	r23
    200a:	6f 91       	pop	r22
    200c:	5f 91       	pop	r21
    200e:	4f 91       	pop	r20
    2010:	3f 91       	pop	r19
    2012:	2f 91       	pop	r18
    2014:	0f 90       	pop	r0
    2016:	0f be       	out	0x3f, r0	; 63
    2018:	0f 90       	pop	r0
    201a:	1f 90       	pop	r1
    201c:	18 95       	reti

0000201e <DIO_WritrPin>:
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
    201e:	80 32       	cpi	r24, 0x20	; 32
    2020:	08 f0       	brcs	.+2      	; 0x2024 <DIO_WritrPin+0x6>
    2022:	be c0       	rjmp	.+380    	; 0x21a0 <DIO_WritrPin+0x182>
{
	ERROR_LOCRET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{	
	u8 loc_pin_id =pin_id % 8;
    2024:	98 2f       	mov	r25, r24
    2026:	97 70       	andi	r25, 0x07	; 7

	u8 loc_port_num=pin_id/8;
    2028:	86 95       	lsr	r24
    202a:	86 95       	lsr	r24
    202c:	86 95       	lsr	r24
	switch(loc_port_num)
    202e:	81 30       	cpi	r24, 0x01	; 1
    2030:	a1 f1       	breq	.+104    	; 0x209a <DIO_WritrPin+0x7c>
    2032:	38 f0       	brcs	.+14     	; 0x2042 <DIO_WritrPin+0x24>
    2034:	82 30       	cpi	r24, 0x02	; 2
    2036:	09 f4       	brne	.+2      	; 0x203a <DIO_WritrPin+0x1c>
    2038:	5c c0       	rjmp	.+184    	; 0x20f2 <DIO_WritrPin+0xd4>
    203a:	83 30       	cpi	r24, 0x03	; 3
    203c:	09 f4       	brne	.+2      	; 0x2040 <DIO_WritrPin+0x22>
    203e:	85 c0       	rjmp	.+266    	; 0x214a <DIO_WritrPin+0x12c>
    2040:	b1 c0       	rjmp	.+354    	; 0x21a4 <DIO_WritrPin+0x186>
	{
		case u8PORTA:
		if (GET_BIT(DDRA,loc_pin_id)==PIN_OUTPUT)
    2042:	2a b3       	in	r18, 0x1a	; 26
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	09 2e       	mov	r0, r25
    2048:	02 c0       	rjmp	.+4      	; 0x204e <DIO_WritrPin+0x30>
    204a:	35 95       	asr	r19
    204c:	27 95       	ror	r18
    204e:	0a 94       	dec	r0
    2050:	e2 f7       	brpl	.-8      	; 0x204a <DIO_WritrPin+0x2c>
    2052:	20 ff       	sbrs	r18, 0
    2054:	a9 c0       	rjmp	.+338    	; 0x21a8 <DIO_WritrPin+0x18a>
		{
			switch (level_value)
    2056:	66 23       	and	r22, r22
    2058:	89 f0       	breq	.+34     	; 0x207c <DIO_WritrPin+0x5e>
    205a:	61 30       	cpi	r22, 0x01	; 1
    205c:	09 f0       	breq	.+2      	; 0x2060 <DIO_WritrPin+0x42>
    205e:	a6 c0       	rjmp	.+332    	; 0x21ac <DIO_WritrPin+0x18e>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
    2060:	4b b3       	in	r20, 0x1b	; 27
    2062:	21 e0       	ldi	r18, 0x01	; 1
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	b9 01       	movw	r22, r18
    2068:	02 c0       	rjmp	.+4      	; 0x206e <DIO_WritrPin+0x50>
    206a:	66 0f       	add	r22, r22
    206c:	77 1f       	adc	r23, r23
    206e:	9a 95       	dec	r25
    2070:	e2 f7       	brpl	.-8      	; 0x206a <DIO_WritrPin+0x4c>
    2072:	cb 01       	movw	r24, r22
    2074:	84 2b       	or	r24, r20
    2076:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2078:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
    207a:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
    207c:	4b b3       	in	r20, 0x1b	; 27
    207e:	21 e0       	ldi	r18, 0x01	; 1
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	b9 01       	movw	r22, r18
    2084:	02 c0       	rjmp	.+4      	; 0x208a <DIO_WritrPin+0x6c>
    2086:	66 0f       	add	r22, r22
    2088:	77 1f       	adc	r23, r23
    208a:	9a 95       	dec	r25
    208c:	e2 f7       	brpl	.-8      	; 0x2086 <DIO_WritrPin+0x68>
    208e:	cb 01       	movw	r24, r22
    2090:	80 95       	com	r24
    2092:	84 23       	and	r24, r20
    2094:	8b bb       	out	0x1b, r24	; 27
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2096:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTA,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTA,loc_pin_id);
				break;
    2098:	08 95       	ret
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		case u8PORTB:
		if (GET_BIT(DDRB,loc_pin_id)==PIN_OUTPUT)
    209a:	27 b3       	in	r18, 0x17	; 23
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	09 2e       	mov	r0, r25
    20a0:	02 c0       	rjmp	.+4      	; 0x20a6 <DIO_WritrPin+0x88>
    20a2:	35 95       	asr	r19
    20a4:	27 95       	ror	r18
    20a6:	0a 94       	dec	r0
    20a8:	e2 f7       	brpl	.-8      	; 0x20a2 <DIO_WritrPin+0x84>
    20aa:	20 ff       	sbrs	r18, 0
    20ac:	81 c0       	rjmp	.+258    	; 0x21b0 <DIO_WritrPin+0x192>
		{
			switch (level_value)
    20ae:	66 23       	and	r22, r22
    20b0:	89 f0       	breq	.+34     	; 0x20d4 <DIO_WritrPin+0xb6>
    20b2:	61 30       	cpi	r22, 0x01	; 1
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <DIO_WritrPin+0x9a>
    20b6:	7e c0       	rjmp	.+252    	; 0x21b4 <DIO_WritrPin+0x196>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
    20b8:	48 b3       	in	r20, 0x18	; 24
    20ba:	21 e0       	ldi	r18, 0x01	; 1
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	b9 01       	movw	r22, r18
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <DIO_WritrPin+0xa8>
    20c2:	66 0f       	add	r22, r22
    20c4:	77 1f       	adc	r23, r23
    20c6:	9a 95       	dec	r25
    20c8:	e2 f7       	brpl	.-8      	; 0x20c2 <DIO_WritrPin+0xa4>
    20ca:	cb 01       	movw	r24, r22
    20cc:	84 2b       	or	r24, r20
    20ce:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    20d0:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
    20d2:	08 95       	ret
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
    20d4:	48 b3       	in	r20, 0x18	; 24
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	b9 01       	movw	r22, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <DIO_WritrPin+0xc4>
    20de:	66 0f       	add	r22, r22
    20e0:	77 1f       	adc	r23, r23
    20e2:	9a 95       	dec	r25
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <DIO_WritrPin+0xc0>
    20e6:	cb 01       	movw	r24, r22
    20e8:	80 95       	com	r24
    20ea:	84 23       	and	r24, r20
    20ec:	88 bb       	out	0x18, r24	; 24
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    20ee:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTB,loc_pin_id);
				break;
				case LOW_LEVEL : 
				CLR_BIT(PORTB,loc_pin_id);
				break;
    20f0:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;
		
		case u8PORTC:
		if (GET_BIT(DDRC,loc_pin_id)==PIN_OUTPUT)
    20f2:	24 b3       	in	r18, 0x14	; 20
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	09 2e       	mov	r0, r25
    20f8:	02 c0       	rjmp	.+4      	; 0x20fe <DIO_WritrPin+0xe0>
    20fa:	35 95       	asr	r19
    20fc:	27 95       	ror	r18
    20fe:	0a 94       	dec	r0
    2100:	e2 f7       	brpl	.-8      	; 0x20fa <DIO_WritrPin+0xdc>
    2102:	20 ff       	sbrs	r18, 0
    2104:	59 c0       	rjmp	.+178    	; 0x21b8 <DIO_WritrPin+0x19a>
		{
			switch (level_value)
    2106:	66 23       	and	r22, r22
    2108:	89 f0       	breq	.+34     	; 0x212c <DIO_WritrPin+0x10e>
    210a:	61 30       	cpi	r22, 0x01	; 1
    210c:	09 f0       	breq	.+2      	; 0x2110 <DIO_WritrPin+0xf2>
    210e:	56 c0       	rjmp	.+172    	; 0x21bc <DIO_WritrPin+0x19e>
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
    2110:	45 b3       	in	r20, 0x15	; 21
    2112:	21 e0       	ldi	r18, 0x01	; 1
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	b9 01       	movw	r22, r18
    2118:	02 c0       	rjmp	.+4      	; 0x211e <DIO_WritrPin+0x100>
    211a:	66 0f       	add	r22, r22
    211c:	77 1f       	adc	r23, r23
    211e:	9a 95       	dec	r25
    2120:	e2 f7       	brpl	.-8      	; 0x211a <DIO_WritrPin+0xfc>
    2122:	cb 01       	movw	r24, r22
    2124:	84 2b       	or	r24, r20
    2126:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2128:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
    212a:	08 95       	ret
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
    212c:	45 b3       	in	r20, 0x15	; 21
    212e:	21 e0       	ldi	r18, 0x01	; 1
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	b9 01       	movw	r22, r18
    2134:	02 c0       	rjmp	.+4      	; 0x213a <DIO_WritrPin+0x11c>
    2136:	66 0f       	add	r22, r22
    2138:	77 1f       	adc	r23, r23
    213a:	9a 95       	dec	r25
    213c:	e2 f7       	brpl	.-8      	; 0x2136 <DIO_WritrPin+0x118>
    213e:	cb 01       	movw	r24, r22
    2140:	80 95       	com	r24
    2142:	84 23       	and	r24, r20
    2144:	85 bb       	out	0x15, r24	; 21
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2146:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL :
				SET_BIT(PORTC,loc_pin_id);
				break;
				case  LOW_LEVEL :
				CLR_BIT(PORTC,loc_pin_id);
				break;
    2148:	08 95       	ret
		{	ERROR_LOCRET=PIN_DIR_ERROR;
		}
		break;

		case u8PORTD:
		if (GET_BIT(DDRD,loc_pin_id)==PIN_OUTPUT)
    214a:	21 b3       	in	r18, 0x11	; 17
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	09 2e       	mov	r0, r25
    2150:	02 c0       	rjmp	.+4      	; 0x2156 <DIO_WritrPin+0x138>
    2152:	35 95       	asr	r19
    2154:	27 95       	ror	r18
    2156:	0a 94       	dec	r0
    2158:	e2 f7       	brpl	.-8      	; 0x2152 <DIO_WritrPin+0x134>
    215a:	20 ff       	sbrs	r18, 0
    215c:	31 c0       	rjmp	.+98     	; 0x21c0 <DIO_WritrPin+0x1a2>
		{
			switch (level_value)
    215e:	66 23       	and	r22, r22
    2160:	81 f0       	breq	.+32     	; 0x2182 <DIO_WritrPin+0x164>
    2162:	61 30       	cpi	r22, 0x01	; 1
    2164:	79 f5       	brne	.+94     	; 0x21c4 <DIO_WritrPin+0x1a6>
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
    2166:	42 b3       	in	r20, 0x12	; 18
    2168:	21 e0       	ldi	r18, 0x01	; 1
    216a:	30 e0       	ldi	r19, 0x00	; 0
    216c:	b9 01       	movw	r22, r18
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <DIO_WritrPin+0x156>
    2170:	66 0f       	add	r22, r22
    2172:	77 1f       	adc	r23, r23
    2174:	9a 95       	dec	r25
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <DIO_WritrPin+0x152>
    2178:	cb 01       	movw	r24, r22
    217a:	84 2b       	or	r24, r20
    217c:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    217e:	80 e0       	ldi	r24, 0x00	; 0
		{
			switch (level_value)
			{
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
    2180:	08 95       	ret
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
    2182:	42 b3       	in	r20, 0x12	; 18
    2184:	21 e0       	ldi	r18, 0x01	; 1
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	b9 01       	movw	r22, r18
    218a:	02 c0       	rjmp	.+4      	; 0x2190 <DIO_WritrPin+0x172>
    218c:	66 0f       	add	r22, r22
    218e:	77 1f       	adc	r23, r23
    2190:	9a 95       	dec	r25
    2192:	e2 f7       	brpl	.-8      	; 0x218c <DIO_WritrPin+0x16e>
    2194:	cb 01       	movw	r24, r22
    2196:	80 95       	com	r24
    2198:	84 23       	and	r24, r20
    219a:	82 bb       	out	0x12, r24	; 18
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    219c:	80 e0       	ldi	r24, 0x00	; 0
				case HIGH_LEVEL:
				SET_BIT(PORTD,loc_pin_id);
				break;
				case LOW_LEVEL:
				CLR_BIT(PORTD,loc_pin_id);
				break;
    219e:	08 95       	ret
PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOCRET=PIN_NUMBER_ERROR;
    21a0:	81 e0       	ldi	r24, 0x01	; 1
    21a2:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	08 95       	ret
				CLR_BIT(PORTA,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
    21a8:	82 e0       	ldi	r24, 0x02	; 2
    21aa:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    21ac:	80 e0       	ldi	r24, 0x00	; 0
    21ae:	08 95       	ret
				CLR_BIT(PORTB,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
    21b0:	82 e0       	ldi	r24, 0x02	; 2
    21b2:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    21b4:	80 e0       	ldi	r24, 0x00	; 0
    21b6:	08 95       	ret
				CLR_BIT(PORTC,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	08 95       	ret
				CLR_BIT(PORTD,loc_pin_id);
				break;
			}
		}
		else
		{	ERROR_LOCRET=PIN_DIR_ERROR;
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	08 95       	ret
#include "../../../MCAL/DIO/include/DIO_private.h"
#include "../../../MCAL/DIO/include/DIO.h"

PIN_ERROR_TYPES DIO_WritrPin(u8 pin_id,u8 level_value)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    21c4:	80 e0       	ldi	r24, 0x00	; 0
		}
		break;
	}
}
	return ERROR_LOCRET;
}
    21c6:	08 95       	ret

000021c8 <DIO_READ_PIN>:
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
    21c8:	80 32       	cpi	r24, 0x20	; 32
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <DIO_READ_PIN+0x6>
    21cc:	6f c0       	rjmp	.+222    	; 0x22ac <DIO_READ_PIN+0xe4>
else	 /*case valid id pin*/
{	
	//PIN_ERROR_TYPES ERROR_LOCRET=ERROR_FREE;
	u8 *Loc_ptr= ptr_val;

	u8 loc_pin_id =pin_id % 8;
    21ce:	98 2f       	mov	r25, r24
    21d0:	97 70       	andi	r25, 0x07	; 7
	u8 loc_port_num=pin_id/8;
    21d2:	86 95       	lsr	r24
    21d4:	86 95       	lsr	r24
    21d6:	86 95       	lsr	r24
	
	switch(loc_port_num)
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	f1 f0       	breq	.+60     	; 0x2218 <DIO_READ_PIN+0x50>
    21dc:	30 f0       	brcs	.+12     	; 0x21ea <DIO_READ_PIN+0x22>
    21de:	82 30       	cpi	r24, 0x02	; 2
    21e0:	99 f1       	breq	.+102    	; 0x2248 <DIO_READ_PIN+0x80>
    21e2:	83 30       	cpi	r24, 0x03	; 3
    21e4:	09 f4       	brne	.+2      	; 0x21e8 <DIO_READ_PIN+0x20>
    21e6:	49 c0       	rjmp	.+146    	; 0x227a <DIO_READ_PIN+0xb2>
    21e8:	63 c0       	rjmp	.+198    	; 0x22b0 <DIO_READ_PIN+0xe8>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
    21ea:	2a b3       	in	r18, 0x1a	; 26
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	09 2e       	mov	r0, r25
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <DIO_READ_PIN+0x2e>
    21f2:	35 95       	asr	r19
    21f4:	27 95       	ror	r18
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <DIO_READ_PIN+0x2a>
    21fa:	20 fd       	sbrc	r18, 0
    21fc:	0f c0       	rjmp	.+30     	; 0x221c <DIO_READ_PIN+0x54>
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
    21fe:	29 b3       	in	r18, 0x19	; 25
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	09 2e       	mov	r0, r25
    2204:	02 c0       	rjmp	.+4      	; 0x220a <DIO_READ_PIN+0x42>
    2206:	35 95       	asr	r19
    2208:	27 95       	ror	r18
    220a:	0a 94       	dec	r0
    220c:	e2 f7       	brpl	.-8      	; 0x2206 <DIO_READ_PIN+0x3e>
    220e:	21 70       	andi	r18, 0x01	; 1
    2210:	fb 01       	movw	r30, r22
    2212:	20 83       	st	Z, r18
}
	return ERROR_LOCRET;
}
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	03 c0       	rjmp	.+6      	; 0x221e <DIO_READ_PIN+0x56>
    2218:	80 e0       	ldi	r24, 0x00	; 0
    221a:	01 c0       	rjmp	.+2      	; 0x221e <DIO_READ_PIN+0x56>
	{
		case u8PORTA:
		if(GET_BIT(DDRA,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINA,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
    221c:	82 e0       	ldi	r24, 0x02	; 2
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
    221e:	27 b3       	in	r18, 0x17	; 23
    2220:	30 e0       	ldi	r19, 0x00	; 0
    2222:	09 2e       	mov	r0, r25
    2224:	02 c0       	rjmp	.+4      	; 0x222a <DIO_READ_PIN+0x62>
    2226:	35 95       	asr	r19
    2228:	27 95       	ror	r18
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <DIO_READ_PIN+0x5e>
    222e:	20 fd       	sbrc	r18, 0
    2230:	41 c0       	rjmp	.+130    	; 0x22b4 <DIO_READ_PIN+0xec>
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
    2232:	26 b3       	in	r18, 0x16	; 22
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	02 c0       	rjmp	.+4      	; 0x223c <DIO_READ_PIN+0x74>
    2238:	35 95       	asr	r19
    223a:	27 95       	ror	r18
    223c:	9a 95       	dec	r25
    223e:	e2 f7       	brpl	.-8      	; 0x2238 <DIO_READ_PIN+0x70>
    2240:	21 70       	andi	r18, 0x01	; 1
    2242:	fb 01       	movw	r30, r22
    2244:	20 83       	st	Z, r18
    2246:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
    2248:	24 b3       	in	r18, 0x14	; 20
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	09 2e       	mov	r0, r25
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <DIO_READ_PIN+0x8c>
    2250:	35 95       	asr	r19
    2252:	27 95       	ror	r18
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <DIO_READ_PIN+0x88>
    2258:	20 fd       	sbrc	r18, 0
    225a:	2e c0       	rjmp	.+92     	; 0x22b8 <DIO_READ_PIN+0xf0>
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
    225c:	83 b3       	in	r24, 0x13	; 19
    225e:	28 2f       	mov	r18, r24
    2260:	30 e0       	ldi	r19, 0x00	; 0
    2262:	a9 01       	movw	r20, r18
    2264:	02 c0       	rjmp	.+4      	; 0x226a <DIO_READ_PIN+0xa2>
    2266:	55 95       	asr	r21
    2268:	47 95       	ror	r20
    226a:	9a 95       	dec	r25
    226c:	e2 f7       	brpl	.-8      	; 0x2266 <DIO_READ_PIN+0x9e>
    226e:	ca 01       	movw	r24, r20
    2270:	81 70       	andi	r24, 0x01	; 1
    2272:	fb 01       	movw	r30, r22
    2274:	80 83       	st	Z, r24
}
	return ERROR_LOCRET;
}
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
    227a:	21 b3       	in	r18, 0x11	; 17
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	09 2e       	mov	r0, r25
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <DIO_READ_PIN+0xbe>
    2282:	35 95       	asr	r19
    2284:	27 95       	ror	r18
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <DIO_READ_PIN+0xba>
    228a:	20 fd       	sbrc	r18, 0
    228c:	17 c0       	rjmp	.+46     	; 0x22bc <DIO_READ_PIN+0xf4>
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
    228e:	80 b3       	in	r24, 0x10	; 16
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	a9 01       	movw	r20, r18
    2296:	02 c0       	rjmp	.+4      	; 0x229c <DIO_READ_PIN+0xd4>
    2298:	55 95       	asr	r21
    229a:	47 95       	ror	r20
    229c:	9a 95       	dec	r25
    229e:	e2 f7       	brpl	.-8      	; 0x2298 <DIO_READ_PIN+0xd0>
    22a0:	ca 01       	movw	r24, r20
    22a2:	81 70       	andi	r24, 0x01	; 1
    22a4:	fb 01       	movw	r30, r22
    22a6:	80 83       	st	Z, r24
}
	return ERROR_LOCRET;
}
PIN_ERROR_TYPES  DIO_READ_PIN(u8 pin_id,u8 *ptr_val)
{
PIN_ERROR_TYPES ERROR_LOCRET =ERROR_FREE;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	08 95       	ret
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOCRET=PIN_NUMBER_ERROR;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	08 95       	ret
		else   ERROR_LOCRET=PIN_DIR_ERROR;
		
		break;
		
		default :
		ERROR_LOCRET = PORT_ERROR;
    22b0:	83 e0       	ldi	r24, 0x03	; 3
    22b2:	08 95       	ret
		
		case u8PORTB:
		if(GET_BIT(DDRB,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINB,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
    22b4:	82 e0       	ldi	r24, 0x02	; 2
    22b6:	08 95       	ret
		
		case u8PORTC:
		if(GET_BIT(DDRC,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PINC,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	08 95       	ret
		
		case u8PORTD:
		if(GET_BIT(DDRD,loc_pin_id)==PIN_INPUT)
		*Loc_ptr=(GET_BIT(PIND,loc_pin_id));
		
		else   ERROR_LOCRET=PIN_DIR_ERROR;
    22bc:	82 e0       	ldi	r24, 0x02	; 2
	}
	

}
	return ERROR_LOCRET;
}
    22be:	08 95       	ret

000022c0 <Global_Interrupt_EnablE>:
	SET_BIT(GICR,X);
}

void Disable_EXT_INT(u8 X)
{
	CLR_BIT(GICR,X);
    22c0:	8f b7       	in	r24, 0x3f	; 63
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	8f bf       	out	0x3f, r24	; 63
    22c6:	08 95       	ret

000022c8 <__vector_1>:
Call_backFromExtISR[2]();
}
*/
/* Prototype for ISR of EXTI0 */
void __vector_1(void)			__attribute__((signal));
void __vector_1(void){
    22c8:	1f 92       	push	r1
    22ca:	0f 92       	push	r0
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	0f 92       	push	r0
    22d0:	11 24       	eor	r1, r1
    22d2:	2f 93       	push	r18
    22d4:	3f 93       	push	r19
    22d6:	4f 93       	push	r20
    22d8:	5f 93       	push	r21
    22da:	6f 93       	push	r22
    22dc:	7f 93       	push	r23
    22de:	8f 93       	push	r24
    22e0:	9f 93       	push	r25
    22e2:	af 93       	push	r26
    22e4:	bf 93       	push	r27
    22e6:	ef 93       	push	r30
    22e8:	ff 93       	push	r31
	if(Call_backFromExtISR[0] != NULL){
    22ea:	e0 91 5a 07 	lds	r30, 0x075A	; 0x80075a <Call_backFromExtISR>
    22ee:	f0 91 5b 07 	lds	r31, 0x075B	; 0x80075b <Call_backFromExtISR+0x1>
    22f2:	30 97       	sbiw	r30, 0x00	; 0
    22f4:	21 f0       	breq	.+8      	; 0x22fe <__vector_1+0x36>
		Call_backFromExtISR[0]();
    22f6:	09 95       	icall
		SET_BIT( GIFR , EXT_INT0 );		
    22f8:	8a b7       	in	r24, 0x3a	; 58
    22fa:	80 64       	ori	r24, 0x40	; 64
    22fc:	8a bf       	out	0x3a, r24	; 58
	}
}
    22fe:	ff 91       	pop	r31
    2300:	ef 91       	pop	r30
    2302:	bf 91       	pop	r27
    2304:	af 91       	pop	r26
    2306:	9f 91       	pop	r25
    2308:	8f 91       	pop	r24
    230a:	7f 91       	pop	r23
    230c:	6f 91       	pop	r22
    230e:	5f 91       	pop	r21
    2310:	4f 91       	pop	r20
    2312:	3f 91       	pop	r19
    2314:	2f 91       	pop	r18
    2316:	0f 90       	pop	r0
    2318:	0f be       	out	0x3f, r0	; 63
    231a:	0f 90       	pop	r0
    231c:	1f 90       	pop	r1
    231e:	18 95       	reti

00002320 <__vector_2>:

/* Prototype for ISR of EXTI1 */
void __vector_2(void)			__attribute__((signal));
void __vector_2(void){
    2320:	1f 92       	push	r1
    2322:	0f 92       	push	r0
    2324:	0f b6       	in	r0, 0x3f	; 63
    2326:	0f 92       	push	r0
    2328:	11 24       	eor	r1, r1
    232a:	2f 93       	push	r18
    232c:	3f 93       	push	r19
    232e:	4f 93       	push	r20
    2330:	5f 93       	push	r21
    2332:	6f 93       	push	r22
    2334:	7f 93       	push	r23
    2336:	8f 93       	push	r24
    2338:	9f 93       	push	r25
    233a:	af 93       	push	r26
    233c:	bf 93       	push	r27
    233e:	ef 93       	push	r30
    2340:	ff 93       	push	r31
	if(Call_backFromExtISR[1] != NULL){
    2342:	e0 91 5c 07 	lds	r30, 0x075C	; 0x80075c <Call_backFromExtISR+0x2>
    2346:	f0 91 5d 07 	lds	r31, 0x075D	; 0x80075d <Call_backFromExtISR+0x3>
    234a:	30 97       	sbiw	r30, 0x00	; 0
    234c:	21 f0       	breq	.+8      	; 0x2356 <__vector_2+0x36>
		Call_backFromExtISR[1]();
    234e:	09 95       	icall
		SET_BIT( GIFR , EXT_INT1 );		
    2350:	8a b7       	in	r24, 0x3a	; 58
    2352:	80 68       	ori	r24, 0x80	; 128
    2354:	8a bf       	out	0x3a, r24	; 58
	}
}
    2356:	ff 91       	pop	r31
    2358:	ef 91       	pop	r30
    235a:	bf 91       	pop	r27
    235c:	af 91       	pop	r26
    235e:	9f 91       	pop	r25
    2360:	8f 91       	pop	r24
    2362:	7f 91       	pop	r23
    2364:	6f 91       	pop	r22
    2366:	5f 91       	pop	r21
    2368:	4f 91       	pop	r20
    236a:	3f 91       	pop	r19
    236c:	2f 91       	pop	r18
    236e:	0f 90       	pop	r0
    2370:	0f be       	out	0x3f, r0	; 63
    2372:	0f 90       	pop	r0
    2374:	1f 90       	pop	r1
    2376:	18 95       	reti

00002378 <__vector_3>:

/* Prototype for ISR of EXTI2 */
void __vector_3(void)			__attribute__((signal));
void __vector_3(void){
    2378:	1f 92       	push	r1
    237a:	0f 92       	push	r0
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	0f 92       	push	r0
    2380:	11 24       	eor	r1, r1
    2382:	2f 93       	push	r18
    2384:	3f 93       	push	r19
    2386:	4f 93       	push	r20
    2388:	5f 93       	push	r21
    238a:	6f 93       	push	r22
    238c:	7f 93       	push	r23
    238e:	8f 93       	push	r24
    2390:	9f 93       	push	r25
    2392:	af 93       	push	r26
    2394:	bf 93       	push	r27
    2396:	ef 93       	push	r30
    2398:	ff 93       	push	r31
	if(Call_backFromExtISR[2] != NULL){
    239a:	e0 91 5e 07 	lds	r30, 0x075E	; 0x80075e <Call_backFromExtISR+0x4>
    239e:	f0 91 5f 07 	lds	r31, 0x075F	; 0x80075f <Call_backFromExtISR+0x5>
    23a2:	30 97       	sbiw	r30, 0x00	; 0
    23a4:	09 f0       	breq	.+2      	; 0x23a8 <__vector_3+0x30>
		Call_backFromExtISR[2]();
    23a6:	09 95       	icall
	}
}
    23a8:	ff 91       	pop	r31
    23aa:	ef 91       	pop	r30
    23ac:	bf 91       	pop	r27
    23ae:	af 91       	pop	r26
    23b0:	9f 91       	pop	r25
    23b2:	8f 91       	pop	r24
    23b4:	7f 91       	pop	r23
    23b6:	6f 91       	pop	r22
    23b8:	5f 91       	pop	r21
    23ba:	4f 91       	pop	r20
    23bc:	3f 91       	pop	r19
    23be:	2f 91       	pop	r18
    23c0:	0f 90       	pop	r0
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	0f 90       	pop	r0
    23c6:	1f 90       	pop	r1
    23c8:	18 95       	reti

000023ca <Port_setPinDirection>:

}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
if (pin_id>31)  /* in case not valid id pin */
    23ca:	80 32       	cpi	r24, 0x20	; 32
    23cc:	08 f0       	brcs	.+2      	; 0x23d0 <Port_setPinDirection+0x6>
    23ce:	93 c0       	rjmp	.+294    	; 0x24f6 <Port_setPinDirection+0x12c>
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
} 
else           /*in case valid id pin */
{	
    u8 loc_pin_id =pin_id % 8;
    23d0:	98 2f       	mov	r25, r24
    23d2:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
    23d4:	86 95       	lsr	r24
    23d6:	86 95       	lsr	r24
    23d8:	86 95       	lsr	r24
    switch(loc_port_num)
    23da:	81 30       	cpi	r24, 0x01	; 1
    23dc:	49 f1       	breq	.+82     	; 0x2430 <Port_setPinDirection+0x66>
    23de:	38 f0       	brcs	.+14     	; 0x23ee <Port_setPinDirection+0x24>
    23e0:	82 30       	cpi	r24, 0x02	; 2
    23e2:	09 f4       	brne	.+2      	; 0x23e6 <Port_setPinDirection+0x1c>
    23e4:	46 c0       	rjmp	.+140    	; 0x2472 <Port_setPinDirection+0xa8>
    23e6:	83 30       	cpi	r24, 0x03	; 3
    23e8:	09 f4       	brne	.+2      	; 0x23ec <Port_setPinDirection+0x22>
    23ea:	64 c0       	rjmp	.+200    	; 0x24b4 <Port_setPinDirection+0xea>
    23ec:	86 c0       	rjmp	.+268    	; 0x24fa <Port_setPinDirection+0x130>
    {
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
    23ee:	61 30       	cpi	r22, 0x01	; 1
    23f0:	71 f4       	brne	.+28     	; 0x240e <Port_setPinDirection+0x44>
        {
            SET_BIT(DDRA,loc_pin_id);   
    23f2:	4a b3       	in	r20, 0x1a	; 26
    23f4:	21 e0       	ldi	r18, 0x01	; 1
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	b9 01       	movw	r22, r18
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <Port_setPinDirection+0x36>
    23fc:	66 0f       	add	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	9a 95       	dec	r25
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <Port_setPinDirection+0x32>
    2404:	cb 01       	movw	r24, r22
    2406:	84 2b       	or	r24, r20
    2408:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	08 95       	ret
        case u8PORTA:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRA,loc_pin_id);   
        }
        else if(pin_direction==PIN_INPUT)
    240e:	61 11       	cpse	r22, r1
    2410:	76 c0       	rjmp	.+236    	; 0x24fe <Port_setPinDirection+0x134>
        {
            CLR_BIT(DDRA,loc_pin_id);
    2412:	4a b3       	in	r20, 0x1a	; 26
    2414:	21 e0       	ldi	r18, 0x01	; 1
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	b9 01       	movw	r22, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <Port_setPinDirection+0x56>
    241c:	66 0f       	add	r22, r22
    241e:	77 1f       	adc	r23, r23
    2420:	9a 95       	dec	r25
    2422:	e2 f7       	brpl	.-8      	; 0x241c <Port_setPinDirection+0x52>
    2424:	cb 01       	movw	r24, r22
    2426:	80 95       	com	r24
    2428:	84 23       	and	r24, r20
    242a:	8a bb       	out	0x1a, r24	; 26


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	08 95       	ret
        {
            CLR_BIT(DDRA,loc_pin_id);
        } 
		break;     
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
    2430:	61 30       	cpi	r22, 0x01	; 1
    2432:	71 f4       	brne	.+28     	; 0x2450 <Port_setPinDirection+0x86>
        {
           SET_BIT(DDRB,loc_pin_id);
    2434:	47 b3       	in	r20, 0x17	; 23
    2436:	21 e0       	ldi	r18, 0x01	; 1
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	b9 01       	movw	r22, r18
    243c:	02 c0       	rjmp	.+4      	; 0x2442 <Port_setPinDirection+0x78>
    243e:	66 0f       	add	r22, r22
    2440:	77 1f       	adc	r23, r23
    2442:	9a 95       	dec	r25
    2444:	e2 f7       	brpl	.-8      	; 0x243e <Port_setPinDirection+0x74>
    2446:	cb 01       	movw	r24, r22
    2448:	84 2b       	or	r24, r20
    244a:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	08 95       	ret
        case u8PORTB:
        if(pin_direction==PIN_OUTPUT)
        {
           SET_BIT(DDRB,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
    2450:	61 11       	cpse	r22, r1
    2452:	57 c0       	rjmp	.+174    	; 0x2502 <Port_setPinDirection+0x138>
        {
            CLR_BIT(DDRB,loc_pin_id);
    2454:	47 b3       	in	r20, 0x17	; 23
    2456:	21 e0       	ldi	r18, 0x01	; 1
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	b9 01       	movw	r22, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <Port_setPinDirection+0x98>
    245e:	66 0f       	add	r22, r22
    2460:	77 1f       	adc	r23, r23
    2462:	9a 95       	dec	r25
    2464:	e2 f7       	brpl	.-8      	; 0x245e <Port_setPinDirection+0x94>
    2466:	cb 01       	movw	r24, r22
    2468:	80 95       	com	r24
    246a:	84 23       	and	r24, r20
    246c:	87 bb       	out	0x17, r24	; 23


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	08 95       	ret
            CLR_BIT(DDRB,loc_pin_id);
        }
        break;
        case u8PORTC:

        if(pin_direction==PIN_OUTPUT)
    2472:	61 30       	cpi	r22, 0x01	; 1
    2474:	71 f4       	brne	.+28     	; 0x2492 <Port_setPinDirection+0xc8>
        {
            SET_BIT(DDRC,loc_pin_id);
    2476:	44 b3       	in	r20, 0x14	; 20
    2478:	21 e0       	ldi	r18, 0x01	; 1
    247a:	30 e0       	ldi	r19, 0x00	; 0
    247c:	b9 01       	movw	r22, r18
    247e:	02 c0       	rjmp	.+4      	; 0x2484 <Port_setPinDirection+0xba>
    2480:	66 0f       	add	r22, r22
    2482:	77 1f       	adc	r23, r23
    2484:	9a 95       	dec	r25
    2486:	e2 f7       	brpl	.-8      	; 0x2480 <Port_setPinDirection+0xb6>
    2488:	cb 01       	movw	r24, r22
    248a:	84 2b       	or	r24, r20
    248c:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	08 95       	ret

        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRC,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
    2492:	61 11       	cpse	r22, r1
    2494:	38 c0       	rjmp	.+112    	; 0x2506 <Port_setPinDirection+0x13c>
        {
            CLR_BIT(DDRC,loc_pin_id);
    2496:	44 b3       	in	r20, 0x14	; 20
    2498:	21 e0       	ldi	r18, 0x01	; 1
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	b9 01       	movw	r22, r18
    249e:	02 c0       	rjmp	.+4      	; 0x24a4 <Port_setPinDirection+0xda>
    24a0:	66 0f       	add	r22, r22
    24a2:	77 1f       	adc	r23, r23
    24a4:	9a 95       	dec	r25
    24a6:	e2 f7       	brpl	.-8      	; 0x24a0 <Port_setPinDirection+0xd6>
    24a8:	cb 01       	movw	r24, r22
    24aa:	80 95       	com	r24
    24ac:	84 23       	and	r24, r20
    24ae:	84 bb       	out	0x14, r24	; 20


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	08 95       	ret
        {
            CLR_BIT(DDRC,loc_pin_id);
        }
        break;
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
    24b4:	61 30       	cpi	r22, 0x01	; 1
    24b6:	71 f4       	brne	.+28     	; 0x24d4 <Port_setPinDirection+0x10a>
        {
            SET_BIT(DDRD,loc_pin_id);
    24b8:	41 b3       	in	r20, 0x11	; 17
    24ba:	21 e0       	ldi	r18, 0x01	; 1
    24bc:	30 e0       	ldi	r19, 0x00	; 0
    24be:	b9 01       	movw	r22, r18
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <Port_setPinDirection+0xfc>
    24c2:	66 0f       	add	r22, r22
    24c4:	77 1f       	adc	r23, r23
    24c6:	9a 95       	dec	r25
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <Port_setPinDirection+0xf8>
    24ca:	cb 01       	movw	r24, r22
    24cc:	84 2b       	or	r24, r20
    24ce:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	08 95       	ret
        case u8PORTD:
        if(pin_direction==PIN_OUTPUT)
        {
            SET_BIT(DDRD,loc_pin_id);
        }
        else if(pin_direction==PIN_INPUT)
    24d4:	61 11       	cpse	r22, r1
    24d6:	19 c0       	rjmp	.+50     	; 0x250a <Port_setPinDirection+0x140>
        {
            CLR_BIT(DDRD,loc_pin_id);
    24d8:	41 b3       	in	r20, 0x11	; 17
    24da:	21 e0       	ldi	r18, 0x01	; 1
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	b9 01       	movw	r22, r18
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <Port_setPinDirection+0x11c>
    24e2:	66 0f       	add	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	9a 95       	dec	r25
    24e8:	e2 f7       	brpl	.-8      	; 0x24e2 <Port_setPinDirection+0x118>
    24ea:	cb 01       	movw	r24, r22
    24ec:	80 95       	com	r24
    24ee:	84 23       	and	r24, r20
    24f0:	81 bb       	out	0x11, r24	; 17


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	08 95       	ret
if (pin_id>31)  /* in case not valid id pin */
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
    24f6:	81 e0       	ldi	r24, 0x01	; 1
    24f8:	08 95       	ret
        {
            CLR_BIT(DDRD,loc_pin_id);
        }
        break;
    default:
	 ERROR_LOC_RET =PIN_DIR_ERROR;
    24fa:	82 e0       	ldi	r24, 0x02	; 2
    24fc:	08 95       	ret


}
PIN_ERROR_TYPES Port_setPinDirection(u8 pin_id,u8 pin_direction)  
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;	
    24fe:	80 e0       	ldi	r24, 0x00	; 0
    2500:	08 95       	ret
    2502:	80 e0       	ldi	r24, 0x00	; 0
    2504:	08 95       	ret
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	08 95       	ret
    250a:	80 e0       	ldi	r24, 0x00	; 0
	 ERROR_LOC_RET =PIN_DIR_ERROR;
		
    }
}
 return ERROR_LOC_RET;   
}
    250c:	08 95       	ret

0000250e <Port_SetPinMode>:
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
    250e:	80 32       	cpi	r24, 0x20	; 32
    2510:	08 f0       	brcs	.+2      	; 0x2514 <Port_SetPinMode+0x6>
    2512:	5c c1       	rjmp	.+696    	; 0x27cc <Port_SetPinMode+0x2be>
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
}
else	 /*case valid id pin*/
{
    u8 loc_Pin_id= pin_id % 8;
    2514:	98 2f       	mov	r25, r24
    2516:	97 70       	andi	r25, 0x07	; 7
    u8 loc_port_num=pin_id/8;
    2518:	86 95       	lsr	r24
    251a:	86 95       	lsr	r24
    251c:	86 95       	lsr	r24
    switch(loc_port_num)
    251e:	81 30       	cpi	r24, 0x01	; 1
    2520:	09 f4       	brne	.+2      	; 0x2524 <Port_SetPinMode+0x16>
    2522:	5b c0       	rjmp	.+182    	; 0x25da <Port_SetPinMode+0xcc>
    2524:	38 f0       	brcs	.+14     	; 0x2534 <Port_SetPinMode+0x26>
    2526:	82 30       	cpi	r24, 0x02	; 2
    2528:	09 f4       	brne	.+2      	; 0x252c <Port_SetPinMode+0x1e>
    252a:	aa c0       	rjmp	.+340    	; 0x2680 <Port_SetPinMode+0x172>
    252c:	83 30       	cpi	r24, 0x03	; 3
    252e:	09 f4       	brne	.+2      	; 0x2532 <Port_SetPinMode+0x24>
    2530:	fa c0       	rjmp	.+500    	; 0x2726 <Port_SetPinMode+0x218>
    2532:	4e c1       	rjmp	.+668    	; 0x27d0 <Port_SetPinMode+0x2c2>
    {
        case u8PORTA:
          switch(pin_mode){
    2534:	61 30       	cpi	r22, 0x01	; 1
    2536:	31 f0       	breq	.+12     	; 0x2544 <Port_SetPinMode+0x36>
    2538:	b8 f0       	brcs	.+46     	; 0x2568 <Port_SetPinMode+0x5a>
    253a:	62 30       	cpi	r22, 0x02	; 2
    253c:	41 f1       	breq	.+80     	; 0x258e <Port_SetPinMode+0x80>
    253e:	63 30       	cpi	r22, 0x03	; 3
    2540:	c9 f1       	breq	.+114    	; 0x25b4 <Port_SetPinMode+0xa6>
    2542:	48 c1       	rjmp	.+656    	; 0x27d4 <Port_SetPinMode+0x2c6>
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
    2544:	4a b3       	in	r20, 0x1a	; 26
    2546:	21 e0       	ldi	r18, 0x01	; 1
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	b9 01       	movw	r22, r18
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <Port_SetPinMode+0x44>
    254e:	66 0f       	add	r22, r22
    2550:	77 1f       	adc	r23, r23
    2552:	9a 95       	dec	r25
    2554:	e2 f7       	brpl	.-8      	; 0x254e <Port_SetPinMode+0x40>
    2556:	cb 01       	movw	r24, r22
    2558:	94 2f       	mov	r25, r20
    255a:	98 2b       	or	r25, r24
    255c:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,loc_Pin_id);
    255e:	9b b3       	in	r25, 0x1b	; 27
    2560:	89 2b       	or	r24, r25
    2562:	8b bb       	out	0x1b, r24	; 27
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    2564:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTA:
          switch(pin_mode){
            case PIN_OUT_HIGH:
			SET_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);
			break;
    2566:	08 95       	ret
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
    2568:	4a b3       	in	r20, 0x1a	; 26
    256a:	21 e0       	ldi	r18, 0x01	; 1
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	b9 01       	movw	r22, r18
    2570:	02 c0       	rjmp	.+4      	; 0x2576 <Port_SetPinMode+0x68>
    2572:	66 0f       	add	r22, r22
    2574:	77 1f       	adc	r23, r23
    2576:	9a 95       	dec	r25
    2578:	e2 f7       	brpl	.-8      	; 0x2572 <Port_SetPinMode+0x64>
    257a:	cb 01       	movw	r24, r22
    257c:	94 2f       	mov	r25, r20
    257e:	98 2b       	or	r25, r24
    2580:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,loc_Pin_id);
    2582:	9b b3       	in	r25, 0x1b	; 27
    2584:	80 95       	com	r24
    2586:	89 23       	and	r24, r25
    2588:	8b bb       	out	0x1b, r24	; 27
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    258a:	80 e0       	ldi	r24, 0x00	; 0
			SET_BIT(PORTA,loc_Pin_id);
			break;
			case  PIN_OUT_LOW:
			SET_BIT(DDRA,loc_Pin_id);
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
    258c:	08 95       	ret
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
    258e:	4a b3       	in	r20, 0x1a	; 26
    2590:	21 e0       	ldi	r18, 0x01	; 1
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	b9 01       	movw	r22, r18
    2596:	02 c0       	rjmp	.+4      	; 0x259c <Port_SetPinMode+0x8e>
    2598:	66 0f       	add	r22, r22
    259a:	77 1f       	adc	r23, r23
    259c:	9a 95       	dec	r25
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <Port_SetPinMode+0x8a>
    25a0:	cb 01       	movw	r24, r22
    25a2:	80 95       	com	r24
    25a4:	94 2f       	mov	r25, r20
    25a6:	98 23       	and	r25, r24
    25a8:	9a bb       	out	0x1a, r25	; 26
		    CLR_BIT(PORTA,loc_Pin_id);                     
    25aa:	9b b3       	in	r25, 0x1b	; 27
    25ac:	89 23       	and	r24, r25
    25ae:	8b bb       	out	0x1b, r24	; 27
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    25b0:	80 e0       	ldi	r24, 0x00	; 0
			CLR_BIT(PORTA,loc_Pin_id);
			break;	
            case   PIN_IN_FLOAT:
		    CLR_BIT(DDRA,loc_Pin_id);
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
    25b2:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
    25b4:	4a b3       	in	r20, 0x1a	; 26
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	b9 01       	movw	r22, r18
    25bc:	02 c0       	rjmp	.+4      	; 0x25c2 <Port_SetPinMode+0xb4>
    25be:	66 0f       	add	r22, r22
    25c0:	77 1f       	adc	r23, r23
    25c2:	9a 95       	dec	r25
    25c4:	e2 f7       	brpl	.-8      	; 0x25be <Port_SetPinMode+0xb0>
    25c6:	cb 01       	movw	r24, r22
    25c8:	96 2f       	mov	r25, r22
    25ca:	90 95       	com	r25
    25cc:	94 23       	and	r25, r20
    25ce:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,loc_Pin_id);                     
    25d0:	9b b3       	in	r25, 0x1b	; 27
    25d2:	89 2b       	or	r24, r25
    25d4:	8b bb       	out	0x1b, r24	; 27
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    25d6:	80 e0       	ldi	r24, 0x00	; 0
		    CLR_BIT(PORTA,loc_Pin_id);                     
		    break;
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
    25d8:	08 95       	ret
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
		  }
		  break;			
        case u8PORTB:
          switch(pin_mode){		  
    25da:	61 30       	cpi	r22, 0x01	; 1
    25dc:	31 f0       	breq	.+12     	; 0x25ea <Port_SetPinMode+0xdc>
    25de:	b8 f0       	brcs	.+46     	; 0x260e <Port_SetPinMode+0x100>
    25e0:	62 30       	cpi	r22, 0x02	; 2
    25e2:	41 f1       	breq	.+80     	; 0x2634 <Port_SetPinMode+0x126>
    25e4:	63 30       	cpi	r22, 0x03	; 3
    25e6:	c9 f1       	breq	.+114    	; 0x265a <Port_SetPinMode+0x14c>
    25e8:	f7 c0       	rjmp	.+494    	; 0x27d8 <Port_SetPinMode+0x2ca>
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
    25ea:	47 b3       	in	r20, 0x17	; 23
    25ec:	21 e0       	ldi	r18, 0x01	; 1
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	b9 01       	movw	r22, r18
    25f2:	02 c0       	rjmp	.+4      	; 0x25f8 <Port_SetPinMode+0xea>
    25f4:	66 0f       	add	r22, r22
    25f6:	77 1f       	adc	r23, r23
    25f8:	9a 95       	dec	r25
    25fa:	e2 f7       	brpl	.-8      	; 0x25f4 <Port_SetPinMode+0xe6>
    25fc:	cb 01       	movw	r24, r22
    25fe:	94 2f       	mov	r25, r20
    2600:	98 2b       	or	r25, r24
    2602:	97 bb       	out	0x17, r25	; 23
            SET_BIT(PORTB,loc_Pin_id);
    2604:	98 b3       	in	r25, 0x18	; 24
    2606:	89 2b       	or	r24, r25
    2608:	88 bb       	out	0x18, r24	; 24
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    260a:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTB:
          switch(pin_mode){		  
            case PIN_OUT_HIGH:
            SET_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);
            break;
    260c:	08 95       	ret
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
    260e:	47 b3       	in	r20, 0x17	; 23
    2610:	21 e0       	ldi	r18, 0x01	; 1
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	b9 01       	movw	r22, r18
    2616:	02 c0       	rjmp	.+4      	; 0x261c <Port_SetPinMode+0x10e>
    2618:	66 0f       	add	r22, r22
    261a:	77 1f       	adc	r23, r23
    261c:	9a 95       	dec	r25
    261e:	e2 f7       	brpl	.-8      	; 0x2618 <Port_SetPinMode+0x10a>
    2620:	cb 01       	movw	r24, r22
    2622:	94 2f       	mov	r25, r20
    2624:	98 2b       	or	r25, r24
    2626:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);
    2628:	98 b3       	in	r25, 0x18	; 24
    262a:	80 95       	com	r24
    262c:	89 23       	and	r24, r25
    262e:	88 bb       	out	0x18, r24	; 24
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    2630:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTB,loc_Pin_id);
            break;
           case PIN_OUT_LOW:
            SET_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);
            break;
    2632:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
    2634:	47 b3       	in	r20, 0x17	; 23
    2636:	21 e0       	ldi	r18, 0x01	; 1
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	b9 01       	movw	r22, r18
    263c:	02 c0       	rjmp	.+4      	; 0x2642 <Port_SetPinMode+0x134>
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	9a 95       	dec	r25
    2644:	e2 f7       	brpl	.-8      	; 0x263e <Port_SetPinMode+0x130>
    2646:	cb 01       	movw	r24, r22
    2648:	80 95       	com	r24
    264a:	94 2f       	mov	r25, r20
    264c:	98 23       	and	r25, r24
    264e:	97 bb       	out	0x17, r25	; 23
            CLR_BIT(PORTB,loc_Pin_id);                     
    2650:	98 b3       	in	r25, 0x18	; 24
    2652:	89 23       	and	r24, r25
    2654:	88 bb       	out	0x18, r24	; 24
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    2656:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRB,loc_Pin_id);
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
    2658:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
    265a:	47 b3       	in	r20, 0x17	; 23
    265c:	21 e0       	ldi	r18, 0x01	; 1
    265e:	30 e0       	ldi	r19, 0x00	; 0
    2660:	b9 01       	movw	r22, r18
    2662:	02 c0       	rjmp	.+4      	; 0x2668 <Port_SetPinMode+0x15a>
    2664:	66 0f       	add	r22, r22
    2666:	77 1f       	adc	r23, r23
    2668:	9a 95       	dec	r25
    266a:	e2 f7       	brpl	.-8      	; 0x2664 <Port_SetPinMode+0x156>
    266c:	cb 01       	movw	r24, r22
    266e:	96 2f       	mov	r25, r22
    2670:	90 95       	com	r25
    2672:	94 23       	and	r25, r20
    2674:	97 bb       	out	0x17, r25	; 23
            SET_BIT(PORTB,loc_Pin_id);                     
    2676:	98 b3       	in	r25, 0x18	; 24
    2678:	89 2b       	or	r24, r25
    267a:	88 bb       	out	0x18, r24	; 24
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    267c:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTB,loc_Pin_id);                     
            break;
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
    267e:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
		  }
		  break;			
        case u8PORTC:
          switch(pin_mode){
    2680:	61 30       	cpi	r22, 0x01	; 1
    2682:	31 f0       	breq	.+12     	; 0x2690 <Port_SetPinMode+0x182>
    2684:	b8 f0       	brcs	.+46     	; 0x26b4 <Port_SetPinMode+0x1a6>
    2686:	62 30       	cpi	r22, 0x02	; 2
    2688:	41 f1       	breq	.+80     	; 0x26da <Port_SetPinMode+0x1cc>
    268a:	63 30       	cpi	r22, 0x03	; 3
    268c:	c9 f1       	breq	.+114    	; 0x2700 <Port_SetPinMode+0x1f2>
    268e:	a6 c0       	rjmp	.+332    	; 0x27dc <Port_SetPinMode+0x2ce>
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
    2690:	44 b3       	in	r20, 0x14	; 20
    2692:	21 e0       	ldi	r18, 0x01	; 1
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	b9 01       	movw	r22, r18
    2698:	02 c0       	rjmp	.+4      	; 0x269e <Port_SetPinMode+0x190>
    269a:	66 0f       	add	r22, r22
    269c:	77 1f       	adc	r23, r23
    269e:	9a 95       	dec	r25
    26a0:	e2 f7       	brpl	.-8      	; 0x269a <Port_SetPinMode+0x18c>
    26a2:	cb 01       	movw	r24, r22
    26a4:	94 2f       	mov	r25, r20
    26a6:	98 2b       	or	r25, r24
    26a8:	94 bb       	out	0x14, r25	; 20
            SET_BIT(PORTC,loc_Pin_id);
    26aa:	95 b3       	in	r25, 0x15	; 21
    26ac:	89 2b       	or	r24, r25
    26ae:	85 bb       	out	0x15, r24	; 21
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    26b0:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTC:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);
            break;
    26b2:	08 95       	ret
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
    26b4:	44 b3       	in	r20, 0x14	; 20
    26b6:	21 e0       	ldi	r18, 0x01	; 1
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	b9 01       	movw	r22, r18
    26bc:	02 c0       	rjmp	.+4      	; 0x26c2 <Port_SetPinMode+0x1b4>
    26be:	66 0f       	add	r22, r22
    26c0:	77 1f       	adc	r23, r23
    26c2:	9a 95       	dec	r25
    26c4:	e2 f7       	brpl	.-8      	; 0x26be <Port_SetPinMode+0x1b0>
    26c6:	cb 01       	movw	r24, r22
    26c8:	94 2f       	mov	r25, r20
    26ca:	98 2b       	or	r25, r24
    26cc:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);
    26ce:	95 b3       	in	r25, 0x15	; 21
    26d0:	80 95       	com	r24
    26d2:	89 23       	and	r24, r25
    26d4:	85 bb       	out	0x15, r24	; 21
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    26d6:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTC,loc_Pin_id);
            break;
		    case PIN_OUT_LOW:
            SET_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);
            break;
    26d8:	08 95       	ret
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
    26da:	44 b3       	in	r20, 0x14	; 20
    26dc:	21 e0       	ldi	r18, 0x01	; 1
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	b9 01       	movw	r22, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <Port_SetPinMode+0x1da>
    26e4:	66 0f       	add	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	9a 95       	dec	r25
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <Port_SetPinMode+0x1d6>
    26ec:	cb 01       	movw	r24, r22
    26ee:	80 95       	com	r24
    26f0:	94 2f       	mov	r25, r20
    26f2:	98 23       	and	r25, r24
    26f4:	94 bb       	out	0x14, r25	; 20
            CLR_BIT(PORTC,loc_Pin_id);                     
    26f6:	95 b3       	in	r25, 0x15	; 21
    26f8:	89 23       	and	r24, r25
    26fa:	85 bb       	out	0x15, r24	; 21
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    26fc:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTC,loc_Pin_id);
            break;
            case   PIN_IN_FLOAT:
            CLR_BIT(DDRC,loc_Pin_id);
            CLR_BIT(PORTC,loc_Pin_id);                     
            break;
    26fe:	08 95       	ret

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
    2700:	44 b3       	in	r20, 0x14	; 20
    2702:	21 e0       	ldi	r18, 0x01	; 1
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	b9 01       	movw	r22, r18
    2708:	02 c0       	rjmp	.+4      	; 0x270e <Port_SetPinMode+0x200>
    270a:	66 0f       	add	r22, r22
    270c:	77 1f       	adc	r23, r23
    270e:	9a 95       	dec	r25
    2710:	e2 f7       	brpl	.-8      	; 0x270a <Port_SetPinMode+0x1fc>
    2712:	cb 01       	movw	r24, r22
    2714:	96 2f       	mov	r25, r22
    2716:	90 95       	com	r25
    2718:	94 23       	and	r25, r20
    271a:	94 bb       	out	0x14, r25	; 20
            SET_BIT(PORTC,loc_Pin_id);                     
    271c:	95 b3       	in	r25, 0x15	; 21
    271e:	89 2b       	or	r24, r25
    2720:	85 bb       	out	0x15, r24	; 21
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    2722:	80 e0       	ldi	r24, 0x00	; 0
            break;

            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
    2724:	08 95       	ret
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
		  }
		  break;					 
        case u8PORTD:
          switch(pin_mode){
    2726:	61 30       	cpi	r22, 0x01	; 1
    2728:	31 f0       	breq	.+12     	; 0x2736 <Port_SetPinMode+0x228>
    272a:	b8 f0       	brcs	.+46     	; 0x275a <Port_SetPinMode+0x24c>
    272c:	62 30       	cpi	r22, 0x02	; 2
    272e:	41 f1       	breq	.+80     	; 0x2780 <Port_SetPinMode+0x272>
    2730:	63 30       	cpi	r22, 0x03	; 3
    2732:	c9 f1       	breq	.+114    	; 0x27a6 <Port_SetPinMode+0x298>
    2734:	55 c0       	rjmp	.+170    	; 0x27e0 <Port_SetPinMode+0x2d2>
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
    2736:	41 b3       	in	r20, 0x11	; 17
    2738:	21 e0       	ldi	r18, 0x01	; 1
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	b9 01       	movw	r22, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <Port_SetPinMode+0x236>
    2740:	66 0f       	add	r22, r22
    2742:	77 1f       	adc	r23, r23
    2744:	9a 95       	dec	r25
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <Port_SetPinMode+0x232>
    2748:	cb 01       	movw	r24, r22
    274a:	94 2f       	mov	r25, r20
    274c:	98 2b       	or	r25, r24
    274e:	91 bb       	out	0x11, r25	; 17
            SET_BIT(PORTD,loc_Pin_id);
    2750:	92 b3       	in	r25, 0x12	; 18
    2752:	89 2b       	or	r24, r25
    2754:	82 bb       	out	0x12, r24	; 18
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    2756:	80 e0       	ldi	r24, 0x00	; 0
        case u8PORTD:
          switch(pin_mode){
            case PIN_OUT_HIGH:
            SET_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);
            break;
    2758:	08 95       	ret
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
    275a:	41 b3       	in	r20, 0x11	; 17
    275c:	21 e0       	ldi	r18, 0x01	; 1
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	b9 01       	movw	r22, r18
    2762:	02 c0       	rjmp	.+4      	; 0x2768 <Port_SetPinMode+0x25a>
    2764:	66 0f       	add	r22, r22
    2766:	77 1f       	adc	r23, r23
    2768:	9a 95       	dec	r25
    276a:	e2 f7       	brpl	.-8      	; 0x2764 <Port_SetPinMode+0x256>
    276c:	cb 01       	movw	r24, r22
    276e:	94 2f       	mov	r25, r20
    2770:	98 2b       	or	r25, r24
    2772:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);
    2774:	92 b3       	in	r25, 0x12	; 18
    2776:	80 95       	com	r24
    2778:	89 23       	and	r24, r25
    277a:	82 bb       	out	0x12, r24	; 18
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    277c:	80 e0       	ldi	r24, 0x00	; 0
            SET_BIT(PORTD,loc_Pin_id);
            break;
            case PIN_OUT_LOW:
            SET_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
    277e:	08 95       	ret
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
    2780:	41 b3       	in	r20, 0x11	; 17
    2782:	21 e0       	ldi	r18, 0x01	; 1
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	b9 01       	movw	r22, r18
    2788:	02 c0       	rjmp	.+4      	; 0x278e <Port_SetPinMode+0x280>
    278a:	66 0f       	add	r22, r22
    278c:	77 1f       	adc	r23, r23
    278e:	9a 95       	dec	r25
    2790:	e2 f7       	brpl	.-8      	; 0x278a <Port_SetPinMode+0x27c>
    2792:	cb 01       	movw	r24, r22
    2794:	80 95       	com	r24
    2796:	94 2f       	mov	r25, r20
    2798:	98 23       	and	r25, r24
    279a:	91 bb       	out	0x11, r25	; 17
            CLR_BIT(PORTD,loc_Pin_id);                     
    279c:	92 b3       	in	r25, 0x12	; 18
    279e:	89 23       	and	r24, r25
    27a0:	82 bb       	out	0x12, r24	; 18
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    27a2:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);
            break;			
            case PIN_IN_FLOAT:
            CLR_BIT(DDRD,loc_Pin_id);
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
    27a4:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
    27a6:	41 b3       	in	r20, 0x11	; 17
    27a8:	21 e0       	ldi	r18, 0x01	; 1
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	b9 01       	movw	r22, r18
    27ae:	02 c0       	rjmp	.+4      	; 0x27b4 <Port_SetPinMode+0x2a6>
    27b0:	66 0f       	add	r22, r22
    27b2:	77 1f       	adc	r23, r23
    27b4:	9a 95       	dec	r25
    27b6:	e2 f7       	brpl	.-8      	; 0x27b0 <Port_SetPinMode+0x2a2>
    27b8:	cb 01       	movw	r24, r22
    27ba:	96 2f       	mov	r25, r22
    27bc:	90 95       	com	r25
    27be:	94 23       	and	r25, r20
    27c0:	91 bb       	out	0x11, r25	; 17
            SET_BIT(PORTD,loc_Pin_id);                     
    27c2:	92 b3       	in	r25, 0x12	; 18
    27c4:	89 2b       	or	r24, r25
    27c6:	82 bb       	out	0x12, r24	; 18
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    27c8:	80 e0       	ldi	r24, 0x00	; 0
            CLR_BIT(PORTD,loc_Pin_id);                     
            break;
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
    27ca:	08 95       	ret
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
if (pin_id>31)  /*in case not valid pin id */
{
	ERROR_LOC_RET=PIN_NUMBER_ERROR;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	08 95       	ret
}
 return ERROR_LOC_RET;   
}
PIN_ERROR_TYPES Port_SetPinMode(u8 pin_id,u8 pin_mode)
{
PIN_ERROR_TYPES ERROR_LOC_RET =ERROR_FREE;
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	08 95       	ret
            case   PIN_IN_PULLUP:
			CLR_BIT(DDRA,loc_Pin_id);
			SET_BIT(PORTA,loc_Pin_id);                     
			break;   				         
            default:
			ERROR_LOC_RET= PIN_MODE_ERROR;
    27d4:	84 e0       	ldi	r24, 0x04	; 4
    27d6:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRB,loc_Pin_id);
            SET_BIT(PORTB,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;			  
    27d8:	84 e0       	ldi	r24, 0x04	; 4
    27da:	08 95       	ret
            case   PIN_IN_PULLUP:
            CLR_BIT(DDRC,loc_Pin_id);
            SET_BIT(PORTC,loc_Pin_id);                     
            break;            
            default:
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    27dc:	84 e0       	ldi	r24, 0x04	; 4
    27de:	08 95       	ret
            case PIN_IN_PULLUP:
            CLR_BIT(DDRD,loc_Pin_id);
            SET_BIT(PORTD,loc_Pin_id);                     
            break;            
            default: 
			ERROR_LOC_RET=PIN_MODE_ERROR;	
    27e0:	84 e0       	ldi	r24, 0x04	; 4
			}
			break;		
        }   
	}	
	return ERROR_LOC_RET;	
	}
    27e2:	08 95       	ret

000027e4 <__vector_12>:
  //  tenuErrorStatus Local_u8ErrorState = no_error;
        SPI_COMPLETE_OPERATION_ISR_POINTER = ptrCallBackFunc;
}

void __vector_12(void) __attribute__((signal));
void __vector_12(void){
    27e4:	1f 92       	push	r1
    27e6:	0f 92       	push	r0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	0f 92       	push	r0
    27ec:	11 24       	eor	r1, r1
    27ee:	2f 93       	push	r18
    27f0:	3f 93       	push	r19
    27f2:	4f 93       	push	r20
    27f4:	5f 93       	push	r21
    27f6:	6f 93       	push	r22
    27f8:	7f 93       	push	r23
    27fa:	8f 93       	push	r24
    27fc:	9f 93       	push	r25
    27fe:	af 93       	push	r26
    2800:	bf 93       	push	r27
    2802:	ef 93       	push	r30
    2804:	ff 93       	push	r31
    if (SPI_COMPLETE_OPERATION_ISR_POINTER != NULL){
    2806:	e0 91 60 07 	lds	r30, 0x0760	; 0x800760 <SPI_COMPLETE_OPERATION_ISR_POINTER>
    280a:	f0 91 61 07 	lds	r31, 0x0761	; 0x800761 <SPI_COMPLETE_OPERATION_ISR_POINTER+0x1>
    280e:	30 97       	sbiw	r30, 0x00	; 0
    2810:	09 f0       	breq	.+2      	; 0x2814 <__vector_12+0x30>
        SPI_COMPLETE_OPERATION_ISR_POINTER();
    2812:	09 95       	icall
    }
}
    2814:	ff 91       	pop	r31
    2816:	ef 91       	pop	r30
    2818:	bf 91       	pop	r27
    281a:	af 91       	pop	r26
    281c:	9f 91       	pop	r25
    281e:	8f 91       	pop	r24
    2820:	7f 91       	pop	r23
    2822:	6f 91       	pop	r22
    2824:	5f 91       	pop	r21
    2826:	4f 91       	pop	r20
    2828:	3f 91       	pop	r19
    282a:	2f 91       	pop	r18
    282c:	0f 90       	pop	r0
    282e:	0f be       	out	0x3f, r0	; 63
    2830:	0f 90       	pop	r0
    2832:	1f 90       	pop	r1
    2834:	18 95       	reti

00002836 <__vector_11>:


/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)	__attribute__((signal)) ;
void __vector_11 (void)
{
    2836:	1f 92       	push	r1
    2838:	0f 92       	push	r0
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	0f 92       	push	r0
    283e:	11 24       	eor	r1, r1
    2840:	2f 93       	push	r18
    2842:	3f 93       	push	r19
    2844:	4f 93       	push	r20
    2846:	5f 93       	push	r21
    2848:	6f 93       	push	r22
    284a:	7f 93       	push	r23
    284c:	8f 93       	push	r24
    284e:	9f 93       	push	r25
    2850:	af 93       	push	r26
    2852:	bf 93       	push	r27
    2854:	ef 93       	push	r30
    2856:	ff 93       	push	r31
	TIMER_pvTimer0();
    2858:	e0 91 62 07 	lds	r30, 0x0762	; 0x800762 <TIMER_pvTimer0>
    285c:	f0 91 63 07 	lds	r31, 0x0763	; 0x800763 <TIMER_pvTimer0+0x1>
    2860:	09 95       	icall
}
    2862:	ff 91       	pop	r31
    2864:	ef 91       	pop	r30
    2866:	bf 91       	pop	r27
    2868:	af 91       	pop	r26
    286a:	9f 91       	pop	r25
    286c:	8f 91       	pop	r24
    286e:	7f 91       	pop	r23
    2870:	6f 91       	pop	r22
    2872:	5f 91       	pop	r21
    2874:	4f 91       	pop	r20
    2876:	3f 91       	pop	r19
    2878:	2f 91       	pop	r18
    287a:	0f 90       	pop	r0
    287c:	0f be       	out	0x3f, r0	; 63
    287e:	0f 90       	pop	r0
    2880:	1f 90       	pop	r1
    2882:	18 95       	reti

00002884 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    2884:	1f 92       	push	r1
    2886:	0f 92       	push	r0
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	0f 92       	push	r0
    288c:	11 24       	eor	r1, r1
	
}
    288e:	0f 90       	pop	r0
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	0f 90       	pop	r0
    2894:	1f 90       	pop	r1
    2896:	18 95       	reti

00002898 <TIMER2_voidInit>:
	{
		Local_u8ErrorState = NULL ;
	}

	return Local_u8ErrorState ;
}
    2898:	85 b5       	in	r24, 0x25	; 37
    289a:	80 64       	ori	r24, 0x40	; 64
    289c:	85 bd       	out	0x25, r24	; 37
    289e:	85 b5       	in	r24, 0x25	; 37
    28a0:	88 60       	ori	r24, 0x08	; 8
    28a2:	85 bd       	out	0x25, r24	; 37
    28a4:	85 b5       	in	r24, 0x25	; 37
    28a6:	8f 7e       	andi	r24, 0xEF	; 239
    28a8:	85 bd       	out	0x25, r24	; 37
    28aa:	85 b5       	in	r24, 0x25	; 37
    28ac:	80 62       	ori	r24, 0x20	; 32
    28ae:	85 bd       	out	0x25, r24	; 37
    28b0:	13 bc       	out	0x23, r1	; 35
    28b2:	85 b5       	in	r24, 0x25	; 37
    28b4:	88 7f       	andi	r24, 0xF8	; 248
    28b6:	85 bd       	out	0x25, r24	; 37
    28b8:	85 b5       	in	r24, 0x25	; 37
    28ba:	83 60       	ori	r24, 0x03	; 3
    28bc:	85 bd       	out	0x25, r24	; 37
    28be:	08 95       	ret

000028c0 <TIMER2_voidSetCTC>:
    28c0:	83 bd       	out	0x23, r24	; 35
    28c2:	08 95       	ret

000028c4 <__vector_9>:
}
*/
/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    28c4:	1f 92       	push	r1
    28c6:	0f 92       	push	r0
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	0f 92       	push	r0
    28cc:	11 24       	eor	r1, r1
    28ce:	2f 93       	push	r18
    28d0:	3f 93       	push	r19
    28d2:	4f 93       	push	r20
    28d4:	5f 93       	push	r21
    28d6:	6f 93       	push	r22
    28d8:	7f 93       	push	r23
    28da:	8f 93       	push	r24
    28dc:	9f 93       	push	r25
    28de:	af 93       	push	r26
    28e0:	bf 93       	push	r27
    28e2:	ef 93       	push	r30
    28e4:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    28e6:	e0 91 76 07 	lds	r30, 0x0776	; 0x800776 <TIMERS_pvCallBackFunc+0x12>
    28ea:	f0 91 77 07 	lds	r31, 0x0777	; 0x800777 <TIMERS_pvCallBackFunc+0x13>
    28ee:	30 97       	sbiw	r30, 0x00	; 0
    28f0:	09 f0       	breq	.+2      	; 0x28f4 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    28f2:	09 95       	icall
	}
}
    28f4:	ff 91       	pop	r31
    28f6:	ef 91       	pop	r30
    28f8:	bf 91       	pop	r27
    28fa:	af 91       	pop	r26
    28fc:	9f 91       	pop	r25
    28fe:	8f 91       	pop	r24
    2900:	7f 91       	pop	r23
    2902:	6f 91       	pop	r22
    2904:	5f 91       	pop	r21
    2906:	4f 91       	pop	r20
    2908:	3f 91       	pop	r19
    290a:	2f 91       	pop	r18
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti

00002916 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    2916:	1f 92       	push	r1
    2918:	0f 92       	push	r0
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	0f 92       	push	r0
    291e:	11 24       	eor	r1, r1
    2920:	2f 93       	push	r18
    2922:	3f 93       	push	r19
    2924:	4f 93       	push	r20
    2926:	5f 93       	push	r21
    2928:	6f 93       	push	r22
    292a:	7f 93       	push	r23
    292c:	8f 93       	push	r24
    292e:	9f 93       	push	r25
    2930:	af 93       	push	r26
    2932:	bf 93       	push	r27
    2934:	ef 93       	push	r30
    2936:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    2938:	e0 91 74 07 	lds	r30, 0x0774	; 0x800774 <TIMERS_pvCallBackFunc+0x10>
    293c:	f0 91 75 07 	lds	r31, 0x0775	; 0x800775 <TIMERS_pvCallBackFunc+0x11>
    2940:	30 97       	sbiw	r30, 0x00	; 0
    2942:	09 f0       	breq	.+2      	; 0x2946 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    2944:	09 95       	icall
	}
}
    2946:	ff 91       	pop	r31
    2948:	ef 91       	pop	r30
    294a:	bf 91       	pop	r27
    294c:	af 91       	pop	r26
    294e:	9f 91       	pop	r25
    2950:	8f 91       	pop	r24
    2952:	7f 91       	pop	r23
    2954:	6f 91       	pop	r22
    2956:	5f 91       	pop	r21
    2958:	4f 91       	pop	r20
    295a:	3f 91       	pop	r19
    295c:	2f 91       	pop	r18
    295e:	0f 90       	pop	r0
    2960:	0f be       	out	0x3f, r0	; 63
    2962:	0f 90       	pop	r0
    2964:	1f 90       	pop	r1
    2966:	18 95       	reti

00002968 <__vector_6>:
}*/

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    2968:	1f 92       	push	r1
    296a:	0f 92       	push	r0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	0f 92       	push	r0
    2970:	11 24       	eor	r1, r1
    2972:	2f 93       	push	r18
    2974:	3f 93       	push	r19
    2976:	4f 93       	push	r20
    2978:	5f 93       	push	r21
    297a:	6f 93       	push	r22
    297c:	7f 93       	push	r23
    297e:	8f 93       	push	r24
    2980:	9f 93       	push	r25
    2982:	af 93       	push	r26
    2984:	bf 93       	push	r27
    2986:	ef 93       	push	r30
    2988:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    298a:	e0 91 70 07 	lds	r30, 0x0770	; 0x800770 <TIMERS_pvCallBackFunc+0xc>
    298e:	f0 91 71 07 	lds	r31, 0x0771	; 0x800771 <TIMERS_pvCallBackFunc+0xd>
    2992:	30 97       	sbiw	r30, 0x00	; 0
    2994:	09 f0       	breq	.+2      	; 0x2998 <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    2996:	09 95       	icall
	}
}
    2998:	ff 91       	pop	r31
    299a:	ef 91       	pop	r30
    299c:	bf 91       	pop	r27
    299e:	af 91       	pop	r26
    29a0:	9f 91       	pop	r25
    29a2:	8f 91       	pop	r24
    29a4:	7f 91       	pop	r23
    29a6:	6f 91       	pop	r22
    29a8:	5f 91       	pop	r21
    29aa:	4f 91       	pop	r20
    29ac:	3f 91       	pop	r19
    29ae:	2f 91       	pop	r18
    29b0:	0f 90       	pop	r0
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	0f 90       	pop	r0
    29b6:	1f 90       	pop	r1
    29b8:	18 95       	reti

000029ba <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    29ba:	1f 92       	push	r1
    29bc:	0f 92       	push	r0
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	0f 92       	push	r0
    29c2:	11 24       	eor	r1, r1
    29c4:	2f 93       	push	r18
    29c6:	3f 93       	push	r19
    29c8:	4f 93       	push	r20
    29ca:	5f 93       	push	r21
    29cc:	6f 93       	push	r22
    29ce:	7f 93       	push	r23
    29d0:	8f 93       	push	r24
    29d2:	9f 93       	push	r25
    29d4:	af 93       	push	r26
    29d6:	bf 93       	push	r27
    29d8:	ef 93       	push	r30
    29da:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    29dc:	e0 91 6e 07 	lds	r30, 0x076E	; 0x80076e <TIMERS_pvCallBackFunc+0xa>
    29e0:	f0 91 6f 07 	lds	r31, 0x076F	; 0x80076f <TIMERS_pvCallBackFunc+0xb>
    29e4:	30 97       	sbiw	r30, 0x00	; 0
    29e6:	09 f0       	breq	.+2      	; 0x29ea <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    29e8:	09 95       	icall
	}
}
    29ea:	ff 91       	pop	r31
    29ec:	ef 91       	pop	r30
    29ee:	bf 91       	pop	r27
    29f0:	af 91       	pop	r26
    29f2:	9f 91       	pop	r25
    29f4:	8f 91       	pop	r24
    29f6:	7f 91       	pop	r23
    29f8:	6f 91       	pop	r22
    29fa:	5f 91       	pop	r21
    29fc:	4f 91       	pop	r20
    29fe:	3f 91       	pop	r19
    2a00:	2f 91       	pop	r18
    2a02:	0f 90       	pop	r0
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	0f 90       	pop	r0
    2a08:	1f 90       	pop	r1
    2a0a:	18 95       	reti

00002a0c <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    2a0c:	1f 92       	push	r1
    2a0e:	0f 92       	push	r0
    2a10:	0f b6       	in	r0, 0x3f	; 63
    2a12:	0f 92       	push	r0
    2a14:	11 24       	eor	r1, r1
    2a16:	2f 93       	push	r18
    2a18:	3f 93       	push	r19
    2a1a:	4f 93       	push	r20
    2a1c:	5f 93       	push	r21
    2a1e:	6f 93       	push	r22
    2a20:	7f 93       	push	r23
    2a22:	8f 93       	push	r24
    2a24:	9f 93       	push	r25
    2a26:	af 93       	push	r26
    2a28:	bf 93       	push	r27
    2a2a:	ef 93       	push	r30
    2a2c:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    2a2e:	e0 91 6c 07 	lds	r30, 0x076C	; 0x80076c <TIMERS_pvCallBackFunc+0x8>
    2a32:	f0 91 6d 07 	lds	r31, 0x076D	; 0x80076d <TIMERS_pvCallBackFunc+0x9>
    2a36:	30 97       	sbiw	r30, 0x00	; 0
    2a38:	09 f0       	breq	.+2      	; 0x2a3c <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    2a3a:	09 95       	icall
	}
}
    2a3c:	ff 91       	pop	r31
    2a3e:	ef 91       	pop	r30
    2a40:	bf 91       	pop	r27
    2a42:	af 91       	pop	r26
    2a44:	9f 91       	pop	r25
    2a46:	8f 91       	pop	r24
    2a48:	7f 91       	pop	r23
    2a4a:	6f 91       	pop	r22
    2a4c:	5f 91       	pop	r21
    2a4e:	4f 91       	pop	r20
    2a50:	3f 91       	pop	r19
    2a52:	2f 91       	pop	r18
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	0f 90       	pop	r0
    2a5a:	1f 90       	pop	r1
    2a5c:	18 95       	reti

00002a5e <__vector_13>:
	UART_TX_Fptr = LocalFptr;
}
/***********************************************ISR ************************************************************/
void __vector_13 (void)	__attribute__((signal)) ;
void __vector_13 (void)
{
    2a5e:	1f 92       	push	r1
    2a60:	0f 92       	push	r0
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	0f 92       	push	r0
    2a66:	11 24       	eor	r1, r1
    2a68:	2f 93       	push	r18
    2a6a:	3f 93       	push	r19
    2a6c:	4f 93       	push	r20
    2a6e:	5f 93       	push	r21
    2a70:	6f 93       	push	r22
    2a72:	7f 93       	push	r23
    2a74:	8f 93       	push	r24
    2a76:	9f 93       	push	r25
    2a78:	af 93       	push	r26
    2a7a:	bf 93       	push	r27
    2a7c:	ef 93       	push	r30
    2a7e:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULL)
    2a80:	e0 91 86 07 	lds	r30, 0x0786	; 0x800786 <UART_RX_Fptr>
    2a84:	f0 91 87 07 	lds	r31, 0x0787	; 0x800787 <UART_RX_Fptr+0x1>
    2a88:	30 97       	sbiw	r30, 0x00	; 0
    2a8a:	09 f0       	breq	.+2      	; 0x2a8e <__vector_13+0x30>
	{
		UART_RX_Fptr();
    2a8c:	09 95       	icall
	}
}
    2a8e:	ff 91       	pop	r31
    2a90:	ef 91       	pop	r30
    2a92:	bf 91       	pop	r27
    2a94:	af 91       	pop	r26
    2a96:	9f 91       	pop	r25
    2a98:	8f 91       	pop	r24
    2a9a:	7f 91       	pop	r23
    2a9c:	6f 91       	pop	r22
    2a9e:	5f 91       	pop	r21
    2aa0:	4f 91       	pop	r20
    2aa2:	3f 91       	pop	r19
    2aa4:	2f 91       	pop	r18
    2aa6:	0f 90       	pop	r0
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	0f 90       	pop	r0
    2aac:	1f 90       	pop	r1
    2aae:	18 95       	reti

00002ab0 <__vector_15>:

void __vector_15 (void)	__attribute__((signal)) ;
void __vector_15 (void)
{
    2ab0:	1f 92       	push	r1
    2ab2:	0f 92       	push	r0
    2ab4:	0f b6       	in	r0, 0x3f	; 63
    2ab6:	0f 92       	push	r0
    2ab8:	11 24       	eor	r1, r1
    2aba:	2f 93       	push	r18
    2abc:	3f 93       	push	r19
    2abe:	4f 93       	push	r20
    2ac0:	5f 93       	push	r21
    2ac2:	6f 93       	push	r22
    2ac4:	7f 93       	push	r23
    2ac6:	8f 93       	push	r24
    2ac8:	9f 93       	push	r25
    2aca:	af 93       	push	r26
    2acc:	bf 93       	push	r27
    2ace:	ef 93       	push	r30
    2ad0:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULL)
    2ad2:	e0 91 84 07 	lds	r30, 0x0784	; 0x800784 <UART_TX_Fptr>
    2ad6:	f0 91 85 07 	lds	r31, 0x0785	; 0x800785 <UART_TX_Fptr+0x1>
    2ada:	30 97       	sbiw	r30, 0x00	; 0
    2adc:	09 f0       	breq	.+2      	; 0x2ae0 <__vector_15+0x30>
	{
		UART_TX_Fptr();
    2ade:	09 95       	icall
	}
}
    2ae0:	ff 91       	pop	r31
    2ae2:	ef 91       	pop	r30
    2ae4:	bf 91       	pop	r27
    2ae6:	af 91       	pop	r26
    2ae8:	9f 91       	pop	r25
    2aea:	8f 91       	pop	r24
    2aec:	7f 91       	pop	r23
    2aee:	6f 91       	pop	r22
    2af0:	5f 91       	pop	r21
    2af2:	4f 91       	pop	r20
    2af4:	3f 91       	pop	r19
    2af6:	2f 91       	pop	r18
    2af8:	0f 90       	pop	r0
    2afa:	0f be       	out	0x3f, r0	; 63
    2afc:	0f 90       	pop	r0
    2afe:	1f 90       	pop	r1
    2b00:	18 95       	reti

00002b02 <__udivmodhi4>:
    2b02:	aa 1b       	sub	r26, r26
    2b04:	bb 1b       	sub	r27, r27
    2b06:	51 e1       	ldi	r21, 0x11	; 17
    2b08:	07 c0       	rjmp	.+14     	; 0x2b18 <__udivmodhi4_ep>

00002b0a <__udivmodhi4_loop>:
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	a6 17       	cp	r26, r22
    2b10:	b7 07       	cpc	r27, r23
    2b12:	10 f0       	brcs	.+4      	; 0x2b18 <__udivmodhi4_ep>
    2b14:	a6 1b       	sub	r26, r22
    2b16:	b7 0b       	sbc	r27, r23

00002b18 <__udivmodhi4_ep>:
    2b18:	88 1f       	adc	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	5a 95       	dec	r21
    2b1e:	a9 f7       	brne	.-22     	; 0x2b0a <__udivmodhi4_loop>
    2b20:	80 95       	com	r24
    2b22:	90 95       	com	r25
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	08 95       	ret

00002b2a <__umulhisi3>:
    2b2a:	a2 9f       	mul	r26, r18
    2b2c:	b0 01       	movw	r22, r0
    2b2e:	b3 9f       	mul	r27, r19
    2b30:	c0 01       	movw	r24, r0
    2b32:	a3 9f       	mul	r26, r19
    2b34:	70 0d       	add	r23, r0
    2b36:	81 1d       	adc	r24, r1
    2b38:	11 24       	eor	r1, r1
    2b3a:	91 1d       	adc	r25, r1
    2b3c:	b2 9f       	mul	r27, r18
    2b3e:	70 0d       	add	r23, r0
    2b40:	81 1d       	adc	r24, r1
    2b42:	11 24       	eor	r1, r1
    2b44:	91 1d       	adc	r25, r1
    2b46:	08 95       	ret

00002b48 <memcpy>:
    2b48:	fb 01       	movw	r30, r22
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	02 c0       	rjmp	.+4      	; 0x2b52 <memcpy+0xa>
    2b4e:	01 90       	ld	r0, Z+
    2b50:	0d 92       	st	X+, r0
    2b52:	41 50       	subi	r20, 0x01	; 1
    2b54:	50 40       	sbci	r21, 0x00	; 0
    2b56:	d8 f7       	brcc	.-10     	; 0x2b4e <memcpy+0x6>
    2b58:	08 95       	ret

00002b5a <_exit>:
    2b5a:	f8 94       	cli

00002b5c <__stop_program>:
    2b5c:	ff cf       	rjmp	.-2      	; 0x2b5c <__stop_program>
